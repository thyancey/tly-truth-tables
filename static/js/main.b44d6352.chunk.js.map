{"version":3,"sources":["themes/index.ts","app/hooks.ts","app/data/data.tsx","utils/index.tsx","utils/puzzler.tsx","scenes/main/slice.tsx","scenes/main/board.tsx","scenes/main/status.tsx","scenes/main/footer.tsx","scenes/main/hinttext.tsx","scenes/main/hint.tsx","scenes/main/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["mixinFontFamily","style","css","createGlobalStyle","getColor","colorId","store","colors","brown_dark","brown","brown_light","black","grey","grey_light","white","pink_dark","pink","pink_light","red","green_dark","green","green_light","blue_dark","blue","blue_light","yellow","purple","shadows","z1","z2","z3","breakpoints","mobile_tiny","mobile_medium","mobile_large","tablet","desktop","useAppDispatch","useDispatch","useAppSelector","useSelector","HINT_GIVERS","id","name","thumbImage","largeImage","generatedGrids","getGridShape","size","gridShape","gsRow","gridRow","rowIdx","gsCol","push","generateGridShape","RandIdx","min","max","Math","floor","random","RandBetween","filterUsedHints","attrGroup","reservedAttr","filter","attrDetail","attributeIdx","type","chooseAttribute","attrDetails","influenceType","filteredAttributes","groupAttrs","sameGroup","find","solutionIdx","length","influenceGroupIdx","group","console","log","generateSingleHint","attrA","attrB","text","fromSameGroup","prefix","suffix","value","attributeDisplay","generateHintText","used","convertSolutionsToAttributeDetails","solutions","attributes","map","solution","sIdx","vIdx","aIdx","attribute","display","values","valueIdx","filterFromWorkingAttrs","solutionDetails","usedAttributes","usedAttr","getInfluenceType","curRatio","influenceCalc","ratioTotal","initialState","roundData","title","description","valueSize","cellMatrix","hints","activeHintIdx","roundStatus","gridSlice","createSlice","reducers","resetMatrix","state","numAttributes","numValues","boxSize","pow","solutionSet","calcSolution","newMatrix","idx","r","c","bi","attrPair","xVal","yVal","ansMatrix","isSolution","isCellSolution","attrs","status","hintGivers","maxHints","workingAttrs","yesNoRatio","i","hgIdx","error","generated","concat","hintGiverIdx","generateHints","rotateCell","action","nextStatus","getNextStatus","payload","setActiveHint","submitAnswer","actions","answerSet","attrMatrix","a","numAnswers","availableAttributes","Array","from","keys","generatedAnswer","answerAttrs","randIdx","splice","cellObj","e","getCellMatrix","board","getRoundData","getSolution","getHints","getRoundStatus","renderHint","hint","hintGiver","selectHints","createSelector","h","selectActiveHint","selectAttributes","selectGridInfo","gridSize","selectGridLabels","rowAttributes","colAttributes","rc","selectGridBox","row","rIdx","_","cIdx","boxArr","selectSolution","checkIfSolved","numExpected","cell","answeredCells","expectedCells","aC","selectGreenCells","getAttributeMatrixForCellIndex","cellIndex","boxAttrs","boxIdx","flat","getBoxAttributes","colIdx","gridInfo","greenCells","gc","StyledBoard","styled","div","StyledLeftLabels","StyledLeftLabel","p","StyledTopLabels","StyledTopLabel","StyledCells","StyledRawCellGroup","StyledCellGroup","cellRatio","StyledCell","BlankCellGroup","Board","dispatch","grid","gridLabels","onClickCell","useCallback","cellIdx","useMemo","round","cellGroup","cgIdx","cgKey","onClick","renderCellGroup","gl","glIdx","v","toUpperCase","StyledContainer","StyledDebug","StyledStatusContainer","StyledStatus","StyledResetButton","StyledSolvedStatus","StyledUnSolvedStatus","Status","renderedSolution","solved","onSubmitGame","rS","join","StyledLilManContainer","StyledLilMan","imageUrl","getRandomPlacement","topRange","widthRange","leftRange","marginLeft","marginTop","width","Footer","onClickHint","hintIdx","HintText","hintText","useState","curText","setCurText","timerRef","useRef","useEffect","current","setTimeout","partial","slice","clearTimeout","StyledHintBox","StyledHintHeader","StyledControls","LovelyFeud","StyledBg","Hint","onCloseHint","StyledHeader","StyledBody","StyledTitle","Main","ScStage","App","routes","route","element","path","configureStore","reducer","boardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b44d6352.chunk.js","sourcesContent":["import { createGlobalStyle, css } from \"styled-components\"\r\n\r\ntype FontStyle = 'display' | 'speech';\r\nexport const mixinFontFamily = (style?: FontStyle) => {\r\n  switch(style){\r\n    case 'display' : return css`font-family: 'Noto Sans', sans-serif`;\r\n    case 'speech': return css`font-family: 'VT323', monospace`;\r\n    default: return css`font-family: 'VT323', monospace`;\r\n  }\r\n}\r\n\r\nexport default createGlobalStyle`\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    outline:0;\r\n    box-sizing:border-box;\r\n  }\r\n  #root{\r\n    margin:0 auto;\r\n  }\r\n  h1, h2, h3, h4{\r\n    font-family: 'Noto Sans', sans-serif;\r\n  }\r\n  a, p, button, span, h5, h6{\r\n    ${mixinFontFamily()};\r\n  }\r\n  h1{\r\n    font-size: 5rem;\r\n  }\r\n  h2{\r\n    font-size: 4rem;\r\n  }\r\n  h3{\r\n    font-size: 3.5rem;\r\n  }\r\n  h4{\r\n    font-size: 2.5rem;\r\n  }\r\n  h5{\r\n    font-size: 2rem;\r\n  }\r\n  p, span{\r\n    font-size:2rem;\r\n  }\r\n\r\n  html{\r\n    font-size: 62.5%;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    ${mixinFontFamily()};\r\n    background-color: black;\r\n  }\r\n`\r\n\r\n\r\n\r\nexport const listColors = () => {\r\n  return Object.keys(store.colors);\r\n}\r\n\r\n\r\nexport const getColor = (colorId: tColor) => {\r\n  return store.colors[colorId] as CssString; \r\n}\r\n\r\nexport const getShadow = (shadowId: tShadow) => {\r\n  return store.shadows[shadowId] as CssString;\r\n}\r\n\r\nexport const getBreakpoint = (breakpointId: tBreakpoint) => {\r\n  return store.breakpoints[breakpointId] as CssString;\r\n}\r\n\r\ntype CssString = string;\r\n\r\ntype tShadow = 'z1' | 'z2' | 'z3';\r\nconst shadows = {\r\n  z1: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.16)',\r\n  z2: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.36)',\r\n  z3: '-.2rem .5rem 1rem .2rem rgba(0,0,0,.36)'\r\n}\r\ntype tColor = 'brown_dark' | 'brown' | 'brown_light' | 'black' | 'grey' | 'grey_light' | 'white' | 'pink_dark' | 'pink' | 'pink_light' | 'red' | 'blue_dark' | 'blue' | 'blue_light' | 'green_dark' | 'green' | 'green_light' | 'yellow' | 'purple';\r\nconst colors = {\r\n  brown_dark: '#35120e',\r\n  brown: '#6b2b15',\r\n  brown_light: '#d48e55',\r\n  black: '#1a1932',\r\n  grey: '#424c6e',\r\n  grey_light: '#92a1b9',\r\n  white: '#e8c8a9',\r\n  pink_dark: '#bd1e7d',\r\n  pink: '#ff4785',\r\n  pink_light: '#ff8095',\r\n  red: '#b3102b',\r\n  green_dark: '#1e6f50',\r\n  green: '#5ac54f',\r\n  green_light: '#99e65f',\r\n  blue_dark: '#2a2f4e',\r\n  blue: '#0069aa',\r\n  blue_light: '#0098dc',\r\n  yellow: '#fff249',\r\n  purple: '#660e49',\r\n}\r\n\r\ntype tBreakpoint = 'mobile_tiny' | 'mobile_medium' | 'mobile_large' | 'tablet' | 'desktop';\r\nconst breakpoints = {\r\n  mobile_tiny: '300px',\r\n  mobile_medium: '400px',\r\n  mobile_large: '500px',\r\n  tablet: '768px',\r\n  desktop: '1024px'\r\n}\r\n\r\ntype ThemeStore = {\r\n  colors: typeof colors,\r\n  shadows: typeof shadows,\r\n  breakpoints: typeof breakpoints\r\n}\r\n\r\nexport const store: ThemeStore = {\r\n  colors: colors,\r\n  shadows: shadows,\r\n  breakpoints: breakpoints\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { AnswerData, RawCell, RenderedAnswer, RoundData } from '../../types';\r\n\r\n/**\r\n * The attributes that defined the thingies this round\r\n */\r\nexport const SAMPLE_ROUNDDATA: RoundData[] = [\r\n  {\r\n    title: '3 attributes, 3 values',\r\n    description: 'this puzzle has 4 attributes with 3 values each',\r\n    valueSize: 3,\r\n    attributes:[\r\n      {\r\n        id: 'animal',\r\n        type: 'thing',\r\n        values:[ 'monkey', 'frog', 'fish' ]\r\n      },\r\n      {\r\n        id: 'queue',\r\n        display: 'in line',\r\n        type: 'order',\r\n        values: [ 'first', 'second', 'last' ]\r\n      },\r\n      {\r\n        id: 'emotion',\r\n        type: 'modifier',\r\n        values: [ 'happy', 'angry', 'sad' ]\r\n      },\r\n      {\r\n        id: 'occupation',\r\n        type: 'thing',\r\n        values: [ 'firefighter', 'dentist', 'clown' ]\r\n      }\r\n    ]\r\n  },{\r\n    title: '3 attributes, 4 values',\r\n    description: 'this puzzle has 4 attributes with 4 values each',\r\n    valueSize: 4,\r\n    attributes:[\r\n      {\r\n        id: 'animal',\r\n        type: 'thing',\r\n        values:[ 'monkey', 'frog', 'fish', 'crab' ]\r\n      },\r\n      {\r\n        id: 'queue',\r\n        type: 'order',\r\n        values: [ 'first', 'second', 'third', 'last' ]\r\n      },\r\n      {\r\n        id: 'emotion',\r\n        type: 'modifier',\r\n        values: [ 'happy', 'angry', 'sad', 'bored' ]\r\n      },\r\n      {\r\n        id: 'occupation',\r\n        type: 'thing',\r\n        values: [ 'firefighter', 'dentist', 'clown', 'lawyer' ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nexport const HINT_GIVERS = [\r\n  {\r\n    id: 'fiveflys',\r\n    name: 'Fly Cook',\r\n    thumbImage: 'assets/hinters/fiveflys-static.gif',\r\n    largeImage: 'assets/hinters/fiveflys.gif'\r\n  },\r\n  {\r\n    id: 'eyetower',\r\n    name: 'Eye Tower',\r\n    thumbImage: 'assets/hinters/eyetower-static.gif',\r\n    largeImage: 'assets/hinters/eyetower.gif'\r\n  },\r\n  {\r\n    id: 'businessbobcat',\r\n    name: 'Business Bobcat',\r\n    thumbImage: 'assets/hinters/businesscat-static.gif',\r\n    largeImage: 'assets/hinters/businesscat.gif'\r\n  },\r\n  {\r\n    id: 'fridgey',\r\n    name: 'Fridgey',\r\n    thumbImage: 'assets/hinters/fridgey-static.gif',\r\n    largeImage: 'assets/hinters/fridgey.gif'\r\n  },\r\n  {\r\n    id: 'mothman',\r\n    name: 'Mothman',\r\n    thumbImage: 'assets/hinters/mothman-static.gif',\r\n    largeImage: 'assets/hinters/mothman.gif'\r\n  }\r\n]\r\n\r\ntype GridShapeDef = {\r\n  [key: string]: RawCell[][]\r\n}\r\n\r\n\r\n/*\r\n  Making this stupid data structure that I wanna get rid of\r\n  its the row/column of each attribute\r\n  4 ->  [\r\n          [[0, 1], [ 0, 2 ], [ 0, 3 ]],\r\n          [[3, 1], [ 3, 2 ]],\r\n          [[2, 1]]\r\n        ],\r\n*/\r\nexport const generateGridShape = (size: number) => {\r\n  let gridShape = [];\r\n  for(let gsRow = 0; gsRow < size - 1; gsRow++){\r\n    let gridRow = [];\r\n    let rowIdx = gsRow === 0 ? 0 : size - gsRow;\r\n    for(let gsCol = 0; gsCol < size - 1 - gsRow; gsCol++){\r\n      gridRow.push([ rowIdx, gsCol + 1 ])\r\n    }\r\n    gridShape.push(gridRow);\r\n  }\r\n  return gridShape as RawCell[][];\r\n}\r\n\r\nconst generatedGrids: GridShapeDef = {};\r\nexport const getGridShape = (size:number)  => {\r\n  if(!generatedGrids[size]){\r\n    generatedGrids[size] = generateGridShape(size);\r\n  }\r\n  return generatedGrids[size];\r\n}\r\n\r\n// TODO, generate this\r\nexport const sampleAnswerData: AnswerData = [\r\n  [ 0, 0, 1, 0 ],\r\n  [ 2, 1, 2, 1 ],\r\n  [ 1, 2, 0, 2 ]\r\n]\r\n\r\n// TODO, generate this\r\nexport const RenderedAnswers: RenderedAnswer[] = [\r\n  {\r\n    attributes:[\r\n      ['animal', 'monkey'],\r\n      ['queue', 'first'],\r\n      ['emotion', 'angry'],\r\n      ['occupation', 'firefighter']\r\n    ]\r\n  },\r\n  {\r\n    attributes:[\r\n      ['animal', 'frog'],\r\n      ['queue', 'last'],\r\n      ['emotion', 'happy'],\r\n      ['occupation', 'clown']\r\n    ]\r\n  },\r\n  {\r\n    attributes:[\r\n      ['animal', 'fish'],\r\n      ['queue', 'second'],\r\n      ['emotion', 'sad'],\r\n      ['occupation', 'dentist']\r\n    ]\r\n  }\r\n]","export const RandIdx = (min:number, max:number) => {\r\n  return Math.floor(min + Math.random() * (max - min));\r\n}\r\n\r\nexport const RandBetween = (min:number, max:number) => {\r\n  return min + Math.random() * (max - min);\r\n}","import { AnswerSet, AttributeDef, AttributeDetail, CalculatedHint, HintGiver, InfluenceRatio, InfluenceType } from '../types';\r\nimport { RandIdx } from './index';\r\n\r\n// what % of the time the same/different hint ratio is checked and attempted to be balanced;\r\nconst INFLUENCE_CALC = .75; // desired that 75% of the hints are for \"this IS that\" comparisons\r\n\r\nexport const generateHintText = (attrA: AttributeDetail, attrB: AttributeDetail) => {\r\n  const fromSameGroup = attrA.solutionIdx === attrB.solutionIdx;\r\n\r\n  let prefix = '';\r\n  let suffix = '';\r\n\r\n  switch(attrA.type){\r\n    case 'modifier': prefix = `The ${attrA.value} one`;\r\n      break;\r\n    case 'order': prefix = `The ${attrA.value} ${attrA.attributeDisplay}`;\r\n      break;\r\n    default: prefix = `The ${attrA.value}`;\r\n  }\r\n\r\n  switch(attrB.type){\r\n    case 'thing': suffix = `${fromSameGroup ? 'is' : 'is not'} a ${attrB.value}`;\r\n      break;\r\n    case 'modifier': suffix = `${fromSameGroup ? 'is' : 'is not'} ${attrB.value}`;\r\n      break;\r\n    case 'order': suffix = `${fromSameGroup ? 'is' : 'is not'} the ${attrB.value} ${attrB.attributeDisplay}`;\r\n      break;\r\n    default: suffix = `${fromSameGroup ? 'is' : 'is not'} a ${attrB.value}`;\r\n  }\r\n\r\n  return `${prefix} ${suffix}.`;\r\n}\r\n\r\n// when checking the 2nd attribute in a hint pair, you dont want to choose THE SAME attr/value combo\r\n// that the 1st attribute had. This is not filtered out yet, so go ahead and give it a skip\r\nexport const filterUsedHints = (attrGroup: AttributeDetail[], reservedAttr?: AttributeDetail) => {\r\n  if(!reservedAttr) return attrGroup;\r\n\r\n  return attrGroup.filter(attrDetail => {\r\n    if(reservedAttr.id === attrDetail.id) {\r\n      return false; // dont want to end up with \"the monkey is the monkey\"\r\n    } else if(reservedAttr.attributeIdx === attrDetail.attributeIdx && \r\n      reservedAttr.type === 'order' && attrDetail.type === 'order'){\r\n      return false; // dont want to end up with \"the first is before the last\"\r\n    }\r\n    return true;\r\n  });\r\n}\r\n\r\n// this needs a refactor, but it more or less can try to get more hints with an \"IS\" comparison vs \"IS NOT\"\r\nexport const influenceGroupIdx = (groupAttrs: AttributeDetail[][], reservedAttr?: AttributeDetail, influenceType?: InfluenceType) => {\r\n  if(!reservedAttr || !influenceType) return null;\r\n\r\n  const sameGroup = groupAttrs.find(attrDetails => \r\n    !!attrDetails.find(attrDetail => {\r\n      if(influenceType === 'same') return attrDetail.solutionIdx === reservedAttr.solutionIdx\r\n      return attrDetail.solutionIdx !== reservedAttr.solutionIdx // only other influenceType at this point is 'different'\r\n    })\r\n  );\r\n\r\n  if(sameGroup){\r\n    const filteredAttributes = filterUsedHints(sameGroup, reservedAttr);\r\n    if(filteredAttributes.length > 0){\r\n      return filteredAttributes;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport const chooseAttribute = (attrDetails: AttributeDetail[][], reservedAttr?: AttributeDetail, influenceType?: InfluenceType) => {\r\n  // get an influence attribute if needed\r\n  let filteredAttributes = influenceGroupIdx(attrDetails, reservedAttr, influenceType);\r\n  // otherwise, go the normal route\r\n  if(!filteredAttributes){\r\n    const group_idx = RandIdx(0, attrDetails.length);\r\n  \r\n    const group = attrDetails[group_idx];\r\n  \r\n    // just in case this is groupB, you dont want to match on the same attr/value that groupA had\r\n    filteredAttributes = filterUsedHints(group, reservedAttr);\r\n    if (!filteredAttributes || filteredAttributes.length === 0){\r\n      console.log('ran out of valid hint material for group');\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  return filteredAttributes[RandIdx(0, filteredAttributes.length)];\r\n} \r\n\r\nexport const generateSingleHint = (attrDetails: AttributeDetail[][], influenceType?: InfluenceType): CalculatedHint | null => {\r\n  const attrA = chooseAttribute(attrDetails);\r\n  if(!attrA) return null;\r\n\r\n  const attrB = chooseAttribute(attrDetails, attrA, influenceType);\r\n  if(!attrB) return null;\r\n\r\n  const hintText = generateHintText(attrA, attrB);\r\n\r\n  return {\r\n    text: hintText,\r\n    used: [ attrA, attrB ]\r\n  }\r\n}\r\n\r\nexport const convertSolutionsToAttributeDetails = (solutions: AnswerSet, attributes: AttributeDef[]) => {\r\n  return solutions.map((solution, sIdx) => \r\n    solution.map((vIdx, aIdx) => ({\r\n      type: attributes[aIdx].type,\r\n      attribute: attributes[aIdx].id,\r\n      attributeDisplay: attributes[aIdx].display || attributes[aIdx].id,\r\n      attributeIdx: aIdx,\r\n      value: attributes[aIdx].values[vIdx],\r\n      valueIdx: vIdx,\r\n      solutionIdx: sIdx,\r\n      id: `${sIdx}-${aIdx}-${vIdx}`\r\n    }))\r\n  );\r\n}\r\n\r\nexport const filterFromWorkingAttrs = (solutionDetails: AttributeDetail[][], usedAttributes: AttributeDetail[]) => {\r\n  return solutionDetails.map(solution => \r\n    solution.filter(attrDetail => {\r\n      if(usedAttributes.find(usedAttr => usedAttr.id === attrDetail.id)){\r\n        return false;\r\n      }\r\n      return true;\r\n    })\r\n  ).filter(solution => solution.length > 0);\r\n}\r\n\r\nexport const getInfluenceType = (curRatio: InfluenceRatio, influenceCalc: number): InfluenceType => {\r\n  // why compare if you know the answer\r\n  if(influenceCalc === 1) return 'same';\r\n  if(influenceCalc === 0) return 'different';\r\n\r\n  const ratioTotal = curRatio[0] + curRatio[1];\r\n  const calcRatio = ratioTotal === 0 ? .5 : curRatio[0] / (ratioTotal); // avoid divide by zero\r\n  return influenceCalc >= calcRatio ? 'same' : 'different';\r\n}\r\n\r\nexport const generateHints = (solutions: AnswerSet, attributes: AttributeDef[], hintGivers: HintGiver[], maxHints: number = 0) => {\r\n  const attrDetails = convertSolutionsToAttributeDetails(solutions, attributes);\r\n  const hints = [];\r\n\r\n  let workingAttrs = [...attrDetails];\r\n\r\n  // prevents attribute/value pairs (as in \"the monkey\") from getting used more than once across the hints\r\n  let usedAttributes: AttributeDetail[] = [];\r\n  let yesNoRatio: InfluenceRatio = [0,0];\r\n\r\n  let i = 0;\r\n  let hgIdx = Math.floor(Math.random() * hintGivers.length);\r\n\r\n  while(hints.length < maxHints && workingAttrs.length > 0){\r\n    if(i > 20){\r\n      console.error('overflow in hint generation');\r\n      break;\r\n    }\r\n    i++;\r\n    \r\n    const influenceType = getInfluenceType(yesNoRatio, INFLUENCE_CALC);\r\n    const generated = generateSingleHint(workingAttrs, influenceType);\r\n    // sometimes when an attribute group is all used up, the loop ends early.\r\n    // This is actually kinda nice for helping randomize the yes/no count and hint giver a bit\r\n    if(!generated) continue;\r\n\r\n    if(generated.used[0].solutionIdx === generated.used[1].solutionIdx){\r\n      yesNoRatio[0]++;\r\n    }else{\r\n      yesNoRatio[1]++;\r\n    }\r\n\r\n    usedAttributes = usedAttributes.concat(generated.used);\r\n    workingAttrs = filterFromWorkingAttrs(workingAttrs, usedAttributes);\r\n\r\n    hints.push({\r\n      hintGiverIdx: (hgIdx + i) % hintGivers.length,\r\n      text: generated.text\r\n    });\r\n\r\n  }\r\n\r\n  console.log('yesNoRatio is', yesNoRatio);\r\n\r\n  return hints;\r\n}","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\nimport { AnswerSet, AttributeDef, AttributeMatrix, CellMatrix, CellObj, Hint, RawCell, RenderedHint, RoundData, RoundStatus } from '../../types';\r\nimport { getGridShape, SAMPLE_ROUNDDATA, HINT_GIVERS } from '../../app/data/data';\r\nimport { generateHints } from '../../utils/puzzler';\r\n\r\nconst MAX_HINTS = 6;\r\nconst ROUND_IDX = 0;\r\n\r\n\r\nexport interface GridState {\r\n  roundData: RoundData,\r\n  cellMatrix: CellMatrix,\r\n  hints: Hint[],\r\n  activeHintIdx: number,\r\n  solution: AnswerSet | null,\r\n  roundStatus: RoundStatus\r\n}\r\n\r\nconst initialState: GridState = {\r\n  roundData: SAMPLE_ROUNDDATA[ROUND_IDX],\r\n  cellMatrix: [],\r\n  hints: [],\r\n  activeHintIdx: -1,\r\n  solution: null,\r\n  roundStatus: 'idle'\r\n};\r\n\r\n\r\nexport const gridSlice = createSlice({\r\n  name: 'board',\r\n  initialState,\r\n  reducers: {\r\n    resetMatrix: (state: GridState) => {\r\n      if(state.roundData.attributes?.length > 0){\r\n        const numAttributes = state.roundData.attributes?.length || 0;\r\n        const numValues = state.roundData.valueSize;\r\n        const boxSize = Math.pow(numValues, 2);\r\n\r\n        if(numAttributes > 1 && numAttributes < 6){\r\n          const solutionSet = calcSolution(numValues, numAttributes);\r\n\r\n          const gridShape = getGridShape(numAttributes);\r\n          const newMatrix = [];\r\n\r\n          let idx = 0;\r\n          for(let r = 0; r < gridShape.length; r++){\r\n            for(let c = 0; c < gridShape[r].length; c ++){\r\n              for(let bi = 0; bi < boxSize; bi++){\r\n                // [ 0, 1 ] is comparing attr0 and attr1\r\n                const attrPair = gridShape[r][c];\r\n                const xVal = Math.floor((idx % boxSize) / numValues);\r\n                const yVal = idx % numValues;\r\n\r\n                const ansMatrix: AttributeMatrix = [ [ attrPair[0], xVal ], [attrPair[1], yVal ] ]\r\n                const isSolution = isCellSolution(solutionSet, ansMatrix)\r\n\r\n                newMatrix.push({\r\n                  idx: idx++,\r\n                  attrs: attrPair,\r\n                  isSolution: isSolution,\r\n                  status: 0\r\n                } as CellObj)\r\n              }\r\n            }\r\n          }\r\n\r\n          state.solution = solutionSet;\r\n          state.cellMatrix = newMatrix;\r\n          state.hints = generateHints(solutionSet, state.roundData.attributes, HINT_GIVERS, MAX_HINTS);\r\n        } else{\r\n          console.error('must have between 2 and 5 attributes');\r\n          state.cellMatrix = [];\r\n        }\r\n      } else {\r\n        state.cellMatrix = [];\r\n      }\r\n    },\r\n    rotateCell: (state, action: PayloadAction<number>) => {\r\n      if(state.cellMatrix){\r\n        const nextStatus = getNextStatus(state.cellMatrix[action.payload]);\r\n        state.cellMatrix[action.payload].status = nextStatus;\r\n      }\r\n    },\r\n    setActiveHint: (state, action: PayloadAction<number>) => {\r\n      if(action.payload > -1 && !state.hints[action.payload]) console.error(`cannot set invalid hint ${action.payload}`);\r\n      state.activeHintIdx = action.payload;\r\n    },\r\n    submitAnswer: (state, action: PayloadAction<boolean>) => {\r\n      console.log('submitAnswer', action.payload);\r\n      if(action.payload === true){\r\n        state.roundStatus = 'correct';\r\n      }else{\r\n        state.roundStatus = 'incorrect';\r\n      }\r\n    }\r\n  } \r\n});\r\n\r\nexport const { resetMatrix, rotateCell, setActiveHint, submitAnswer } = gridSlice.actions;\r\n\r\n// answer set is the raw attributes (in order) and their values\r\n/// [1, 1, 1] would mean a valueIdx of 1 for attributes 0, 1, and 2\r\n\r\n// attrMatrix is a 2d array of attrIdx and numberIdx, so [[0,0],[2,0]] compares the 1st val of attr[0] with the 1st value of attr[2]\r\nexport const isCellSolution = (answerSet: AnswerSet, attrMatrix: AttributeMatrix) => {\r\n  for(let a = 0; a < answerSet.length; a++){\r\n    if(attrMatrix.filter(attrPair => answerSet[a][attrPair[0]] === attrPair[1]).length === 2) return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n// make a unique combination of each attribute/value, with no overlaps.\r\n// This is the solution to the current truth table.\r\nconst calcSolution = (numAnswers: number, numAttributes:number): AnswerSet => {\r\n  const availableAttributes = [];\r\n  for(let i = 0; i < numAttributes; i++){\r\n    availableAttributes.push(Array.from(Array(numAnswers).keys()))\r\n  }\r\n\r\n  let generatedAnswer = [];\r\n  for(let i = 0; i < numAnswers; i++){\r\n    let answerAttrs = [];\r\n    for(let i = 0; i < availableAttributes.length; i++){\r\n      const randIdx = Math.floor(Math.random() * availableAttributes[i].length);\r\n      answerAttrs.push(availableAttributes[i][randIdx]);\r\n      availableAttributes[i].splice(randIdx, 1);\r\n    }\r\n    generatedAnswer.push(answerAttrs)\r\n  }\r\n\r\n  return generatedAnswer;\r\n}\r\n\r\nconst getNextStatus = (cellObj: CellObj) => {\r\n  try{\r\n    switch(cellObj.status){\r\n      case 0: return 2;\r\n      case 2: return 1;\r\n      case 1: return 0;\r\n    }\r\n  } catch(e){\r\n    console.error('unexpected lookup for cellObj', cellObj)\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n\r\nexport const getCellMatrix = (state: RootState) => state.board.cellMatrix;\r\nexport const getRoundData = (state: RootState) => state.board.roundData;\r\nexport const getSolution = (state: RootState) => state.board.solution;\r\nexport const getHints = (state: RootState) => state.board.hints;\r\nexport const getActiveHintIdx = (state: RootState) => state.board.activeHintIdx;\r\nexport const getRoundStatus = (state: RootState) => state.board.roundStatus;\r\n\r\nexport const renderHint = (hint: Hint) => ({\r\n  hintGiver: HINT_GIVERS[hint.hintGiverIdx],\r\n  text: hint.text\r\n});\r\n\r\nexport const selectHints = createSelector(\r\n  [getHints],\r\n  (hints): RenderedHint[] => hints.map(h => renderHint(h))\r\n);\r\n\r\nexport const selectActiveHint = createSelector(\r\n  [getHints, getActiveHintIdx],\r\n  (hints, activeHintIdx): RenderedHint | null => {\r\n    if(activeHintIdx === -1){\r\n      return null;\r\n    }\r\n\r\n    return renderHint(hints[activeHintIdx]);\r\n  }\r\n);\r\n\r\nexport const selectAttributes = createSelector(\r\n  [getRoundData],\r\n  (roundData) => roundData.attributes\r\n);\r\n\r\nexport const selectGridInfo = createSelector(\r\n  [getRoundData],\r\n  (roundData) => ({\r\n    numAttributes: roundData.attributes.length,\r\n    gridSize: roundData.valueSize\r\n  })\r\n);\r\n\r\nexport const selectGridLabels = createSelector(\r\n  [selectAttributes],\r\n  (attributes): [ rows: AttributeDef[], cols: AttributeDef[] ] => {\r\n    const gridShape = getGridShape(attributes.length);\r\n    const rowAttributes = gridShape.map(r => r[0][0]);\r\n    const colAttributes = gridShape[0].map(rc => rc[1]);\r\n\r\n    return [\r\n      rowAttributes.map(idx => attributes[idx]),\r\n      colAttributes.map(idx => attributes[idx])\r\n    ]\r\n  }\r\n);\r\n\r\nexport const selectGridBox = createSelector(\r\n  [getRoundData, getCellMatrix],\r\n  (roundData, cellMatrix) => {\r\n    const gridShape = getGridShape(roundData.attributes?.length);\r\n    let idx = 0;\r\n    const gridSize = gridShape[0].length;\r\n\r\n    const boxSize = Math.pow(roundData.valueSize, 2);\r\n    return gridShape?.map((row, rIdx) => {\r\n      return [...Array(gridSize)].map((_, cIdx) => {\r\n        let boxArr: CellObj[] = [];\r\n        if(!gridShape[rIdx][cIdx]){\r\n          // handles empty cells in larger maps\r\n          return boxArr;\r\n        }\r\n\r\n        for(let i = 0; i < boxSize; i++){\r\n          boxArr.push(\r\n            cellMatrix[idx++]\r\n          )\r\n        }\r\n        return boxArr;\r\n      })\r\n    })\r\n  }\r\n);\r\n\r\nexport const selectSolution = createSelector(\r\n  [getSolution, selectAttributes],\r\n  (solution, attributes) => solution?.map(solution => \r\n    solution.map((vIdx,sIdx) => \r\n      attributes[sIdx].values[vIdx]\r\n    )\r\n  )\r\n);\r\n\r\n// if every \"solution\" cell has a 1 status, and there are not extra answers\r\nexport const checkIfSolved = createSelector(\r\n  [getCellMatrix],\r\n  (cellMatrix) => {\r\n    const numExpected = cellMatrix.filter(cell => cell.isSolution).length;\r\n    const answeredCells = cellMatrix.filter(cell => cell.status === 1);\r\n    if(answeredCells.length !== numExpected) return false;\r\n\r\n    const expectedCells = cellMatrix.filter(cell => cell.isSolution);\r\n    for(let i = 0; i < expectedCells.length; i++){\r\n      if(!answeredCells.find(aC => aC.idx === expectedCells[i].idx)){\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n);\r\n\r\n\r\n/* unused stuff below here */\r\n\r\n\r\nexport const selectCurrentAnswer = createSelector(\r\n  [getRoundData, getCellMatrix, getSolution],\r\n  (roundData, cellMatrix, solution) => ({\r\n    roundData: roundData,\r\n    cellMatrix: cellMatrix,\r\n    solution: solution\r\n  })\r\n);\r\n\r\nexport const selectGreenCells = createSelector(\r\n  [getCellMatrix],\r\n  (cellMatrix) => {\r\n    return cellMatrix.filter(c => c.status === 1);\r\n  }\r\n\r\n);\r\nexport const getAttributePairFromIndex = (attrPair: RawCell, attributes: AttributeDef[]) => {\r\n  const attr = attributes[attrPair[0]];\r\n  return {\r\n    id: attr.id,\r\n    value: attr.values[attrPair[1]]\r\n  }\r\n};\r\n\r\nexport const getRenderedAttributes = (attributeMatrix:AttributeMatrix, attributes: AttributeDef[]) => {\r\n  return [\r\n    getAttributePairFromIndex(attributeMatrix[0], attributes),\r\n    getAttributePairFromIndex(attributeMatrix[1], attributes)\r\n  ];\r\n};\r\n\r\nexport const getBoxAttributes = (boxIdx: number, numAttributes: number) => {\r\n  const gridShape = getGridShape(numAttributes);\r\n  const flatGrid = gridShape.flat();\r\n  return flatGrid[boxIdx];\r\n};\r\n\r\nexport const getAttributeMatrixForCellIndex = (cellIndex: number, numAttributes: number, numValues: number) => {\r\n  const boxSize = Math.pow(numValues, 2);\r\n  const boxIdx = Math.floor(cellIndex / boxSize);\r\n  const boxAttrs = getBoxAttributes(boxIdx, numAttributes);\r\n\r\n  const rowIdx = Math.floor((cellIndex % boxSize) / numValues);\r\n  const colIdx = cellIndex % numValues;\r\n\r\n  const attrMatrix: AttributeMatrix = [\r\n    [boxAttrs[0], rowIdx],\r\n    [boxAttrs[1], colIdx],\r\n  ]\r\n\r\n  return attrMatrix;\r\n};\r\n\r\n// find solutions, return data.\r\nexport const selectAnswerMatrix = createSelector(\r\n  [selectGridInfo, selectGreenCells],\r\n  (gridInfo, greenCells) => {\r\n    return greenCells.map(gc =>\r\n      getAttributeMatrixForCellIndex(gc.idx, gridInfo.numAttributes, gridInfo.gridSize)\r\n    );\r\n  }\r\n);\r\n\r\nexport default gridSlice.reducer;","import { useCallback, useMemo } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { CellObj, CellStatus } from '../../types';\r\nimport { rotateCell, selectGridBox, selectGridLabels, selectGridInfo } from './slice';\r\n\r\nconst StyledBoard = styled.div`\r\n  position:absolute;\r\n  /* more perspectivey */\r\n  /* transform: matrix(2.0,.9,-1.75,1.5,-300,-50) scale(.4) translate(-50%, -50%); */\r\n  transform: matrix(2.5,1.25,-2.5,1.25,-300,-0) scale(.4) translate(-50%, -50%);\r\n  left: 50%;\r\n  top:50%;\r\n\r\n  display:grid;\r\n  grid-template-columns: 15rem 13rem 13rem 13rem; \r\n  grid-template-rows: 15rem 13rem 13rem 13rem; \r\n  column-gap: 2rem;\r\n  row-gap: 2rem;\r\n  color: ${getColor('brown')};\r\n\r\n  >div{\r\n    display:grid;\r\n    column-gap: 2rem;\r\n    row-gap: 2rem;\r\n  }\r\n`\r\n\r\nconst StyledLeftLabels = styled.div`\r\n  grid-column: 15rem;\r\n  grid-row: 2 / span 3;\r\n  \r\n  grid-template-columns: 15rem; \r\n  grid-template-rows: 13rem 13rem 13rem;\r\n`\r\n\r\ntype StyledLabelProps = {\r\n  gridSize: number\r\n}\r\nconst StyledLeftLabel = styled.div<StyledLabelProps>`\r\n  text-align:right;\r\n  ${p => p.gridSize === 4 ? css`\r\n    height: 25%;\r\n  `: css`\r\n    height: 33%;\r\n  `}\r\n  ${p => p.gridSize === 4 ? css`\r\n    padding-top:0rem;\r\n  `: css`\r\n    padding-top:1rem;\r\n  `}\r\n  padding-right:1rem;\r\n  position:relative;\r\n  >span{\r\n    font-size: 3.5rem;\r\n    font-weight: 600;\r\n\r\n    position:absolute;\r\n    right:0;\r\n    white-space:nowrap;\r\n  }\r\n`\r\nconst StyledTopLabels = styled.div`\r\n  grid-column: 2 / span 3;\r\n  grid-row: 15rem;\r\n  \r\n  grid-template-columns: 13rem 13rem 13rem;\r\n  grid-template-rows: 15rem;\r\n`\r\nconst StyledTopLabel = styled.div<StyledLabelProps>`\r\n  display:inline-block;\r\n  ${p => p.gridSize === 4 ? css`\r\n    width: 25%;\r\n  `: css`\r\n    width: 33%;\r\n  `}\r\n  height: 100%;\r\n  position:relative;\r\n\r\n  span{\r\n    display:block;\r\n    position: absolute;\r\n\r\n    font-size: 3.5rem;\r\n    font-weight: 600;\r\n\r\n    ${p => p.gridSize === 4 ? css`\r\n      left: 1rem;\r\n    `: css`\r\n      left: 2rem;\r\n    `}\r\n    bottom: -1.5rem;\r\n    display: block;\r\n    white-space: nowrap;\r\n    transform-origin: left;\r\n    transform: rotate(-90deg);\r\n  }\r\n`\r\nconst StyledCells = styled.div`\r\n  grid-column: 2 / span 3;\r\n  grid-row: 2 / span 3;\r\n\r\n  grid-template-columns: 13rem 13rem 13rem;\r\n  grid-template-rows: 13rem 13rem 13rem;\r\n`\r\nconst StyledRawCellGroup = styled.div`\r\n  display:grid;\r\n  column-gap: .6rem;\r\n  row-gap: .6rem;\r\n`\r\ntype StyledCellGroupProps = {\r\n  gridSize: number,\r\n  cellRatio: string\r\n}\r\nconst StyledCellGroup = styled(StyledRawCellGroup)<StyledCellGroupProps>`\r\n  display:grid;\r\n  grid-template-columns: repeat(${p => p.gridSize}, ${p => p.cellRatio});\r\n  grid-template-rows: repeat(${p => p.gridSize}, ${p => p.cellRatio});\r\n  column-gap: .6rem;\r\n  row-gap: .6rem;\r\n`\r\ntype StyledCellProps = {\r\n  status: CellStatus,\r\n  isSolution?: boolean\r\n}\r\nconst StyledCell = styled.div<StyledCellProps>`\r\n  border-radius: 1rem;\r\n  border: .4rem solid ${getColor('brown')};\r\n  cursor: pointer;\r\n  transition: background-color .1s, border-color .2s, box-shadow .15s, transform .15s;\r\n\r\n  ${p => p.status === 0 && css`\r\n    background-color:${getColor('brown')};\r\n    border-color: ${getColor('white')};\r\n    box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('white')};\r\n  `};\r\n  ${p => p.status === 1 && css`\r\n    background-color:${getColor('green_dark')};\r\n    border-color: ${getColor('green')};\r\n    box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('green')};\r\n  `};\r\n  ${p => p.status === 2 && css`\r\n    background-color:${getColor('pink_dark')};\r\n    border-color: ${getColor('pink')};\r\n    box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('pink')};\r\n  `};\r\n\r\n  &:hover{\r\n    ${p => p.status === 0 && css`\r\n      border-color: ${getColor('pink')};\r\n    `};\r\n    ${p => p.status === 1 && css`\r\n      border-color: ${getColor('white')};\r\n    `};\r\n    ${p => p.status === 2 && css`\r\n      border-color: ${getColor('green')};\r\n    `};\r\n  }\r\n  \r\n  &:active{\r\n    transform: translate(.35rem, .35rem);\r\n\r\n    ${p => p.status === 0 && css`\r\n      background-color: ${getColor('pink_dark')};\r\n      border-color: ${getColor('pink')};\r\n      box-shadow: 0.1rem 0.1rem 0 0.1rem ${getColor('pink')};\r\n    `};\r\n    ${p => p.status === 1 && css`\r\n      background-color: ${getColor('brown')};\r\n      border-color: ${getColor('white')};\r\n      box-shadow: 0.1rem 0.1rem 0 0.1rem ${getColor('white')};\r\n    `};\r\n    ${p => p.status === 2 && css`\r\n      background-color: ${getColor('green_dark')};\r\n      border-color: ${getColor('green')};\r\n      box-shadow: 0.1rem 0.1rem 0 0.1rem ${getColor('green')};\r\n    `};\r\n  }\r\n`\r\nconst BlankCellGroup = styled(StyledRawCellGroup)`\r\n  background-color: ${getColor('white')};\r\n  opacity: .2;\r\n`\r\n\r\nexport function Board() {\r\n  const dispatch = useAppDispatch();\r\n  const grid = useAppSelector(selectGridBox);\r\n  const gridLabels = useAppSelector(selectGridLabels);\r\n  const gridInfo = useAppSelector(selectGridInfo);\r\n\r\n  const onClickCell = useCallback((cellIdx) => {\r\n    dispatch(rotateCell(cellIdx));\r\n  }, [ dispatch ]);\r\n\r\n  const cellRatio = useMemo(() => {\r\n    if(gridInfo.gridSize === 3) {\r\n      return '30%';\r\n    } else if(gridInfo.gridSize === 4) {\r\n      return '20%';\r\n    }\r\n    return `${Math.round(100 / gridInfo.gridSize)}%`;\r\n  }, [ gridInfo.gridSize ])\r\n\r\n\r\n  const renderCellGroup = (cellGroup: CellObj[], cgKey: string, gridSize: number, cellRatio: string) => {\r\n    // [0] check here cause this is all janky and the individual cells are undefined on load\r\n    if(cellGroup.length > 0 && cellGroup[0]){\r\n      return (\r\n        <StyledCellGroup key={cgKey} gridSize={gridSize} cellRatio={cellRatio}>\r\n          {cellGroup.map(cell => (\r\n            <StyledCell \r\n              key={`cell${cell?.idx}`}\r\n              status={cell.status}\r\n              isSolution={cell.isSolution}\r\n              onClick={() => onClickCell(cell.idx)}\r\n            />\r\n          ))}\r\n        </StyledCellGroup>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <BlankCellGroup key={cgKey} />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledBoard>\r\n      <StyledCells>\r\n        {grid.map(gridRow => (\r\n          gridRow.map((cellGroup, cgIdx) => renderCellGroup(cellGroup, `cg${cgIdx}`, gridInfo.gridSize, cellRatio)\r\n        )))}\r\n      </StyledCells>\r\n      <StyledTopLabels>\r\n        {gridLabels[1].map((gl, glIdx) => (\r\n          <div key={`tl${glIdx}`}>\r\n            {gl.values.map((v,vIdx) => (\r\n              <StyledTopLabel key={`tv${vIdx}`} gridSize={gridInfo.gridSize}>\r\n                <span>{v.toUpperCase()}</span>\r\n                {/* <span>{`${v} (${gl.id})`}</span> */}\r\n              </StyledTopLabel>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </StyledTopLabels>\r\n      <StyledLeftLabels>\r\n        {gridLabels[0].map((gl, glIdx) => (\r\n          <div key={`ll${glIdx}`}>\r\n            {gl.values.map((v,vIdx) => (\r\n              <StyledLeftLabel key={`lv${vIdx}`} gridSize={gridInfo.gridSize}>\r\n                <span>{v.toUpperCase()}</span>\r\n                {/* <span>{`${v} (${gl.id})`}</span> */}\r\n              </StyledLeftLabel>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </StyledLeftLabels>\r\n    </StyledBoard>\r\n  );\r\n}\r\n","import { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { checkIfSolved, getRoundStatus, resetMatrix, selectSolution, submitAnswer } from './slice';\r\n\r\nconst StyledContainer = styled.div`\r\n  margin-left:2rem;\r\n`;\r\n\r\nconst StyledDebug = styled.div`\r\n  font-size:2rem;\r\n  opacity:.25;\r\n\r\n  li{\r\n    list-style:none;\r\n  }\r\n`\r\n\r\nconst StyledStatusContainer = styled.div`\r\n  position:absolute;\r\n  right:0;\r\n  top:0;\r\n  color: ${getColor('brown_dark')};\r\n  text-align:center;\r\n`;\r\n\r\nconst StyledStatus = styled.div`\r\n  border: .3rem solid ${getColor('brown_dark')};\r\n  box-shadow: 0.0rem 0.4rem 0.1rem 0.1rem ${getColor('brown')};\r\n  border-radius: 1.5rem;\r\n  margin: .75rem;\r\n\r\n  padding: .5rem 1rem;\r\n\r\n  font-weight:500;\r\n  font-size:2rem;\r\n\r\n  cursor: pointer;\r\n  \r\n  &:active{\r\n    color: ${getColor('yellow')};\r\n    transform: translateY(.5rem);\r\n    box-shadow: 0.0rem 0.0rem 0.0rem 0.0rem ${getColor('brown')};\r\n  }\r\n`;\r\n\r\nconst StyledResetButton = styled(StyledStatus)`\r\n  background-color: ${getColor('pink')};  \r\n  color: ${getColor('brown_dark')};\r\n  border-color: ${getColor('brown_dark')};\r\n  box-shadow: 0.0rem 0.4rem 0.1rem 0.1rem ${getColor('brown')};\r\n  \r\n  &:hover{\r\n    color: ${getColor('yellow')};\r\n  }\r\n`\r\n\r\nconst StyledSolvedStatus = styled(StyledStatus)`\r\n  background-color: ${getColor('green')};  \r\n  \r\n  &:hover{\r\n    color: ${getColor('yellow')};\r\n  }\r\n`;\r\nconst StyledUnSolvedStatus = styled(StyledStatus)`\r\n  background-color: ${getColor('green')};  \r\n  color: ${getColor('brown_dark')};\r\n  border-color: ${getColor('brown_dark')};\r\n  box-shadow: 0.0rem 0.4rem 0.1rem 0.1rem ${getColor('brown')};\r\n  \r\n  &:hover{\r\n    color: ${getColor('yellow')};\r\n  }\r\n`;\r\n\r\nexport function Status() {\r\n  const renderedSolution = useAppSelector(selectSolution);\r\n  const solved = useAppSelector(checkIfSolved);\r\n  const roundStatus = useAppSelector(getRoundStatus);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const onSubmitGame = useCallback((solved) => {\r\n    dispatch(submitAnswer(solved));\r\n  }, [ dispatch ]);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledDebug>\r\n        <p>{'DEBUG SOLUTION'}</p>\r\n        <ul>\r\n          {renderedSolution?.map((rS, idx) => (\r\n            <li key={idx}>{`[ ${rS.join(' | ')} ]`}</li>\r\n          ))}\r\n        </ul>\r\n      </StyledDebug>\r\n\r\n      \r\n      <StyledStatusContainer>\r\n        <p>{roundStatus}</p>\r\n        <StyledResetButton onClick={() => dispatch(resetMatrix())}>{'RESET'}</StyledResetButton>\r\n        { solved ? (\r\n          <StyledSolvedStatus onClick={() => onSubmitGame(solved)}>{'SUBMIT'}</StyledSolvedStatus>\r\n        ): (\r\n          <StyledUnSolvedStatus onClick={() => onSubmitGame(solved)}>{'SUBMIT'}</StyledUnSolvedStatus>\r\n        ) }\r\n      </StyledStatusContainer>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { RandBetween } from '../../utils';\r\nimport { selectHints, setActiveHint } from './slice';\r\n\r\nconst StyledContainer = styled.div`\r\n  height:5rem;\r\n  padding-left:2rem;\r\n\r\n  h4{\r\n    padding-top:1rem;\r\n  }\r\n  ul{\r\n    padding-left:10rem;\r\n    height:100%;\r\n  }\r\n`;\r\n\r\nconst StyledLilManContainer = styled.div`\r\n  display:inline-block;\r\n  min-width: 20rem;\r\n  height:100%;\r\n  vertical-align:top;\r\n  position: relative;\r\n`;\r\n\r\ntype LilManProps = {\r\n  imageUrl: string\r\n};\r\n\r\nconst StyledLilMan = styled.div<LilManProps>`\r\n  position:absolute;\r\n  width:100%;\r\n  left:50%;\r\n  transform: translateX(-50%);\r\n  height:30rem;\r\n  top:-20rem;\r\n  background: url(${p => p.imageUrl}) no-repeat center;\r\n  background-position:top;\r\n  background-size:cover;\r\n  cursor: pointer;\r\n\r\n  &:hover{\r\n    top:-24rem;\r\n    width:130%;\r\n    transition: top .2s ease-out, width .4s;\r\n    filter: drop-shadow(0 0 .5rem #ffffff);\r\n  }\r\n  transition: top .2s ease-out, width .4s;\r\n`;\r\n\r\nconst getRandomPlacement = (idx: number, topRange: number[], widthRange: number[], leftRange: number[]) => {\r\n  return {\r\n    // marginLeft: idx === 0 ? `-10rem` : `${RandBetween(leftRange[0], leftRange[1])}rem`,\r\n    marginLeft: idx === 0 ? `-10rem` : `${RandBetween(leftRange[0], leftRange[1])}rem`,\r\n    marginTop: `${RandBetween(topRange[0], topRange[1])}rem`,\r\n    width: `${RandBetween(widthRange[0], widthRange[1])}px`\r\n  }\r\n}\r\n\r\nexport function Footer() {\r\n  const hints = useAppSelector(selectHints);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const onClickHint = useCallback((hintIdx) => {\r\n    dispatch(setActiveHint(hintIdx));\r\n  }, [ dispatch ]);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <ul>\r\n        {hints?.map((hint, idx) => (\r\n          <StyledLilManContainer key={idx} style={getRandomPlacement(idx, [-1, 3], [120, 170], [-7, -2])} >\r\n            <StyledLilMan \r\n              imageUrl={hint.hintGiver.thumbImage}\r\n              title={hint.text}\r\n              onClick={() => onClickHint(idx)}\r\n            /> \r\n          </StyledLilManContainer>\r\n        ))}\r\n      </ul>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { useEffect, useRef, useState } from 'react';\r\n\r\ntype HintTextProps = {\r\n  hintText: string\r\n}\r\nexport function HintText({ hintText }: HintTextProps) {\r\n  const [ curText, setCurText ] = useState('');\r\n  const timerRef: any = useRef();\r\n\r\n  const getNextText = (partial: string, full: string) => {\r\n    return full.slice(0, partial.length + 1);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(curText.length < hintText.length){\r\n      timerRef.current = setTimeout(() => {\r\n        setCurText(getNextText(curText, hintText));\r\n      }, 50);\r\n    }\r\n  }, [ curText, hintText, timerRef ])\r\n\r\n  useEffect(() => {\r\n    setCurText('');\r\n\r\n    return () => {\r\n      clearTimeout(timerRef.current);\r\n    }\r\n  }, []);\r\n  \r\n  return (\r\n    <p>{curText}</p>\r\n  );\r\n}\r\n","import { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor, mixinFontFamily } from '../../themes';\r\nimport { HintText } from './hinttext';\r\nimport { selectActiveHint, setActiveHint } from './slice';\r\n\r\nconst StyledContainer = styled.div`\r\n  position:fixed;\r\n  z-index:1;\r\n  left:10%;\r\n  right:10%;\r\n  height:50%;\r\n  min-height:40rem;\r\n  top:20%;\r\n  padding: 2rem;\r\n\r\n  display:grid;\r\n  grid-template-columns: 25% 75%;\r\n  grid-template-rows: 3rem 2rem auto 10rem;\r\n`;\r\n\r\nconst StyledLilManContainer = styled.div`\r\n  grid-column: 1 / span 1;\r\n  grid-row: 2 / span 2;\r\n  position:relative;\r\n`;\r\n\r\nconst StyledHintBox = styled.div`\r\n  grid-column: 2 / span 1;\r\n  grid-row: 3 / span 1;\r\n  padding: 2rem;\r\n\r\n  p{\r\n    ${mixinFontFamily('speech')};\r\n    font-size:5rem;\r\n  }\r\n`;\r\n\r\nconst StyledHintHeader = styled.div`\r\n  grid-column: 1 / span 2;\r\n  grid-row: 1 / span 2;\r\n\r\n  text-align:left;\r\n  font-size: 3rem;\r\n  margin-top: -2rem;\r\n  \r\n  >*{\r\n    font-size: 8rem;\r\n    color: ${getColor('black')};\r\n    opacity: .5;\r\n  }\r\n`;\r\n\r\n\r\nconst StyledControls = styled.div`\r\n  grid-column: 1 / span 3;\r\n  grid-row: 4 / span 1;\r\n  padding: 0rem;\r\n\r\n  button{\r\n    border-radius: 1rem;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: ${getColor('brown_light')};\r\n    color: ${getColor('brown_dark')};\r\n    border: .5rem solid ${getColor('brown_dark')};\r\n    \r\n    font-size: 5rem;\r\n\r\n    cursor: pointer;\r\n\r\n    &:hover{\r\n      color: ${getColor('brown')};\r\n      border-color: ${getColor('brown')};\r\n    }\r\n  }\r\n`;\r\n\r\nconst LovelyFeud = styled.div`\r\n  position:fixed;\r\n  left:0;\r\n  right:0;\r\n  top:0;\r\n  bottom:0;\r\n  z-index:-2;\r\n\r\n  background-image: linear-gradient(to bottom, rgba(255,0,0,0), rgba(0,0,0,1));\r\n`;\r\n\r\nconst StyledBg = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  right:0;\r\n  top:0;\r\n  bottom:0;\r\n  z-index: -1;\r\n\r\n  border-radius: 1rem;\r\n  background-color: ${getColor('white')};\r\n  border: .5rem solid ${getColor('brown_dark')};\r\n`;\r\n\r\ntype LilManProps = {\r\n  imageUrl: string\r\n};\r\n\r\n\r\nconst StyledLilMan = styled.div<LilManProps>`\r\n  position:absolute;\r\n  width:100%;\r\n  height:100%;\r\n  top:0rem;\r\n  background: url(${p => p.imageUrl}) no-repeat center;\r\n  background-position:center;\r\n  background-size:contain;\r\n  filter: drop-shadow(0 0 7rem ${getColor('brown')});\r\n`;\r\n\r\nexport function Hint() {\r\n  const hint = useAppSelector(selectActiveHint);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const onCloseHint = useCallback(() => {\r\n    dispatch(setActiveHint(-1));\r\n  }, [ dispatch ]);\r\n\r\n  if(!hint) return null;\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledHintHeader>\r\n        <p>{hint.hintGiver.name}</p>\r\n      </StyledHintHeader>\r\n      <StyledLilManContainer>\r\n        <StyledLilMan \r\n          imageUrl={hint.hintGiver.largeImage}\r\n          title={hint.hintGiver.name}\r\n        /> \r\n      </StyledLilManContainer>\r\n      <StyledHintBox>\r\n        <HintText hintText={hint.text} />\r\n      </StyledHintBox>\r\n      <StyledControls>\r\n        <button onClick={() => onCloseHint()}>{'CLOSE'}</button>\r\n      </StyledControls>\r\n      <StyledBg />\r\n      <LovelyFeud />\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { getColor } from '../../themes';\r\nimport { useAppDispatch } from '../../app/hooks';\r\nimport { resetMatrix } from './slice';\r\nimport { useEffect } from 'react';\r\nimport { Board } from './board';\r\nimport { Status } from './status';\r\nimport { Footer } from './footer';\r\nimport { Hint } from './hint';\r\n\r\nconst StyledContainer = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  bottom:0;\r\n  right:0;\r\n  background-image: linear-gradient(to bottom, ${getColor('white')}, ${getColor('brown')});\r\n  color: ${getColor('black')};\r\n  overflow: hidden;\r\n\r\n  display:flex;\r\n  flex-direction:column;\r\n`;\r\n\r\nconst StyledHeader = styled.div`\r\n  flex: 0 0 10rem;\r\n`;\r\n\r\nconst StyledBody = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nconst StyledTitle = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  right:0;\r\n  text-align:center;\r\n  color: ${getColor('pink')};\r\n  font-size: 15rem;\r\n  letter-spacing: -.5rem;\r\n  line-height: 10rem;\r\n  opacity: .1;\r\n\r\n  /* white-space: pre-wrap; */\r\n  word-wrap: break-word;\r\n`\r\n\r\nconst TITLE_TEXT = 'TOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLES' +\r\n  'TOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLES' +\r\n  'TOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLES' +\r\n  'TOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLES' +\r\n  'TOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLESTOOTHTABLES'\r\n\r\nexport function Main() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(resetMatrix());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <Hint />\r\n      <StyledTitle>{TITLE_TEXT}</StyledTitle>\r\n      <StyledHeader>\r\n        <Status />\r\n      </StyledHeader>\r\n      <StyledBody>\r\n        <Board />\r\n      </StyledBody>\r\n      <Footer />\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { HashRouter, Route, Routes } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Main } from './scenes/main';\r\n\r\nexport const ScStage = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  right:0;\r\n  bottom:0;\r\n`\r\n\r\nfunction App() {\r\n  const routes = [\r\n    {\r\n      route: '/',\r\n      text: 'Main',\r\n      element: <Main/>\r\n    }\r\n  ]\r\n  \r\n  return (\r\n    <HashRouter>\r\n      <ScStage>\r\n        <Routes>\r\n          {routes.map((p, i) => (\r\n            <Route key={i} path={p.route} element={p.element} />\r\n          ))}\r\n        </Routes>\r\n      </ScStage>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport boardReducer from '../scenes/main/slice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    board: boardReducer\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './themes/fonts.css';\r\nimport GlobalStyle from './themes/';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n      <GlobalStyle />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}