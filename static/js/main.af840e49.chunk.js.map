{"version":3,"sources":["themes/index.ts","app/hooks.ts","app/data/data.tsx","scenes/main/slice.tsx","scenes/main/board.tsx","scenes/main/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["createGlobalStyle","getColor","colorId","store","colors","black","grey","grey_light","white","blue","green","yellow","red","purple","shadows","z1","z2","z3","breakpoints","mobile_tiny","mobile_medium","mobile_large","tablet","desktop","useAppDispatch","useDispatch","useAppSelector","useSelector","GRIDSHAPES","initialState","roundData","title","description","valueSize","attributes","id","type","values","cellMatrix","gridSlice","createSlice","name","reducers","resetMatrix","state","length","numAttributes","boxSize","Math","pow","gridShape","toString","newMatrix","idx","r","c","bi","push","status","console","error","rotateCell","action","nextStatus","getNextStatus","payload","cellObj","e","actions","getCellMatrix","board","getRoundData","getGridShape","selectGridBox","createSelector","gridSize","map","row","rIdx","Array","_","cIdx","boxArr","i","selectGridLabels","rowAttributes","colAttributes","rc","StyledBoard","styled","div","StyledLeftLabels","StyledLeftLabel","StyledTopLabels","StyledTopLabel","StyledCells","StyledCellGroup","StyledCell","p","css","BlankCellGroup","Board","testo","dispatch","grid","gridLabels","onClickCell","useCallback","cellIdx","log","gridRow","cellGroup","cgIdx","cgKey","cell","onClick","renderCellGroup","gl","glIdx","v","vIdx","StyledContainer","StyledModal","Main","useEffect","ScHeader","ScStage","App","useState","collapsed","setCollapsed","pages","route","text","element","className","to","path","configureStore","reducer","boardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.af840e49.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport default createGlobalStyle`\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    outline:0;\r\n    box-sizing:border-box;\r\n  }\r\n  #root{\r\n    margin:0 auto;\r\n  }\r\n  h1, h2, h3, h4{\r\n    font-family: 'Bevan', cursive;\r\n  }\r\n  a, p, span, h5, h6{\r\n    font-family: 'Cabin', sans-serif;\r\n  }\r\n  h1{\r\n    font-size: 5rem;\r\n  }\r\n  h2{\r\n    font-size: 4rem;\r\n  }\r\n  h3{\r\n    font-size: 3.5rem;\r\n  }\r\n  h4{\r\n    font-size: 2.5rem;\r\n  }\r\n  h5{\r\n    font-size: 2rem;\r\n  }\r\n  p, span{\r\n    font-size:2rem;\r\n  }\r\n\r\n  html{\r\n    font-size: 62.5%;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    font-family: 'Cabin', sans-serif;\r\n    background-color: black;\r\n  }\r\n  \r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\r\n  }\r\n`\r\n\r\n/*\r\nexport const mixinFontFamily = (style) => {\r\n  switch(style){\r\n    case 'details' : return css`font-family: 'Roboto', sans-serif`;\r\n    case 'display': return css`font-family: 'Bevan', cursive`;\r\n    default: return css`font-family: 'Roboto', sans-serif`;\r\n  }\r\n}\r\n*/\r\nexport const listColors = () => {\r\n  return Object.keys(store.colors);\r\n}\r\n\r\n\r\nexport const getColor = (colorId: tColor) => {\r\n  return store.colors[colorId] as CssString; \r\n}\r\n\r\nexport const getShadow = (shadowId: tShadow) => {\r\n  return store.shadows[shadowId] as CssString;\r\n}\r\n\r\nexport const getBreakpoint = (breakpointId: tBreakpoint) => {\r\n  return store.breakpoints[breakpointId] as CssString;\r\n}\r\n\r\ntype CssString = string;\r\n\r\ntype tShadow = 'z1' | 'z2' | 'z3';\r\nconst shadows = {\r\n  z1: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.16)',\r\n  z2: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.36)',\r\n  z3: '-.2rem .5rem 1rem .2rem rgba(0,0,0,.36)'\r\n}\r\ntype tColor = 'black' | 'grey' | 'grey_light' | 'white' | 'blue' | 'green' | 'yellow' | 'red' | 'purple';\r\nconst colors = {\r\n  black: '#000000',\r\n  grey: '#373737',\r\n  grey_light: '#A39F8E',\r\n  white: '#fef8dd',\r\n  blue: '#1fb9f3',\r\n  green: '#51f249',\r\n  yellow: '#fff249',\r\n  red: '#F55658',\r\n  purple: '#6b1ff3'\r\n}\r\n\r\ntype tBreakpoint = 'mobile_tiny' | 'mobile_medium' | 'mobile_large' | 'tablet' | 'desktop';\r\nconst breakpoints = {\r\n  mobile_tiny: '300px',\r\n  mobile_medium: '400px',\r\n  mobile_large: '500px',\r\n  tablet: '768px',\r\n  desktop: '1024px'\r\n}\r\n\r\ntype ThemeStore = {\r\n  colors: typeof colors,\r\n  shadows: typeof shadows,\r\n  breakpoints: typeof breakpoints\r\n}\r\n\r\nexport const store: ThemeStore = {\r\n  colors: colors,\r\n  shadows: shadows,\r\n  breakpoints: breakpoints\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { AnswerData, RawCell, RenderedAnswer, RenderedBoard, RoundData } from '../../types';\r\n\r\n/**\r\n * The attributes that defined the thingies this round\r\n */\r\nexport const SAMPLE_ROUNDDATA: RoundData[] = [\r\n  {\r\n    title: 'round1',\r\n    description: 'something about this round',\r\n    valueSize: 3,\r\n    attributes:[\r\n      {\r\n        id: 'animal',\r\n        type: 'normal',\r\n        values:[ 'monkey', 'frog', 'fish' ]\r\n      },\r\n      {\r\n        id: 'queue',\r\n        type: 'order',\r\n        values: [ 'first', 'second', 'last' ]\r\n      },\r\n      {\r\n        id: 'emotion',\r\n        type: 'normal',\r\n        values: [ 'happy', 'angry', 'sad' ]\r\n      },\r\n      {\r\n        id: 'occupation',\r\n        type: 'normal',\r\n        values: [ 'firefighter', 'dentist', 'clown' ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\n// TODO, generate this\r\nexport const renderedBoard: RenderedBoard = {\r\n  rows: [\r\n    [ 'animal', 'monkey' ],\r\n    [ 'animal', 'frog' ],\r\n    [ 'animal', 'fish' ],\r\n    [ 'emotion', 'happy' ],\r\n    [ 'emotion', 'angry' ],\r\n    [ 'emotion', 'sad' ]\r\n  ],\r\n  cols: [\r\n    [ 'queue', 'first' ],\r\n    [ 'queue', 'second' ],\r\n    [ 'queue', 'last' ],\r\n    [ 'occupation', 'firefighter' ],\r\n    [ 'occupation', 'dentist' ],\r\n    [ 'occupation', 'clown' ]\r\n  ]\r\n}\r\n\r\ntype GridShapeDef = {\r\n  [key: string]: RawCell[][]\r\n}\r\n// I'm sure this can be done with math but I can't figure it out right now.\r\nexport const GRIDSHAPES: GridShapeDef = {\r\n  '2': [\r\n    [[0, 1]],\r\n  ],\r\n  '3': [\r\n    [[0, 1], [ 0, 2 ]],\r\n    [[2, 1]],\r\n  ],\r\n  '4': [\r\n    [[0, 1], [ 0, 2 ], [ 0, 3 ]],\r\n    [[3, 1], [ 3, 2 ]],\r\n    [[2, 1]]\r\n  ],\r\n  '5': [\r\n    [[0, 1], [ 0, 2 ], [ 0, 3 ], [ 0, 4 ]],\r\n    [[4, 1], [ 4, 2 ], [ 4, 3 ]],\r\n    [[3, 1], [ 3, 2 ]],\r\n    [[2, 1]]\r\n  ]\r\n}\r\n\r\n// TODO, generate this\r\n// export const SAMPLE_CELLMATRIX: CellMatrix = [\r\n//   [0,0,0],[0,1,0],[0,2,0],[0,3,0],[0,4,0],[0,5,0],\r\n//   [1,0,0],[1,1,0],[1,2,0],[1,3,0],[1,4,0],[1,5,0],\r\n//   [2,0,0],[2,1,0],[2,2,0],[2,3,0],[2,4,0],[2,5,0],\r\n//   [3,0,0],[3,1,0],[3,2,0],[3,3,0],[3,4,0],[3,5,0],\r\n//   [4,0,0],[4,1,0],[4,2,0],[4,3,0],[4,4,0],[4,5,0],\r\n//   [5,0,0],[5,1,0],[5,2,0],[5,3,0],[5,4,0],[5,5,0]\r\n// ];\r\n\r\n// TODO, generate this\r\nexport const sampleAnswerData: AnswerData = [\r\n  [ 0, 0, 1, 0 ],\r\n  [ 2, 1, 2, 1 ],\r\n  [ 1, 2, 0, 2 ]\r\n]\r\n\r\n// TODO, generate this\r\nexport const RenderedAnswers: RenderedAnswer[] = [\r\n  {\r\n    attributes:[\r\n      ['animal', 'monkey'],\r\n      ['queue', 'first'],\r\n      ['emotion', 'angry'],\r\n      ['occupation', 'firefighter']\r\n    ]\r\n  },\r\n  {\r\n    attributes:[\r\n      ['animal', 'frog'],\r\n      ['queue', 'last'],\r\n      ['emotion', 'happy'],\r\n      ['occupation', 'clown']\r\n    ]\r\n  },\r\n  {\r\n    attributes:[\r\n      ['animal', 'fish'],\r\n      ['queue', 'second'],\r\n      ['emotion', 'sad'],\r\n      ['occupation', 'dentist']\r\n    ]\r\n  }\r\n]","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\nimport { AttributeDef, CellMatrix, CellObj, RoundData } from '../../types';\r\nimport { GRIDSHAPES, SAMPLE_ROUNDDATA } from '../../app/data/data';\r\n\r\n\r\nexport interface GridState {\r\n  roundData: RoundData,\r\n  cellMatrix: CellMatrix\r\n}\r\n\r\nconst initialState: GridState = {\r\n  roundData: SAMPLE_ROUNDDATA[0],\r\n  cellMatrix: []\r\n};\r\n\r\nexport const gridSlice = createSlice({\r\n  name: 'board',\r\n  initialState,\r\n  reducers: {\r\n    resetMatrix: (state: GridState) => {\r\n      if(state.roundData.attributes?.length > 0){\r\n        const numAttributes = state.roundData.attributes?.length || 0;\r\n        const boxSize = Math.pow(state.roundData.valueSize, 2);\r\n        if(numAttributes > 1 && numAttributes < 6){\r\n          const gridShape = GRIDSHAPES[numAttributes.toString()];\r\n          const newMatrix = [];\r\n\r\n          let idx = 0;\r\n          for(let r = 0; r < gridShape.length; r++){\r\n            for(let c = 0; c < gridShape[r].length; c ++){\r\n              for(let bi = 0; bi < boxSize; bi++){\r\n                newMatrix.push({\r\n                  idx: idx++,\r\n                  status: 0\r\n                } as CellObj)\r\n              }\r\n\r\n            }\r\n          }\r\n          state.cellMatrix = newMatrix;\r\n        } else{\r\n          console.error('must have between 2 and 5 attributes');\r\n          state.cellMatrix = [];\r\n        }\r\n      } else {\r\n        state.cellMatrix = [];\r\n      }\r\n    },\r\n    rotateCell: (state, action: PayloadAction<number>) => {\r\n      if(state.cellMatrix){\r\n        const nextStatus = getNextStatus(state.cellMatrix[action.payload]);\r\n        state.cellMatrix[action.payload].status = nextStatus;\r\n      }\r\n    },\r\n  }\r\n});\r\n\r\nconst getNextStatus = (cellObj: CellObj) => {\r\n  try{\r\n    switch(cellObj.status){\r\n      case 0: return 1;\r\n      case 1: return 2;\r\n      case 2: return 0;\r\n    }\r\n  } catch(e){\r\n    console.error('unexpected lookup for cellObj', cellObj)\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nexport const { resetMatrix, rotateCell } = gridSlice.actions;\r\n\r\nexport const getCellMatrix = (state: RootState) => state.board.cellMatrix;\r\nexport const getRoundData = (state: RootState) => state.board.roundData;\r\n\r\n// export const getGridBox = (state: RootState) => \r\n\r\nconst getGridShape = (numAttributes = 0) => {\r\n  if(numAttributes < 2 || numAttributes > 5){\r\n    console.error('getGridShape(): must have between 2 and 5 attributes');\r\n  } else {\r\n    return GRIDSHAPES[numAttributes.toString()];\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\nexport const selectGridBox = createSelector(\r\n  [getRoundData, getCellMatrix],\r\n  (roundData, cellMatrix) => {\r\n    const gridShape = getGridShape(roundData.attributes?.length);\r\n    let idx = 0;\r\n    const gridSize = gridShape[0].length;\r\n\r\n    const boxSize = Math.pow(roundData.valueSize, 2);\r\n    return gridShape?.map((row, rIdx) => {\r\n      return [...Array(gridSize)].map((_, cIdx) => {\r\n        let boxArr: CellObj[] = [];\r\n        if(!gridShape[rIdx][cIdx]){\r\n          // handles empty cells in larger maps\r\n          return boxArr;\r\n        }\r\n\r\n        for(let i = 0; i < boxSize; i++){\r\n          boxArr.push(\r\n            cellMatrix[idx++]\r\n          )\r\n        }\r\n        return boxArr;\r\n      })\r\n    })\r\n  }\r\n)\r\n\r\nexport const selectGridLabels = createSelector(\r\n  [getRoundData],\r\n  (roundData): [ rows: AttributeDef[], cols: AttributeDef[] ] => {\r\n    const gridShape = getGridShape(roundData.attributes?.length);\r\n    const rowAttributes = gridShape.map(r => r[0][0]);\r\n    const colAttributes = gridShape[0].map(rc => rc[1]);\r\n\r\n    return [\r\n      rowAttributes.map(idx => roundData.attributes[idx]),\r\n      colAttributes.map(idx => roundData.attributes[idx])\r\n    ]\r\n  }\r\n);\r\n\r\nexport const selectCellMatrix = createSelector(\r\n  [getCellMatrix, getRoundData],\r\n  (cellMatrix, roundData): CellMatrix => {\r\n    return cellMatrix\r\n  }\r\n);\r\n\r\nexport default gridSlice.reducer;","import { useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { CellObj, CellStatus } from '../../types';\r\nimport { rotateCell, selectGridBox, selectGridLabels } from './slice';\r\n\r\nconst StyledBoard = styled.div`\r\n  position:absolute;\r\n  transform: matrix(2.0,.9,-1.75,1.5,230,60) scale(.4);\r\n\r\n  display:grid;\r\n  grid-template-columns: 15rem 13rem 13rem 13rem; \r\n  grid-template-rows: 15rem 13rem 13rem 13rem; \r\n  column-gap: 2rem;\r\n  row-gap: 2rem;\r\n\r\n  >div{\r\n    display:grid;\r\n    column-gap: 2rem;\r\n    row-gap: 2rem;\r\n  }\r\n`\r\n\r\nconst StyledLeftLabels = styled.div`\r\n  grid-column: 15rem;\r\n  grid-row: 2 / span 3;\r\n  \r\n  grid-template-columns: 15rem; \r\n  grid-template-rows: 13rem 13rem 13rem;\r\n`\r\n\r\nconst StyledLeftLabel = styled.div`\r\n  text-align:right;\r\n  height:33%;\r\n  padding-top:1rem;\r\n  padding-right:1rem;\r\n  position:relative;\r\n  >span{\r\n    position:absolute;\r\n    right:0;\r\n    white-space:nowrap;\r\n  }\r\n`\r\n\r\nconst StyledTopLabels = styled.div`\r\n  grid-column: 2 / span 3;\r\n  grid-row: 15rem;\r\n  \r\n  grid-template-columns: 13rem 13rem 13rem;\r\n  grid-template-rows: 15rem;\r\n`\r\nconst StyledTopLabel = styled.div`\r\n  display:inline-block;\r\n  width: 33%;\r\n  height: 100%;\r\n  position:relative;\r\n\r\n  span{\r\n    display:block;\r\n    position: absolute;\r\n    left: 2rem;\r\n    bottom: -1.5rem;\r\n    display: block;\r\n    white-space: nowrap;\r\n    transform-origin: left;\r\n    transform: rotate(-90deg);\r\n  }\r\n`\r\nconst StyledCells = styled.div`\r\n  grid-column: 2 / span 3;\r\n  grid-row: 2 / span 3;\r\n\r\n  grid-template-columns: 13rem 13rem 13rem;\r\n  grid-template-rows: 13rem 13rem 13rem;\r\n`\r\nconst StyledCellGroup = styled.div`\r\n  display:grid;\r\n  grid-template-columns: 30% 30% 30%;\r\n  grid-template-rows: 30% 30% 30%;\r\n  column-gap: .6rem;\r\n  row-gap: .6rem;\r\n`\r\ntype CellProps = {\r\n  status: CellStatus\r\n}\r\nconst StyledCell = styled.div<CellProps>`\r\n  border: 3px solid ${getColor('white')};\r\n  cursor: pointer;\r\n  transition: background-color .1s, box-shadow .2s;\r\n  &:hover{\r\n    box-shadow: 0 0 .2rem .2rem white;\r\n  }\r\n  ${p => p.status === 1 && css`background-color:${getColor('green')}`}\r\n  ${p => p.status === 2 && css`background-color:${getColor('red')}`}\r\n`\r\nconst BlankCellGroup = styled(StyledCellGroup)`\r\n  background-color: ${getColor('white')};\r\n  opacity: .2;\r\n`\r\n\r\ntype BoardProps = {\r\n  testo: string\r\n}\r\nexport function Board({ testo }:BoardProps) {\r\n  const dispatch = useAppDispatch();\r\n  const grid = useAppSelector(selectGridBox);\r\n  const gridLabels = useAppSelector(selectGridLabels);\r\n\r\n  const onClickCell = useCallback((cellIdx) => {\r\n    dispatch(rotateCell(cellIdx));\r\n  }, [ dispatch ]);\r\n\r\n  const renderCellGroup = (cellGroup: CellObj[], cgKey: string) => {\r\n    // [0] check here cause this is all janky and the individual cells are undefined on load\r\n    if(cellGroup.length > 0 && cellGroup[0]){\r\n      return (\r\n        <StyledCellGroup key={cgKey}>\r\n          {cellGroup.map(cell => (\r\n            <StyledCell \r\n              key={`cell${cell?.idx}`}\r\n              status={cell.status}\r\n              onClick={() => onClickCell(cell.idx)}\r\n            />\r\n          ))}\r\n        </StyledCellGroup>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <BlankCellGroup key={cgKey}/>\r\n    )\r\n  }\r\n\r\n  console.log('re-rendering the whole board...');\r\n\r\n  return (\r\n    <StyledBoard>\r\n      <StyledCells>\r\n        {grid.map(gridRow => (\r\n          gridRow.map((cellGroup, cgIdx) => renderCellGroup(cellGroup, `cg${cgIdx}`)\r\n        )))}\r\n      </StyledCells>\r\n      <StyledTopLabels>\r\n        {gridLabels[1].map((gl, glIdx) => (\r\n          <div key={`tl${glIdx}`}>\r\n            {gl.values.map((v,vIdx) => (\r\n              <StyledTopLabel key={`tv${vIdx}`}>\r\n                <span>{`${gl.id} - ${v}`}</span>\r\n              </StyledTopLabel>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </StyledTopLabels>\r\n      <StyledLeftLabels>\r\n        {gridLabels[0].map((gl, glIdx) => (\r\n          <div key={`ll${glIdx}`}>\r\n            {gl.values.map((v,vIdx) => (\r\n              <StyledLeftLabel key={`lv${vIdx}`}>\r\n                <span>{`${gl.id} - ${v}`}</span>\r\n              </StyledLeftLabel>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </StyledLeftLabels>\r\n    </StyledBoard>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { getColor } from '../../themes';\r\nimport { useAppDispatch } from '../../app/hooks';\r\nimport { resetMatrix } from './slice';\r\nimport { useEffect } from 'react';\r\nimport { Board } from './board';\r\n\r\nconst StyledContainer = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  bottom:0;\r\n  right:0;\r\n  background-color: ${getColor('black')};\r\n  color: ${getColor('white')};\r\n  z-index:-1;\r\n  padding-top:10rem;\r\n  z-index:1;\r\n`\r\nconst StyledModal = styled.div`\r\n  width:80%;\r\n  height:80%;\r\n  position:absolute;\r\n  left:10%;\r\n  top:10%;\r\n  background-color: ${getColor('purple')};\r\n\r\n  border-radius: 1rem;\r\n`\r\n\r\nexport function Main() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(resetMatrix());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledModal >\r\n        <Board testo={'hello!!!!'}/>\r\n      </StyledModal>\r\n    </StyledContainer>\r\n  );\r\n/*\r\n  return (\r\n    <StyledContainer>\r\n      <StyledModal >        \r\n        <StyledGrid>\r\n          <StyledRowLabels>\r\n            {gridLabels[0].map((row, idx) => (\r\n              <StyledRowLabel key={`lr${idx}`}>\r\n                {row.values.map((rv, rvIdx) => (\r\n                  <span key={`lrv${rvIdx}`}>{rv}</span>\r\n                ))}\r\n              </StyledRowLabel>\r\n            ))}\r\n          </StyledRowLabels>\r\n          <StyledColLabels>\r\n            {gridLabels[1].map((col, idx) => (\r\n              <StyledColLabel key={`lc${idx}`}>\r\n                {col.values.map((cv, cvIdx) => (\r\n                  <span key={`lcv${cvIdx}`}>{cv}</span>\r\n                ))}\r\n              </StyledColLabel>\r\n            ))}\r\n          </StyledColLabels>\r\n          <StyledGridInner>\r\n            {grid?.map((row, rIdx) => (\r\n              <StyledGridRow key={`r${rIdx}`}>\r\n                {row.map((box, cIdx) => (\r\n                  <StyledGridBox key={`rc${rIdx}${cIdx}`}>\r\n                    {box.map((cell, cellIdx) => (\r\n                      <StyledGridCell \r\n                        key={cellIdx}\r\n                        status={cell?.status}\r\n                        onClick={() => onClickCell(cell.idx)} />\r\n                    ))}\r\n                  </StyledGridBox>\r\n                ))}\r\n              </StyledGridRow>\r\n            ))}\r\n          </StyledGridInner>\r\n        </StyledGrid>\r\n      </StyledModal>\r\n    </StyledContainer>\r\n  );\r\n  */\r\n}\r\n","import React, { useState } from 'react';\r\nimport { getColor } from './themes/';\r\nimport { HashRouter, Route, Routes, Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Main } from './scenes/main';\r\n\r\nexport const GroupContainer = styled.div`\r\n  background-color: ${getColor('blue')};\r\n  border: 1rem solid ${getColor('white')};\r\n  border-radius: 5rem;\r\n  margin: 3rem;\r\n  padding: 2rem 3.3rem;\r\n`;\r\n\r\nexport const ScHeader = styled.div`\r\n  position:fixed;\r\n  top:0;\r\n  left:0;\r\n  transition: top .5s ease-in-out;\r\n\r\n  width: 100%;\r\n  height:10rem;\r\n  border-bottom:1rem solid blue;\r\n  color:white;\r\n  z-index:1;\r\n  background-color:black;\r\n\r\n  &.collapsed{\r\n    top:-8rem;\r\n    transition: top .5s ease-in-out;\r\n  }\r\n\r\n  >.link-button{\r\n    color:white;\r\n    display:inline-block;\r\n    vertical-align:middle;\r\n    margin:1.4rem 1.8rem;\r\n    transition: color .5s ease-in;\r\n    &:hover{\r\n      color: ${getColor('yellow')};\r\n      transition: color .2s ease-out;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ScStage = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  right:0;\r\n  bottom:0;\r\n  padding-top:5rem;\r\n`\r\n\r\nfunction App() {\r\n  const [ collapsed, setCollapsed ] = useState(false);\r\n  const pages = [\r\n    {\r\n      route: '/',\r\n      text: 'Round1',\r\n      element: <Main/>\r\n    }\r\n  ]\r\n  \r\n  return (\r\n    <HashRouter>\r\n      <ScHeader className={ collapsed ? 'collapsed' : ''} onClick={() => setCollapsed(!collapsed)}>\r\n        {pages.map((p, i) => (\r\n          <Link key={i} to={p.route} className=\"link-button\">\r\n            <h2>{p.text}</h2>\r\n          </Link>\r\n        ))}\r\n      </ScHeader>\r\n      <ScStage>\r\n        <Routes>\r\n          {pages.map((p, i) => (\r\n            <Route key={i} path={p.route} element={p.element} />\r\n          ))}\r\n        </Routes>\r\n      </ScStage>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport boardReducer from '../scenes/main/slice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    board: boardReducer\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './themes/fonts.css';\r\nimport GlobalStyle from './themes/';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n      <GlobalStyle />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}