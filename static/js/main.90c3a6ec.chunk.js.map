{"version":3,"sources":["themes/index.ts","app/hooks.ts","app/data/data.tsx","scenes/main/slice.tsx","scenes/main/board.tsx","scenes/main/status.tsx","scenes/main/footer.tsx","scenes/main/hint.tsx","scenes/main/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["mixinFontFamily","style","css","createGlobalStyle","getColor","colorId","store","colors","black","grey","grey_light","white","blue","green","yellow","red","purple","shadows","z1","z2","z3","breakpoints","mobile_tiny","mobile_medium","mobile_large","tablet","desktop","useAppDispatch","useDispatch","useAppSelector","useSelector","HINT_GIVERS","id","name","thumbImage","largeImage","generatedGrids","getGridShape","size","gridShape","gsRow","gridRow","rowIdx","gsCol","push","generateGridShape","initialState","roundData","title","description","valueSize","attributes","type","values","cellMatrix","hints","activeHintIdx","solution","gridSlice","createSlice","reducers","resetMatrix","state","length","numAttributes","numValues","boxSize","Math","pow","solutionSet","calcSolution","newMatrix","idx","r","c","bi","attrPair","xVal","floor","yVal","ansMatrix","isSolution","isCellSolution","attrs","status","hintGiverIdx","random","text","console","error","rotateCell","action","nextStatus","getNextStatus","payload","setActiveHint","answerSet","attrMatrix","a","filter","numAnswers","availableAttributes","i","Array","from","keys","generatedAnswer","answerAttrs","randIdx","splice","cellObj","e","actions","getCellMatrix","board","getRoundData","getSolution","getHints","renderHint","hint","hintGiver","selectHints","createSelector","map","h","selectActiveHint","selectRoundAttributes","selectGridInfo","gridSize","selectGridLabels","rowAttributes","colAttributes","rc","selectGridBox","row","rIdx","_","cIdx","boxArr","getAttributeMatrixForCellIndex","cellIndex","boxAttrs","boxIdx","flat","getBoxAttributes","colIdx","selectGreenCells","selectSolution","vIdx","sIdx","checkIfSolved","gridInfo","greenCells","gc","numExpected","cell","answeredCells","expectedCells","find","aC","StyledBoard","styled","div","StyledLeftLabels","StyledLeftLabel","p","StyledTopLabels","StyledTopLabel","StyledCells","StyledRawCellGroup","StyledCellGroup","cellRatio","StyledCell","BlankCellGroup","Board","dispatch","grid","gridLabels","onClickCell","useCallback","cellIdx","useMemo","round","cellGroup","cgIdx","cgKey","onClick","renderCellGroup","gl","glIdx","v","StyledContainer","StyledStatus","StyledSolvedStatus","StyledUnSolvedStatus","Status","renderedSolution","solved","log","rS","join","StyledLilManContainer","StyledLilMan","imageUrl","Footer","onClickHint","hintIdx","StyledHintBox","StyledHintHeader","StyledControls","Hint","onCloseHint","StyledHeader","StyledBody","Main","useEffect","ScStage","App","routes","route","element","path","configureStore","reducer","boardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mRAGaA,EAAkB,SAACC,GAC9B,OAAOA,GACL,IAAK,UAAY,OAAOC,YAAP,8DACjB,IAAK,SAAU,OAAOA,YAAP,yDACf,QAAS,OAAOA,YAAP,2DAIEC,cAAf,6nBAcMH,IAyBAA,KAYOI,EAAW,SAACC,GACvB,OAAOC,EAAMC,OAAOF,IA+CTC,EAAoB,CAC/BC,OA5Ba,CACbC,MAAO,UACPC,KAAM,UACNC,WAAY,UACZC,MAAO,UACPC,KAAM,UACNC,MAAO,UACPC,OAAQ,UACRC,IAAK,UACLC,OAAQ,WAoBRC,QAnCc,CACdC,GAAI,+CACJC,GAAI,+CACJC,GAAI,2CAiCJC,YAjBkB,CAClBC,YAAa,QACbC,cAAe,QACfC,aAAc,QACdC,OAAQ,QACRC,QAAS,W,QCjGEC,EAAiB,kBAAMC,eACvBC,EAAkDC,I,wBCwDlDC,EAAc,CACzB,CACEC,GAAI,SACJC,KAAM,UACNC,WAAY,iBACZC,WAAY,kBAEd,CACEH,GAAI,WACJC,KAAM,YACNC,WAAY,uBACZC,WAAY,yBA+BVC,EAA+B,GACxBC,EAAe,SAACC,GAI3B,OAHIF,EAAeE,KACjBF,EAAeE,GAhBc,SAACA,GAEhC,IADA,IAAIC,EAAY,GACRC,EAAQ,EAAGA,EAAQF,EAAO,EAAGE,IAAQ,CAG3C,IAFA,IAAIC,EAAU,GACVC,EAAmB,IAAVF,EAAc,EAAIF,EAAOE,EAC9BG,EAAQ,EAAGA,EAAQL,EAAO,EAAIE,EAAOG,IAC3CF,EAAQG,KAAK,CAAEF,EAAQC,EAAQ,IAEjCJ,EAAUK,KAAKH,GAEjB,OAAOF,EAMkBM,CAAkBP,IAEpCF,EAAeE,IC/FlBQ,EAA0B,CAC9BC,UDRA,CACEC,MAAO,yBACPC,YAAa,kDACbC,UAAW,EACXC,WAAW,CACT,CACEnB,GAAI,SACJoB,KAAM,SACNC,OAAO,CAAE,SAAU,OAAQ,SAE7B,CACErB,GAAI,QACJoB,KAAM,QACNC,OAAQ,CAAE,QAAS,SAAU,SAE/B,CACErB,GAAI,UACJoB,KAAM,SACNC,OAAQ,CAAE,QAAS,QAAS,QAE9B,CACErB,GAAI,aACJoB,KAAM,SACNC,OAAQ,CAAE,cAAe,UAAW,YCd1CC,WAAY,GACZC,MAAO,GACPC,eAAgB,EAChBC,SAAU,MAGCC,GAAYC,YAAY,CACnC1B,KAAM,QACNa,eACAc,SAAU,CACRC,YAAa,SAACC,GAAsB,IAAD,EACjC,IAAG,UAAAA,EAAMf,UAAUI,kBAAhB,eAA4BY,QAAS,EAAE,CAAC,IAAD,EAClCC,GAAgB,UAAAF,EAAMf,UAAUI,kBAAhB,eAA4BY,SAAU,EACtDE,EAAYH,EAAMf,UAAUG,UAC5BgB,EAAUC,KAAKC,IAAIH,EAAW,GAEpC,GAAGD,EAAgB,GAAKA,EAAgB,EAAE,CAOxC,IANA,IAAMK,EAAcC,GAAaL,EAAWD,GAEtCzB,EAAYF,EAAa2B,GACzBO,EAAY,GAEdC,EAAM,EACFC,EAAI,EAAGA,EAAIlC,EAAUwB,OAAQU,IACnC,IAAI,IAAIC,EAAI,EAAGA,EAAInC,EAAUkC,GAAGV,OAAQW,IACtC,IAAI,IAAIC,EAAK,EAAGA,EAAKT,EAASS,IAAK,CAEjC,IAAMC,EAAWrC,EAAUkC,GAAGC,GACxBG,EAAOV,KAAKW,MAAON,EAAMN,EAAWD,GACpCc,EAAOP,EAAMP,EAEbe,EAA6B,CAAE,CAAEJ,EAAS,GAAIC,GAAQ,CAACD,EAAS,GAAIG,IACpEE,EAAaC,GAAeb,EAAaW,GAE/CT,EAAU3B,KAAK,CACb4B,IAAKA,IACLW,MAAOP,EACPK,WAAYA,EACZG,OAAQ,IAMhBtB,EAAML,SAAWY,EACjBP,EAAMR,WAAaiB,EACnBT,EAAMP,MAAQ,CACZ,CACE8B,aAAclB,KAAKW,MAAMX,KAAKmB,SAAWvD,EAAYgC,QACrDwB,KAAM,uCAER,CACEF,aAAclB,KAAKW,MAAMX,KAAKmB,SAAWvD,EAAYgC,QACrDwB,KAAM,8CAER,CACEF,aAAclB,KAAKW,MAAMX,KAAKmB,SAAWvD,EAAYgC,QACrDwB,KAAM,qDAIVC,QAAQC,MAAM,wCACd3B,EAAMR,WAAa,QAGrBQ,EAAMR,WAAa,IAGvBoC,WAAY,SAAC5B,EAAO6B,GAClB,GAAG7B,EAAMR,WAAW,CAClB,IAAMsC,EAAaC,GAAc/B,EAAMR,WAAWqC,EAAOG,UACzDhC,EAAMR,WAAWqC,EAAOG,SAASV,OAASQ,IAG9CG,cAAe,SAACjC,EAAO6B,GAClBA,EAAOG,SAAW,IAAMhC,EAAMP,MAAMoC,EAAOG,UAAUN,QAAQC,MAAR,kCAAyCE,EAAOG,UACxGhC,EAAMN,cAAgBmC,EAAOG,YAUtBZ,GAAiB,SAACc,EAAsBC,GACnD,IADoF,IAAD,WAC3EC,GACN,GAAuF,IAApFD,EAAWE,QAAO,SAAAvB,GAAQ,OAAIoB,EAAUE,GAAGtB,EAAS,MAAQA,EAAS,MAAIb,OAAc,MAAM,CAAN,GAAO,IAD3FmC,EAAI,EAAGA,EAAIF,EAAUjC,OAAQmC,IAAI,CAAC,IAAD,IAAjCA,GAAiC,kCAIzC,OAAO,GAKH5B,GAAe,SAAC8B,EAAoBpC,GAExC,IADA,IAAMqC,EAAsB,GACpBC,EAAI,EAAGA,EAAItC,EAAesC,IAChCD,EAAoBzD,KAAK2D,MAAMC,KAAKD,MAAMH,GAAYK,SAIxD,IADA,IAAIC,EAAkB,GACdJ,EAAI,EAAGA,EAAIF,EAAYE,IAAI,CAEjC,IADA,IAAIK,EAAc,GACVL,EAAI,EAAGA,EAAID,EAAoBtC,OAAQuC,IAAI,CACjD,IAAMM,EAAUzC,KAAKW,MAAMX,KAAKmB,SAAWe,EAAoBC,GAAGvC,QAClE4C,EAAY/D,KAAKyD,EAAoBC,GAAGM,IACxCP,EAAoBC,GAAGO,OAAOD,EAAS,GAEzCF,EAAgB9D,KAAK+D,GAGvB,OAAOD,GAGHb,GAAgB,SAACiB,GACrB,IACE,OAAOA,EAAQ1B,QACb,KAAK,EAAG,OAAO,EACf,KAAK,EAAG,OAAO,EACf,KAAK,EAAG,OAAO,GAEjB,MAAM2B,GACNvB,QAAQC,MAAM,gCAAiCqB,GAGjD,OAAO,G,GAGiDpD,GAAUsD,QAArDnD,G,GAAAA,YAAa6B,G,GAAAA,WAAYK,G,GAAAA,cAE3BkB,GAAgB,SAACnD,GAAD,OAAsBA,EAAMoD,MAAM5D,YAClD6D,GAAe,SAACrD,GAAD,OAAsBA,EAAMoD,MAAMnE,WACjDqE,GAAc,SAACtD,GAAD,OAAsBA,EAAMoD,MAAMzD,UAChD4D,GAAW,SAACvD,GAAD,OAAsBA,EAAMoD,MAAM3D,OAG7C+D,GAAa,SAACC,GAAD,MAAiB,CACzCC,UAAWzF,EAAYwF,EAAKlC,cAC5BE,KAAMgC,EAAKhC,OAGAkC,GAAcC,YACzB,CAACL,KACD,SAAC9D,GAAD,OAA2BA,EAAMoE,KAAI,SAAAC,GAAC,OAAIN,GAAWM,SAG1CC,GAAmBH,YAC9B,CAACL,GAb6B,SAACvD,GAAD,OAAsBA,EAAMoD,MAAM1D,iBAchE,SAACD,EAAOC,GACN,OAAsB,IAAnBA,EACM,KAGF8D,GAAW/D,EAAMC,OAIfsE,GAAwBJ,YACnC,CAACP,KACD,SAACpE,GAAD,OAAeA,EAAUI,cAGd4E,GAAiBL,YAC5B,CAACP,KACD,SAACpE,GAAD,MAAgB,CACdiB,cAAejB,EAAUI,WAAWY,OACpCiE,SAAUjF,EAAUG,cAIX+E,GAAmBP,YAC9B,CAACI,KACD,SAAC3E,GACC,IAAMZ,EAAYF,EAAac,EAAWY,QACpCmE,EAAgB3F,EAAUoF,KAAI,SAAAlD,GAAC,OAAIA,EAAE,GAAG,MACxC0D,EAAgB5F,EAAU,GAAGoF,KAAI,SAAAS,GAAE,OAAIA,EAAG,MAEhD,MAAO,CACLF,EAAcP,KAAI,SAAAnD,GAAG,OAAIrB,EAAWqB,MACpC2D,EAAcR,KAAI,SAAAnD,GAAG,OAAIrB,EAAWqB,UAK7B6D,GAAgBX,YAC3B,CAACP,GAAcF,KACf,SAAClE,EAAWO,GAAgB,IAAD,EACnBf,EAAYF,EAAY,UAACU,EAAUI,kBAAX,aAAC,EAAsBY,QACjDS,EAAM,EACJwD,EAAWzF,EAAU,GAAGwB,OAExBG,EAAUC,KAAKC,IAAIrB,EAAUG,UAAW,GAC9C,cAAOX,QAAP,IAAOA,OAAP,EAAOA,EAAWoF,KAAI,SAACW,EAAKC,GAC1B,OAAO,YAAIhC,MAAMyB,IAAWL,KAAI,SAACa,EAAGC,GAClC,IAAIC,EAAoB,GACxB,IAAInG,EAAUgG,GAAME,GAElB,OAAOC,EAGT,IAAI,IAAIpC,EAAI,EAAGA,EAAIpC,EAASoC,IAC1BoC,EAAO9F,KACLU,EAAWkB,MAGf,OAAOkE,WA2BFC,GAAiC,SAACC,EAAmB5E,EAAuBC,GACvF,IAAMC,EAAUC,KAAKC,IAAIH,EAAW,GAE9B4E,EATwB,SAACC,EAAgB9E,GAG/C,OAFkB3B,EAAa2B,GACJ+E,OACXD,GAMCE,CADF7E,KAAKW,MAAM8D,EAAY1E,GACIF,GAEpCtB,EAASyB,KAAKW,MAAO8D,EAAY1E,EAAWD,GAC5CgF,EAASL,EAAY3E,EAO3B,MALoC,CAClC,CAAC4E,EAAS,GAAInG,GACd,CAACmG,EAAS,GAAII,KAeLC,IATsBxB,YACjC,CAACP,GAAcF,GAAeG,KAC9B,SAACrE,EAAWO,EAAYG,GAAxB,MAAsC,CACpCV,UAAWA,EACXO,WAAYA,EACZG,SAAUA,MAIkBiE,YAC9B,CAACT,KACD,SAAC3D,GACC,OAAOA,EAAW6C,QAAO,SAAAzB,GAAC,OAAiB,IAAbA,EAAEU,cAIvB+D,GAAiBzB,YAC5B,CAACN,GAAaD,KACd,SAAC1D,EAAUV,GAAX,cAAyBU,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAUkE,KAAI,SAAAlE,GAAQ,OAC7CA,EAASkE,KAAI,SAACyB,EAAKC,GAAN,OACXtG,EAAUI,WAAWkG,GAAMhG,OAAO+F,YAgB3BE,IAVqB5B,YAChC,CAACK,GAAgBmB,KACjB,SAACK,EAAUC,GACT,OAAOA,EAAW7B,KAAI,SAAA8B,GAAE,OACtBd,GAA+Bc,EAAGjF,IAAK+E,EAASvF,cAAeuF,EAASvB,gBAMjDN,YAC3B,CAACT,KACD,SAAC3D,GACC,IAAMoG,EAAcpG,EAAW6C,QAAO,SAAAwD,GAAI,OAAIA,EAAK1E,cAAYlB,OACzD6F,EAAgBtG,EAAW6C,QAAO,SAAAwD,GAAI,OAAoB,IAAhBA,EAAKvE,UACrD,GAAGwE,EAAc7F,SAAW2F,EAAa,OAAO,EAGhD,IADA,IAAMG,EAAgBvG,EAAW6C,QAAO,SAAAwD,GAAI,OAAIA,EAAK1E,cALvC,WAMNqB,GACN,IAAIsD,EAAcE,MAAK,SAAAC,GAAE,OAAIA,EAAGvF,MAAQqF,EAAcvD,GAAG9B,OACvD,MAAM,CAAN,GAAO,IAFH8B,EAAI,EAAGA,EAAIuD,EAAc9F,OAAQuC,IAAI,CAAC,IAAD,IAArCA,GAAqC,kCAK7C,OAAO,MAII5C,MAAf,Q,QCvTMsG,GAAcC,IAAOC,IAAV,0YAmBXC,GAAmBF,IAAOC,IAAV,4JAWhBE,GAAkBH,IAAOC,IAAV,0LAEjB,SAAAG,GAAC,OAAmB,IAAfA,EAAErC,SAAiB9H,YAAnB,gDAEJA,YAFI,mDAKL,SAAAmK,GAAC,OAAmB,IAAfA,EAAErC,SAAiB9H,YAAnB,qDAEJA,YAFI,wDAaHoK,GAAkBL,IAAOC,IAAV,2JAOfK,GAAiBN,IAAOC,IAAV,2SAEhB,SAAAG,GAAC,OAAmB,IAAfA,EAAErC,SAAiB9H,YAAnB,+CAEJA,YAFI,kDAWH,SAAAmK,GAAC,OAAmB,IAAfA,EAAErC,SAAiB9H,YAAnB,mDAEJA,YAFI,sDAYLsK,GAAcP,IAAOC,IAAV,0KAOXO,GAAqBR,IAAOC,IAAV,sFASlBQ,GAAkBT,YAAOQ,GAAPR,CAAH,2KAEa,SAAAI,GAAC,OAAIA,EAAErC,YAAa,SAAAqC,GAAC,OAAIA,EAAEM,aAC9B,SAAAN,GAAC,OAAIA,EAAErC,YAAa,SAAAqC,GAAC,OAAIA,EAAEM,aAQpDC,GAAaX,IAAOC,IAAV,+MACM9J,EAAS,UAM3B,SAAAiK,GAAC,OAAiB,IAAbA,EAAEjF,QAAgBlF,YAAlB,6CAAyCE,EAAS,aACvD,SAAAiK,GAAC,OAAiB,IAAbA,EAAEjF,QAAgBlF,YAAlB,6CAAyCE,EAAS,WACvD,SAAAiK,GAAC,OAAIA,EAAEpF,YAAc/E,YAAhB,0CAAoCE,EAAS,aAEhDyK,GAAiBZ,YAAOQ,GAAPR,CAAH,qEACE7J,EAAS,UAIxB,SAAS0K,KACd,IAAMC,EAAWpJ,IACXqJ,EAAOnJ,EAAewG,IACtB4C,EAAapJ,EAAeoG,IAC5BsB,EAAW1H,EAAekG,IAE1BmD,EAAcC,uBAAY,SAACC,GAC/BL,EAASrF,GAAW0F,MACnB,CAAEL,IAECJ,EAAYU,mBAAQ,WACxB,OAAyB,IAAtB9B,EAASvB,SACH,MACuB,IAAtBuB,EAASvB,SACV,MAEH,GAAN,OAAU7D,KAAKmH,MAAM,IAAM/B,EAASvB,UAApC,OACC,CAAEuB,EAASvB,WAyBd,OACE,gBAACgC,GAAD,WACE,eAACQ,GAAD,UACGQ,EAAKrD,KAAI,SAAAlF,GAAO,OACfA,EAAQkF,KAAI,SAAC4D,EAAWC,GAAZ,OA1BI,SAACD,EAAsBE,EAAezD,EAAkB2C,GAE9E,OAAGY,EAAUxH,OAAS,GAAKwH,EAAU,GAEjC,eAACb,GAAD,CAA6B1C,SAAUA,EAAU2C,UAAWA,EAA5D,SACGY,EAAU5D,KAAI,SAAAgC,GAAI,OACjB,eAACiB,GAAD,CAEExF,OAAQuE,EAAKvE,OACbH,WAAY0E,EAAK1E,WACjByG,QAAS,kBAAMR,EAAYvB,EAAKnF,OAJlC,qBACcmF,QADd,IACcA,OADd,EACcA,EAAMnF,UAHFiH,GAcxB,eAACZ,GAAD,GAAqBY,GAQiBE,CAAgBJ,EAAD,YAAiBC,GAASjC,EAASvB,SAAU2C,WAGlG,eAACL,GAAD,UACGW,EAAW,GAAGtD,KAAI,SAACiE,EAAIC,GAAL,OACjB,+BACGD,EAAGvI,OAAOsE,KAAI,SAACmE,EAAE1C,GAAH,OACb,eAACmB,GAAD,CAAkCvC,SAAUuB,EAASvB,SAArD,SACE,0CAAU4D,EAAG5J,GAAb,cAAqB8J,MADvB,YAA0B1C,QAF9B,YAAeyC,SASnB,eAAC1B,GAAD,UACGc,EAAW,GAAGtD,KAAI,SAACiE,EAAIC,GAAL,OACjB,+BACGD,EAAGvI,OAAOsE,KAAI,SAACmE,EAAE1C,GAAH,OACb,eAACgB,GAAD,CAAmCpC,SAAUuB,EAASvB,SAAtD,SACE,0CAAU4D,EAAG5J,GAAb,cAAqB8J,MADvB,YAA2B1C,QAF/B,YAAeyC,YC7LzB,I,SAAME,GAAkB9B,IAAOC,IAAV,iDAKf8B,GAAe/B,IAAOC,IAAV,wMAYZ+B,GAAqBhC,YAAO+B,GAAP/B,CAAH,uDACF7J,EAAS,UAEzB8L,GAAuBjC,YAAO+B,GAAP/B,CAAH,uDACJ7J,EAAS,QAGxB,SAAS+L,KACd,IAAMC,EAAmBvK,EAAesH,IAClCkD,EAASxK,EAAeyH,IAI9B,OAFA9D,QAAQ8G,IAAI,SAAUD,GAGpB,gBAACN,GAAD,WACE,8BAAK,cACL,qCACGK,QADH,IACGA,OADH,EACGA,EAAkBzE,KAAI,SAAC4E,EAAI/H,GAAL,OACrB,8BAAe+H,EAAGC,KAAK,QAAdhI,QAIX6H,EACA,eAACJ,GAAD,UAAqB,WAErB,eAACC,GAAD,UAAuB,gBC1C/B,I,kBAAMH,GAAkB9B,IAAOC,IAAV,kMAcfuC,GAAwBxC,IAAOC,IAAV,kLAcrBwC,GAAezC,IAAOC,IAAV,gcAOE,SAAAG,GAAC,OAAIA,EAAEsC,YAcpB,SAASC,KACd,IAAMrJ,EAAQ1B,EAAe4F,IAEvBsD,EAAWpJ,IACXkL,EAAc1B,uBAAY,SAAC2B,GAC/B/B,EAAShF,GAAc+G,MACtB,CAAE/B,IAEL,OACE,gBAAC,GAAD,WACE,8BAAK,WACL,qCACGxH,QADH,IACGA,OADH,EACGA,EAAOoE,KAAI,SAACJ,EAAM/C,GAAP,OACV,eAACiI,GAAD,UACE,eAACC,GAAD,CACEC,SAAUpF,EAAKC,UAAUtF,WACzBc,MAAOuE,EAAKhC,KACZmG,QAAS,kBAAMmB,EAAYrI,OAJHA,WC5DtC,I,SAAMuH,GAAkB9B,IAAOC,IAAV,oTAUG9J,EAAS,SACXA,EAAS,UAOzBqM,GAAwBxC,IAAOC,IAAV,yGAMrB6C,GAAgB9C,IAAOC,IAAV,gJAMblK,EAAgB,WAKhBgN,GAAmB/C,IAAOC,IAAV,4KAWhB+C,GAAiBhD,IAAOC,IAAV,wRASI9J,EAAS,UACpBA,EAAS,UAahBsM,GAAezC,IAAOC,IAAV,qMAKE,SAAAG,GAAC,OAAIA,EAAEsC,YAKpB,SAASO,KACd,IAAM3F,EAAO1F,EAAegG,IAEtBkD,EAAWpJ,IACXwL,EAAchC,uBAAY,WAC9BJ,EAAShF,IAAe,MACvB,CAAEgF,IAEL,OAAIxD,EAGF,gBAAC,GAAD,WACE,eAACyF,GAAD,UACE,6BAAIzF,EAAKC,UAAUvF,SAErB,eAAC,GAAD,UACE,eAAC,GAAD,CACE0K,SAAUpF,EAAKC,UAAUrF,WACzBa,MAAOuE,EAAKC,UAAUvF,SAG1B,eAAC8K,GAAD,UACE,6BAAIxF,EAAKhC,SAEX,eAAC0H,GAAD,UACE,yBAAQvB,QAAS,kBAAMyB,KAAvB,SAAuC,eAjB5B,KCpFnB,I,GAAMpB,GAAkB9B,IAAOC,IAAV,4MAMC9J,EAAS,SACpBA,EAAS,UAOdgN,GAAenD,IAAOC,IAAV,kDAIZmD,GAAapD,IAAOC,IAAV,0CAIT,SAASoD,KACd,IAAMvC,EAAWpJ,IAMjB,OAJA4L,qBAAU,WACRxC,EAASlH,QACR,CAACkH,IAGF,gBAAC,GAAD,WACE,eAACmC,GAAD,IACA,eAACE,GAAD,UACE,eAACjB,GAAD,MAEF,eAACkB,GAAD,UACE,eAACvC,GAAD,MAEF,eAAC8B,GAAD,OC5CC,IAAMY,GAAUvD,IAAOC,IAAV,kGA8BLuD,OAtBf,WACE,IAAMC,EAAS,CACb,CACEC,MAAO,IACPpI,KAAM,OACNqI,QAAS,eAACN,GAAD,MAIb,OACE,eAAC,IAAD,UACE,eAACE,GAAD,UACE,eAAC,IAAD,UACGE,EAAO/F,KAAI,SAAC0C,EAAG/D,GAAJ,OACV,eAAC,IAAD,CAAeuH,KAAMxD,EAAEsD,MAAOC,QAASvD,EAAEuD,SAA7BtH,aCvBXhG,GAAQwN,YAAe,CAClCC,QAAS,CACP7G,MAAO8G,MCOSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,gBAAC,IAAD,CAAUlO,MAAOA,GAAjB,UACE,eAAC,GAAD,IACA,eAAC,EAAD,SAGJmO,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACxJ,GACND,QAAQC,MAAMA,EAAMyJ,c","file":"static/js/main.90c3a6ec.chunk.js","sourcesContent":["import { createGlobalStyle, css } from \"styled-components\"\r\n\r\ntype FontStyle = 'display' | 'speech';\r\nexport const mixinFontFamily = (style?: FontStyle) => {\r\n  switch(style){\r\n    case 'display' : return css`font-family: 'Noto Sans', sans-serif`;\r\n    case 'speech': return css`font-family: 'VT323', monospace`;\r\n    default: return css`font-family: 'VT323', monospace`;\r\n  }\r\n}\r\n\r\nexport default createGlobalStyle`\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    outline:0;\r\n    box-sizing:border-box;\r\n  }\r\n  #root{\r\n    margin:0 auto;\r\n  }\r\n  h1, h2, h3, h4{\r\n    font-family: 'Noto Sans', sans-serif;\r\n  }\r\n  a, p, button, span, h5, h6{\r\n    ${mixinFontFamily()};\r\n  }\r\n  h1{\r\n    font-size: 5rem;\r\n  }\r\n  h2{\r\n    font-size: 4rem;\r\n  }\r\n  h3{\r\n    font-size: 3.5rem;\r\n  }\r\n  h4{\r\n    font-size: 2.5rem;\r\n  }\r\n  h5{\r\n    font-size: 2rem;\r\n  }\r\n  p, span{\r\n    font-size:2rem;\r\n  }\r\n\r\n  html{\r\n    font-size: 62.5%;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    ${mixinFontFamily()};\r\n    background-color: black;\r\n  }\r\n`\r\n\r\n\r\n\r\nexport const listColors = () => {\r\n  return Object.keys(store.colors);\r\n}\r\n\r\n\r\nexport const getColor = (colorId: tColor) => {\r\n  return store.colors[colorId] as CssString; \r\n}\r\n\r\nexport const getShadow = (shadowId: tShadow) => {\r\n  return store.shadows[shadowId] as CssString;\r\n}\r\n\r\nexport const getBreakpoint = (breakpointId: tBreakpoint) => {\r\n  return store.breakpoints[breakpointId] as CssString;\r\n}\r\n\r\ntype CssString = string;\r\n\r\ntype tShadow = 'z1' | 'z2' | 'z3';\r\nconst shadows = {\r\n  z1: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.16)',\r\n  z2: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.36)',\r\n  z3: '-.2rem .5rem 1rem .2rem rgba(0,0,0,.36)'\r\n}\r\ntype tColor = 'black' | 'grey' | 'grey_light' | 'white' | 'blue' | 'green' | 'yellow' | 'red' | 'purple';\r\nconst colors = {\r\n  black: '#000000',\r\n  grey: '#373737',\r\n  grey_light: '#A39F8E',\r\n  white: '#fef8dd',\r\n  blue: '#1fb9f3',\r\n  green: '#51f249',\r\n  yellow: '#fff249',\r\n  red: '#F55658',\r\n  purple: '#6b1ff3'\r\n}\r\n\r\ntype tBreakpoint = 'mobile_tiny' | 'mobile_medium' | 'mobile_large' | 'tablet' | 'desktop';\r\nconst breakpoints = {\r\n  mobile_tiny: '300px',\r\n  mobile_medium: '400px',\r\n  mobile_large: '500px',\r\n  tablet: '768px',\r\n  desktop: '1024px'\r\n}\r\n\r\ntype ThemeStore = {\r\n  colors: typeof colors,\r\n  shadows: typeof shadows,\r\n  breakpoints: typeof breakpoints\r\n}\r\n\r\nexport const store: ThemeStore = {\r\n  colors: colors,\r\n  shadows: shadows,\r\n  breakpoints: breakpoints\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { AnswerData, RawCell, RenderedAnswer, RoundData } from '../../types';\r\n\r\n/**\r\n * The attributes that defined the thingies this round\r\n */\r\nexport const SAMPLE_ROUNDDATA: RoundData[] = [\r\n  {\r\n    title: '3 attributes, 3 values',\r\n    description: 'this puzzle has 4 attributes with 3 values each',\r\n    valueSize: 3,\r\n    attributes:[\r\n      {\r\n        id: 'animal',\r\n        type: 'normal',\r\n        values:[ 'monkey', 'frog', 'fish' ]\r\n      },\r\n      {\r\n        id: 'queue',\r\n        type: 'order',\r\n        values: [ 'first', 'second', 'last' ]\r\n      },\r\n      {\r\n        id: 'emotion',\r\n        type: 'normal',\r\n        values: [ 'happy', 'angry', 'sad' ]\r\n      },\r\n      {\r\n        id: 'occupation',\r\n        type: 'normal',\r\n        values: [ 'firefighter', 'dentist', 'clown' ]\r\n      }\r\n    ]\r\n  },{\r\n    title: '3 attributes, 4 values',\r\n    description: 'this puzzle has 4 attributes with 4 values each',\r\n    valueSize: 4,\r\n    attributes:[\r\n      {\r\n        id: 'animal',\r\n        type: 'normal',\r\n        values:[ 'monkey', 'frog', 'fish', 'crab' ]\r\n      },\r\n      {\r\n        id: 'queue',\r\n        type: 'order',\r\n        values: [ 'first', 'second', 'third', 'last' ]\r\n      },\r\n      {\r\n        id: 'emotion',\r\n        type: 'normal',\r\n        values: [ 'happy', 'angry', 'sad', 'bored' ]\r\n      },\r\n      {\r\n        id: 'occupation',\r\n        type: 'normal',\r\n        values: [ 'firefighter', 'dentist', 'clown', 'lawyer' ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nexport const HINT_GIVERS = [\r\n  {\r\n    id: 'flyman',\r\n    name: 'fly man',\r\n    thumbImage: 'assets/fly.gif',\r\n    largeImage: 'assets/fly.gif'\r\n  },\r\n  {\r\n    id: 'thumbNun',\r\n    name: 'thumb nun',\r\n    thumbImage: 'assets/thumb-nun.gif',\r\n    largeImage: 'assets/thumb-nun.gif'\r\n  }\r\n]\r\n\r\ntype GridShapeDef = {\r\n  [key: string]: RawCell[][]\r\n}\r\n\r\n\r\n/*\r\n  Making this stupid data structure that I wanna get rid of\r\n  its the row/column of each attribute\r\n  4 ->  [\r\n          [[0, 1], [ 0, 2 ], [ 0, 3 ]],\r\n          [[3, 1], [ 3, 2 ]],\r\n          [[2, 1]]\r\n        ],\r\n*/\r\nexport const generateGridShape = (size: number) => {\r\n  let gridShape = [];\r\n  for(let gsRow = 0; gsRow < size - 1; gsRow++){\r\n    let gridRow = [];\r\n    let rowIdx = gsRow === 0 ? 0 : size - gsRow;\r\n    for(let gsCol = 0; gsCol < size - 1 - gsRow; gsCol++){\r\n      gridRow.push([ rowIdx, gsCol + 1 ])\r\n    }\r\n    gridShape.push(gridRow);\r\n  }\r\n  return gridShape as RawCell[][];\r\n}\r\n\r\nconst generatedGrids: GridShapeDef = {};\r\nexport const getGridShape = (size:number)  => {\r\n  if(!generatedGrids[size]){\r\n    generatedGrids[size] = generateGridShape(size);\r\n  }\r\n  return generatedGrids[size];\r\n}\r\n\r\n// TODO, generate this\r\nexport const sampleAnswerData: AnswerData = [\r\n  [ 0, 0, 1, 0 ],\r\n  [ 2, 1, 2, 1 ],\r\n  [ 1, 2, 0, 2 ]\r\n]\r\n\r\n// TODO, generate this\r\nexport const RenderedAnswers: RenderedAnswer[] = [\r\n  {\r\n    attributes:[\r\n      ['animal', 'monkey'],\r\n      ['queue', 'first'],\r\n      ['emotion', 'angry'],\r\n      ['occupation', 'firefighter']\r\n    ]\r\n  },\r\n  {\r\n    attributes:[\r\n      ['animal', 'frog'],\r\n      ['queue', 'last'],\r\n      ['emotion', 'happy'],\r\n      ['occupation', 'clown']\r\n    ]\r\n  },\r\n  {\r\n    attributes:[\r\n      ['animal', 'fish'],\r\n      ['queue', 'second'],\r\n      ['emotion', 'sad'],\r\n      ['occupation', 'dentist']\r\n    ]\r\n  }\r\n]","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\nimport { AnswerSet, AttributeDef, AttributeMatrix, CellMatrix, CellObj, Hint, RawCell, RenderedHint, RoundData } from '../../types';\r\nimport { getGridShape, SAMPLE_ROUNDDATA, HINT_GIVERS } from '../../app/data/data';\r\n\r\nexport interface GridState {\r\n  roundData: RoundData,\r\n  cellMatrix: CellMatrix,\r\n  hints: Hint[],\r\n  activeHintIdx: number,\r\n  solution: AnswerSet | null\r\n}\r\n\r\nconst initialState: GridState = {\r\n  roundData: SAMPLE_ROUNDDATA[0],\r\n  cellMatrix: [],\r\n  hints: [],\r\n  activeHintIdx: -1,\r\n  solution: null\r\n};\r\n\r\nexport const gridSlice = createSlice({\r\n  name: 'board',\r\n  initialState,\r\n  reducers: {\r\n    resetMatrix: (state: GridState) => {\r\n      if(state.roundData.attributes?.length > 0){\r\n        const numAttributes = state.roundData.attributes?.length || 0;\r\n        const numValues = state.roundData.valueSize;\r\n        const boxSize = Math.pow(numValues, 2);\r\n\r\n        if(numAttributes > 1 && numAttributes < 6){\r\n          const solutionSet = calcSolution(numValues, numAttributes);\r\n\r\n          const gridShape = getGridShape(numAttributes);\r\n          const newMatrix = [];\r\n\r\n          let idx = 0;\r\n          for(let r = 0; r < gridShape.length; r++){\r\n            for(let c = 0; c < gridShape[r].length; c ++){\r\n              for(let bi = 0; bi < boxSize; bi++){\r\n                // [ 0, 1 ] is comparing attr0 and attr1\r\n                const attrPair = gridShape[r][c];\r\n                const xVal = Math.floor((idx % boxSize) / numValues);\r\n                const yVal = idx % numValues;\r\n\r\n                const ansMatrix: AttributeMatrix = [ [ attrPair[0], xVal ], [attrPair[1], yVal ] ]\r\n                const isSolution = isCellSolution(solutionSet, ansMatrix)\r\n\r\n                newMatrix.push({\r\n                  idx: idx++,\r\n                  attrs: attrPair,\r\n                  isSolution: isSolution,\r\n                  status: 0\r\n                } as CellObj)\r\n              }\r\n            }\r\n          }\r\n\r\n          state.solution = solutionSet;\r\n          state.cellMatrix = newMatrix;\r\n          state.hints = [\r\n            {\r\n              hintGiverIdx: Math.floor(Math.random() * HINT_GIVERS.length),\r\n              text: 'The first one in line lives on land'\r\n            },\r\n            {\r\n              hintGiverIdx: Math.floor(Math.random() * HINT_GIVERS.length),\r\n              text: 'Ugh it\\'s one of those creepy... sad clowns'\r\n            },\r\n            {\r\n              hintGiverIdx: Math.floor(Math.random() * HINT_GIVERS.length),\r\n              text: 'The dentist showed up after the firefighter'\r\n            }\r\n          ];\r\n        } else{\r\n          console.error('must have between 2 and 5 attributes');\r\n          state.cellMatrix = [];\r\n        }\r\n      } else {\r\n        state.cellMatrix = [];\r\n      }\r\n    },\r\n    rotateCell: (state, action: PayloadAction<number>) => {\r\n      if(state.cellMatrix){\r\n        const nextStatus = getNextStatus(state.cellMatrix[action.payload]);\r\n        state.cellMatrix[action.payload].status = nextStatus;\r\n      }\r\n    },\r\n    setActiveHint: (state, action: PayloadAction<number>) => {\r\n      if(action.payload > -1 && !state.hints[action.payload]) console.error(`cannot set invalid hint ${action.payload}`);\r\n      state.activeHintIdx = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\n\r\n// answer set is the raw attributes (in order) and their values\r\n/// [1, 1, 1] would mean a valueIdx of 1 for attributes 0, 1, and 2\r\n\r\n// attrMatrix is a 2d array of attrIdx and numberIdx, so [[0,0],[2,0]] compares the 1st val of attr[0] with the 1st value of attr[2]\r\nexport const isCellSolution = (answerSet: AnswerSet, attrMatrix: AttributeMatrix) => {\r\n  for(let a = 0; a < answerSet.length; a++){\r\n    if(attrMatrix.filter(attrPair => answerSet[a][attrPair[0]] === attrPair[1]).length === 2) return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n// make a unique combination of each attribute/value, with no overlaps.\r\n// This is the solution to the current truth table.\r\nconst calcSolution = (numAnswers: number, numAttributes:number): AnswerSet => {\r\n  const availableAttributes = [];\r\n  for(let i = 0; i < numAttributes; i++){\r\n    availableAttributes.push(Array.from(Array(numAnswers).keys()))\r\n  }\r\n\r\n  let generatedAnswer = [];\r\n  for(let i = 0; i < numAnswers; i++){\r\n    let answerAttrs = [];\r\n    for(let i = 0; i < availableAttributes.length; i++){\r\n      const randIdx = Math.floor(Math.random() * availableAttributes[i].length);\r\n      answerAttrs.push(availableAttributes[i][randIdx]);\r\n      availableAttributes[i].splice(randIdx, 1);\r\n    }\r\n    generatedAnswer.push(answerAttrs)\r\n  }\r\n\r\n  return generatedAnswer;\r\n}\r\n\r\nconst getNextStatus = (cellObj: CellObj) => {\r\n  try{\r\n    switch(cellObj.status){\r\n      case 0: return 1;\r\n      case 1: return 2;\r\n      case 2: return 0;\r\n    }\r\n  } catch(e){\r\n    console.error('unexpected lookup for cellObj', cellObj)\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nexport const { resetMatrix, rotateCell, setActiveHint } = gridSlice.actions;\r\n\r\nexport const getCellMatrix = (state: RootState) => state.board.cellMatrix;\r\nexport const getRoundData = (state: RootState) => state.board.roundData;\r\nexport const getSolution = (state: RootState) => state.board.solution;\r\nexport const getHints = (state: RootState) => state.board.hints;\r\nexport const getActiveHintIdx = (state: RootState) => state.board.activeHintIdx;\r\n\r\nexport const renderHint = (hint: Hint) => ({\r\n  hintGiver: HINT_GIVERS[hint.hintGiverIdx],\r\n  text: hint.text\r\n});\r\n\r\nexport const selectHints = createSelector(\r\n  [getHints],\r\n  (hints): RenderedHint[] => hints.map(h => renderHint(h))\r\n);\r\n\r\nexport const selectActiveHint = createSelector(\r\n  [getHints, getActiveHintIdx],\r\n  (hints, activeHintIdx): RenderedHint | null => {\r\n    if(activeHintIdx === -1){\r\n      return null;\r\n    }\r\n\r\n    return renderHint(hints[activeHintIdx]);\r\n  }\r\n);\r\n\r\nexport const selectRoundAttributes = createSelector(\r\n  [getRoundData],\r\n  (roundData) => roundData.attributes\r\n);\r\n\r\nexport const selectGridInfo = createSelector(\r\n  [getRoundData],\r\n  (roundData) => ({\r\n    numAttributes: roundData.attributes.length,\r\n    gridSize: roundData.valueSize\r\n  })\r\n);\r\n\r\nexport const selectGridLabels = createSelector(\r\n  [selectRoundAttributes],\r\n  (attributes): [ rows: AttributeDef[], cols: AttributeDef[] ] => {\r\n    const gridShape = getGridShape(attributes.length);\r\n    const rowAttributes = gridShape.map(r => r[0][0]);\r\n    const colAttributes = gridShape[0].map(rc => rc[1]);\r\n\r\n    return [\r\n      rowAttributes.map(idx => attributes[idx]),\r\n      colAttributes.map(idx => attributes[idx])\r\n    ]\r\n  }\r\n);\r\n\r\nexport const selectGridBox = createSelector(\r\n  [getRoundData, getCellMatrix],\r\n  (roundData, cellMatrix) => {\r\n    const gridShape = getGridShape(roundData.attributes?.length);\r\n    let idx = 0;\r\n    const gridSize = gridShape[0].length;\r\n\r\n    const boxSize = Math.pow(roundData.valueSize, 2);\r\n    return gridShape?.map((row, rIdx) => {\r\n      return [...Array(gridSize)].map((_, cIdx) => {\r\n        let boxArr: CellObj[] = [];\r\n        if(!gridShape[rIdx][cIdx]){\r\n          // handles empty cells in larger maps\r\n          return boxArr;\r\n        }\r\n\r\n        for(let i = 0; i < boxSize; i++){\r\n          boxArr.push(\r\n            cellMatrix[idx++]\r\n          )\r\n        }\r\n        return boxArr;\r\n      })\r\n    })\r\n  }\r\n);\r\n\r\nconst getAttributePairFromIndex = (attrPair: RawCell, attributes: AttributeDef[]) => {\r\n  const attr = attributes[attrPair[0]];\r\n  return {\r\n    id: attr.id,\r\n    value: attr.values[attrPair[1]]\r\n  }\r\n};\r\n\r\nexport const getRenderedAttributes = (attributeMatrix:AttributeMatrix, attributes: AttributeDef[]) => {\r\n  return [\r\n    getAttributePairFromIndex(attributeMatrix[0], attributes),\r\n    getAttributePairFromIndex(attributeMatrix[1], attributes)\r\n  ];\r\n};\r\n\r\nexport const getBoxAttributes = (boxIdx: number, numAttributes: number) => {\r\n  const gridShape = getGridShape(numAttributes);\r\n  const flatGrid = gridShape.flat();\r\n  return flatGrid[boxIdx];\r\n};\r\n\r\nexport const getAttributeMatrixForCellIndex = (cellIndex: number, numAttributes: number, numValues: number) => {\r\n  const boxSize = Math.pow(numValues, 2);\r\n  const boxIdx = Math.floor(cellIndex / boxSize);\r\n  const boxAttrs = getBoxAttributes(boxIdx, numAttributes);\r\n\r\n  const rowIdx = Math.floor((cellIndex % boxSize) / numValues);\r\n  const colIdx = cellIndex % numValues;\r\n\r\n  const attrMatrix: AttributeMatrix = [\r\n    [boxAttrs[0], rowIdx],\r\n    [boxAttrs[1], colIdx],\r\n  ]\r\n\r\n  return attrMatrix;\r\n};\r\n\r\nexport const selectCurrentAnswer = createSelector(\r\n  [getRoundData, getCellMatrix, getSolution],\r\n  (roundData, cellMatrix, solution) => ({\r\n    roundData: roundData,\r\n    cellMatrix: cellMatrix,\r\n    solution: solution\r\n  })\r\n);\r\n\r\nexport const selectGreenCells = createSelector(\r\n  [getCellMatrix],\r\n  (cellMatrix) => {\r\n    return cellMatrix.filter(c => c.status === 1);\r\n  }\r\n);\r\n  \r\nexport const selectSolution = createSelector(\r\n  [getSolution, getRoundData],\r\n  (solution, roundData) => solution?.map(solution => \r\n    solution.map((vIdx,sIdx) => \r\n      roundData.attributes[sIdx].values[vIdx]\r\n    )\r\n  )\r\n);\r\n\r\n// find solutions, return data.\r\nexport const selectAnswerMatrix = createSelector(\r\n  [selectGridInfo, selectGreenCells],\r\n  (gridInfo, greenCells) => {\r\n    return greenCells.map(gc =>\r\n      getAttributeMatrixForCellIndex(gc.idx, gridInfo.numAttributes, gridInfo.gridSize)\r\n    );\r\n  }\r\n);\r\n\r\n// if every \"solution\" cell has a 1 status, and there are not extra answers\r\nexport const checkIfSolved = createSelector(\r\n  [getCellMatrix],\r\n  (cellMatrix) => {\r\n    const numExpected = cellMatrix.filter(cell => cell.isSolution).length;\r\n    const answeredCells = cellMatrix.filter(cell => cell.status === 1);\r\n    if(answeredCells.length !== numExpected) return false;\r\n\r\n    const expectedCells = cellMatrix.filter(cell => cell.isSolution);\r\n    for(let i = 0; i < expectedCells.length; i++){\r\n      if(!answeredCells.find(aC => aC.idx === expectedCells[i].idx)){\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n);\r\n\r\nexport default gridSlice.reducer;","import { useCallback, useMemo } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { CellObj, CellStatus } from '../../types';\r\nimport { rotateCell, selectGridBox, selectGridLabels, selectGridInfo } from './slice';\r\n\r\nconst StyledBoard = styled.div`\r\n  position:absolute;\r\n  transform: matrix(2.0,.9,-1.75,1.5,-300,-50) scale(.4) translate(-50%, -50%);\r\n  left: 50%;\r\n  top:50%;\r\n\r\n  display:grid;\r\n  grid-template-columns: 15rem 13rem 13rem 13rem; \r\n  grid-template-rows: 15rem 13rem 13rem 13rem; \r\n  column-gap: 2rem;\r\n  row-gap: 2rem;\r\n\r\n  >div{\r\n    display:grid;\r\n    column-gap: 2rem;\r\n    row-gap: 2rem;\r\n  }\r\n`\r\n\r\nconst StyledLeftLabels = styled.div`\r\n  grid-column: 15rem;\r\n  grid-row: 2 / span 3;\r\n  \r\n  grid-template-columns: 15rem; \r\n  grid-template-rows: 13rem 13rem 13rem;\r\n`\r\n\r\ntype StyledLabelProps = {\r\n  gridSize: number\r\n}\r\nconst StyledLeftLabel = styled.div<StyledLabelProps>`\r\n  text-align:right;\r\n  ${p => p.gridSize === 4 ? css`\r\n    height: 25%;\r\n  `: css`\r\n    height: 33%;\r\n  `}\r\n  ${p => p.gridSize === 4 ? css`\r\n    padding-top:0rem;\r\n  `: css`\r\n    padding-top:1rem;\r\n  `}\r\n  padding-right:1rem;\r\n  position:relative;\r\n  >span{\r\n    position:absolute;\r\n    right:0;\r\n    white-space:nowrap;\r\n  }\r\n`\r\nconst StyledTopLabels = styled.div`\r\n  grid-column: 2 / span 3;\r\n  grid-row: 15rem;\r\n  \r\n  grid-template-columns: 13rem 13rem 13rem;\r\n  grid-template-rows: 15rem;\r\n`\r\nconst StyledTopLabel = styled.div<StyledLabelProps>`\r\n  display:inline-block;\r\n  ${p => p.gridSize === 4 ? css`\r\n    width: 25%;\r\n  `: css`\r\n    width: 33%;\r\n  `}\r\n  height: 100%;\r\n  position:relative;\r\n\r\n  span{\r\n    display:block;\r\n    position: absolute;\r\n    ${p => p.gridSize === 4 ? css`\r\n      left: 1rem;\r\n    `: css`\r\n      left: 2rem;\r\n    `}\r\n    bottom: -1.5rem;\r\n    display: block;\r\n    white-space: nowrap;\r\n    transform-origin: left;\r\n    transform: rotate(-90deg);\r\n  }\r\n`\r\nconst StyledCells = styled.div`\r\n  grid-column: 2 / span 3;\r\n  grid-row: 2 / span 3;\r\n\r\n  grid-template-columns: 13rem 13rem 13rem;\r\n  grid-template-rows: 13rem 13rem 13rem;\r\n`\r\nconst StyledRawCellGroup = styled.div`\r\n  display:grid;\r\n  column-gap: .6rem;\r\n  row-gap: .6rem;\r\n`\r\ntype StyledCellGroupProps = {\r\n  gridSize: number,\r\n  cellRatio: string\r\n}\r\nconst StyledCellGroup = styled(StyledRawCellGroup)<StyledCellGroupProps>`\r\n  display:grid;\r\n  grid-template-columns: repeat(${p => p.gridSize}, ${p => p.cellRatio});\r\n  grid-template-rows: repeat(${p => p.gridSize}, ${p => p.cellRatio});\r\n  column-gap: .6rem;\r\n  row-gap: .6rem;\r\n`\r\ntype StyledCellProps = {\r\n  status: CellStatus,\r\n  isSolution?: boolean\r\n}\r\nconst StyledCell = styled.div<StyledCellProps>`\r\n  border: 3px solid ${getColor('white')};\r\n  cursor: pointer;\r\n  transition: background-color .1s, box-shadow .2s;\r\n  &:hover{\r\n    box-shadow: 0 0 .2rem .2rem white;\r\n  }\r\n  ${p => p.status === 1 && css`background-color:${getColor('green')}`};\r\n  ${p => p.status === 2 && css`background-color:${getColor('red')}`};\r\n  ${p => p.isSolution && css`border-color: ${getColor('green')}`};\r\n`\r\nconst BlankCellGroup = styled(StyledRawCellGroup)`\r\n  background-color: ${getColor('white')};\r\n  opacity: .2;\r\n`\r\n\r\nexport function Board() {\r\n  const dispatch = useAppDispatch();\r\n  const grid = useAppSelector(selectGridBox);\r\n  const gridLabels = useAppSelector(selectGridLabels);\r\n  const gridInfo = useAppSelector(selectGridInfo);\r\n\r\n  const onClickCell = useCallback((cellIdx) => {\r\n    dispatch(rotateCell(cellIdx));\r\n  }, [ dispatch ]);\r\n\r\n  const cellRatio = useMemo(() => {\r\n    if(gridInfo.gridSize === 3) {\r\n      return '30%';\r\n    } else if(gridInfo.gridSize === 4) {\r\n      return '20%';\r\n    }\r\n    return `${Math.round(100 / gridInfo.gridSize)}%`;\r\n  }, [ gridInfo.gridSize ])\r\n\r\n\r\n  const renderCellGroup = (cellGroup: CellObj[], cgKey: string, gridSize: number, cellRatio: string) => {\r\n    // [0] check here cause this is all janky and the individual cells are undefined on load\r\n    if(cellGroup.length > 0 && cellGroup[0]){\r\n      return (\r\n        <StyledCellGroup key={cgKey} gridSize={gridSize} cellRatio={cellRatio}>\r\n          {cellGroup.map(cell => (\r\n            <StyledCell \r\n              key={`cell${cell?.idx}`}\r\n              status={cell.status}\r\n              isSolution={cell.isSolution}\r\n              onClick={() => onClickCell(cell.idx)}\r\n            />\r\n          ))}\r\n        </StyledCellGroup>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <BlankCellGroup key={cgKey} />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledBoard>\r\n      <StyledCells>\r\n        {grid.map(gridRow => (\r\n          gridRow.map((cellGroup, cgIdx) => renderCellGroup(cellGroup, `cg${cgIdx}`, gridInfo.gridSize, cellRatio)\r\n        )))}\r\n      </StyledCells>\r\n      <StyledTopLabels>\r\n        {gridLabels[1].map((gl, glIdx) => (\r\n          <div key={`tl${glIdx}`}>\r\n            {gl.values.map((v,vIdx) => (\r\n              <StyledTopLabel key={`tv${vIdx}`} gridSize={gridInfo.gridSize}>\r\n                <span>{`${gl.id} - ${v}`}</span>\r\n              </StyledTopLabel>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </StyledTopLabels>\r\n      <StyledLeftLabels>\r\n        {gridLabels[0].map((gl, glIdx) => (\r\n          <div key={`ll${glIdx}`}>\r\n            {gl.values.map((v,vIdx) => (\r\n              <StyledLeftLabel key={`lv${vIdx}`} gridSize={gridInfo.gridSize}>\r\n                <span>{`${gl.id} - ${v}`}</span>\r\n              </StyledLeftLabel>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </StyledLeftLabels>\r\n    </StyledBoard>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { checkIfSolved, selectSolution } from './slice';\r\n\r\nconst StyledContainer = styled.div`\r\n  margin-left:2rem;\r\n`\r\n\r\n\r\nconst StyledStatus = styled.div`\r\n  position:absolute;\r\n  right:0;\r\n  top:0;\r\n  padding: .5rem 1rem;\r\n  border: .5rem solid white;\r\n  border-radius: 0 0 0 1.5rem;\r\n\r\n  font-weight:bold;\r\n  font-size:3rem;\r\n`;\r\n\r\nconst StyledSolvedStatus = styled(StyledStatus)`\r\n  background-color: ${getColor('green')};  \r\n`;\r\nconst StyledUnSolvedStatus = styled(StyledStatus)`\r\n  background-color: ${getColor('red')};  \r\n`;\r\n\r\nexport function Status() {\r\n  const renderedSolution = useAppSelector(selectSolution);\r\n  const solved = useAppSelector(checkIfSolved);\r\n\r\n  console.log('solved', solved)\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <h3>{'Solution:'}</h3>\r\n      <ul>\r\n        {renderedSolution?.map((rS, idx) => (\r\n          <li key={idx}>{rS.join(' | ')}</li>\r\n        ))}\r\n      </ul>\r\n      \r\n      { solved ? (\r\n        <StyledSolvedStatus>{'SOLVED'}</StyledSolvedStatus>\r\n      ): (\r\n        <StyledUnSolvedStatus>{'UNSOLVED'}</StyledUnSolvedStatus>\r\n      ) }\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { selectHints, setActiveHint } from './slice';\r\n\r\nconst StyledContainer = styled.div`\r\n  margin-left:2rem;\r\n  height:2rem;\r\n  border-top: .25rem solid white;\r\n\r\n  h4{\r\n    margin-top:-4rem;\r\n  }\r\n  ul{\r\n    padding-left:10rem;\r\n    height:100%;\r\n  }\r\n`;\r\n\r\nconst StyledLilManContainer = styled.div`\r\n  display:inline-block;\r\n  width:20rem;\r\n  height:100%;\r\n  vertical-align:top;\r\n  margin-left: 2rem;\r\n  margin-right: 2rem;\r\n  position: relative;\r\n`;\r\n\r\ntype LilManProps = {\r\n  imageUrl: string\r\n};\r\n\r\nconst StyledLilMan = styled.div<LilManProps>`\r\n  position:absolute;\r\n  width:100%;\r\n  left:50%;\r\n  transform: translateX(-50%);\r\n  height:20rem;\r\n  top:-12rem;\r\n  background: url(${p => p.imageUrl}) no-repeat center;\r\n  background-position:top;\r\n  background-size:cover;\r\n  cursor: pointer;\r\n\r\n  &:hover{\r\n    top:-16rem;\r\n    width:130%;\r\n    transition: top .2s ease-out, width .4s;\r\n    filter: drop-shadow(0 0 .5rem #ffffff);\r\n  }\r\n  transition: top .2s ease-out, width .4s;\r\n`;\r\n\r\nexport function Footer() {\r\n  const hints = useAppSelector(selectHints);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const onClickHint = useCallback((hintIdx) => {\r\n    dispatch(setActiveHint(hintIdx));\r\n  }, [ dispatch ]);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <h4>{'Hints:'}</h4>\r\n      <ul>\r\n        {hints?.map((hint, idx) => (\r\n          <StyledLilManContainer key={idx}>\r\n            <StyledLilMan \r\n              imageUrl={hint.hintGiver.thumbImage}\r\n              title={hint.text}\r\n              onClick={() => onClickHint(idx)}\r\n            /> \r\n          </StyledLilManContainer>\r\n        ))}\r\n      </ul>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor, mixinFontFamily } from '../../themes';\r\nimport { selectActiveHint, setActiveHint } from './slice';\r\n\r\n\r\nconst StyledContainer = styled.div`\r\n  position:fixed;\r\n  z-index:1;\r\n  left:10%;\r\n  right:10%;\r\n  height:50%;\r\n  top:25%;\r\n  padding: 2rem;\r\n\r\n  border-radius: 1rem;\r\n  border: .5rem solid ${getColor('white')};\r\n  background-color: ${getColor('black')};\r\n\r\n  display:grid;\r\n  grid-template-columns: 33% 67%;\r\n  grid-template-rows: 5rem auto 10rem;\r\n`;\r\n\r\nconst StyledLilManContainer = styled.div`\r\n  grid-column: 1 / span 1;\r\n  grid-row: 2 / span 1;\r\n  position:relative;\r\n`;\r\n\r\nconst StyledHintBox = styled.div`\r\n  grid-column: 2 / span 1;\r\n  grid-row: 2 / span 1;\r\n  padding: 2rem;\r\n\r\n  p{\r\n    ${mixinFontFamily('speech')};\r\n    font-size:5rem;\r\n  }\r\n`;\r\n\r\nconst StyledHintHeader = styled.div`\r\n  grid-column: 2 / span 1;\r\n  grid-row: 1 / span 1;\r\n\r\n  text-align:right;\r\n  font-size: 3rem;\r\n  margin-right: 1rem;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\n\r\nconst StyledControls = styled.div`\r\n  grid-column: 1 / span 3;\r\n  grid-row: 3 / span 1;\r\n  padding: 2rem;\r\n\r\n  button{\r\n    border-radius: 1.5rem;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: ${getColor('purple')};\r\n    color: ${getColor('white')};\r\n    \r\n    font-size: 3rem;\r\n\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\ntype LilManProps = {\r\n  imageUrl: string\r\n};\r\n\r\n\r\nconst StyledLilMan = styled.div<LilManProps>`\r\n  position:absolute;\r\n  width:100%;\r\n  height:100%;\r\n  top:0rem;\r\n  background: url(${p => p.imageUrl}) no-repeat center;\r\n  background-position:center;\r\n  background-size:contain;\r\n`;\r\n\r\nexport function Hint() {\r\n  const hint = useAppSelector(selectActiveHint);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const onCloseHint = useCallback(() => {\r\n    dispatch(setActiveHint(-1));\r\n  }, [ dispatch ]);\r\n\r\n  if(!hint) return null;\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledHintHeader>\r\n        <p>{hint.hintGiver.name}</p>\r\n      </StyledHintHeader>\r\n      <StyledLilManContainer>\r\n        <StyledLilMan \r\n          imageUrl={hint.hintGiver.largeImage}\r\n          title={hint.hintGiver.name}\r\n        /> \r\n      </StyledLilManContainer>\r\n      <StyledHintBox>\r\n        <p>{hint.text}</p>\r\n      </StyledHintBox>\r\n      <StyledControls>\r\n        <button onClick={() => onCloseHint()}>{'Close'}</button>\r\n      </StyledControls>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { getColor } from '../../themes';\r\nimport { useAppDispatch } from '../../app/hooks';\r\nimport { resetMatrix } from './slice';\r\nimport { useEffect } from 'react';\r\nimport { Board } from './board';\r\nimport { Status } from './status';\r\nimport { Footer } from './footer';\r\nimport { Hint } from './hint';\r\n\r\nconst StyledContainer = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  bottom:0;\r\n  right:0;\r\n  background-color: ${getColor('black')};\r\n  color: ${getColor('white')};\r\n  overflow: hidden;\r\n\r\n  display:flex;\r\n  flex-direction:column;\r\n`;\r\n\r\nconst StyledHeader = styled.div`\r\n  flex: 0 0 10rem;\r\n`;\r\n\r\nconst StyledBody = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nexport function Main() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(resetMatrix());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <Hint />\r\n      <StyledHeader>\r\n        <Status />\r\n      </StyledHeader>\r\n      <StyledBody>\r\n        <Board />\r\n      </StyledBody>\r\n      <Footer />\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { HashRouter, Route, Routes } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Main } from './scenes/main';\r\n\r\nexport const ScStage = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  right:0;\r\n  bottom:0;\r\n`\r\n\r\nfunction App() {\r\n  const routes = [\r\n    {\r\n      route: '/',\r\n      text: 'Main',\r\n      element: <Main/>\r\n    }\r\n  ]\r\n  \r\n  return (\r\n    <HashRouter>\r\n      <ScStage>\r\n        <Routes>\r\n          {routes.map((p, i) => (\r\n            <Route key={i} path={p.route} element={p.element} />\r\n          ))}\r\n        </Routes>\r\n      </ScStage>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport boardReducer from '../scenes/main/slice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    board: boardReducer\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './themes/fonts.css';\r\nimport GlobalStyle from './themes/';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n      <GlobalStyle />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}