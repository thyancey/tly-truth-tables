{"version":3,"sources":["utils/localstorage.tsx","themes/index.ts","scenes/info-panel/new-hint-giver.tsx","components/lil-face.tsx","scenes/board/board-controls.tsx","app/ui-slice.tsx","scenes/board/position-controls.tsx","scenes/board/index.tsx","components/button.tsx","scenes/modal/modals/basic.tsx","scenes/modal/modals/winlose.tsx","scenes/modal/modals/debug.tsx","scenes/modal/modals/splash.tsx","scenes/modal/modals/progress.tsx","scenes/modal/modals/help.tsx","scenes/modal/index.tsx","scenes/main/rulemaster.tsx","components/speech-text.tsx","scenes/info-panel/hint-picker.tsx","scenes/info-panel/index.tsx","scenes/main/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","app/data/data.tsx","utils/puzzler.tsx","app/board-slice.tsx","app/hooks.ts"],"names":["STORE_SCHEMA","LS_KEY","loadState","serializedState","localStorage","getItem","state","JSON","parse","board","storeSchema","console","log","gameStatus","e","saveSate","a","stringify","setItem","resetData","removeItem","document","location","reload","mixinFontFamily","style","css","createGlobalStyle","getColor","colorId","store","colors","brown_dark","brown","brown_light","black","grey_dark","grey","grey_light","white","pink","red_dark","red","red_light","green_dark","green","green_light","blue_dark","blue","blue_light","yellow_dark","yellow","yellow_light","purple","shadows","z1","z2","z3","breakpoints","mobile_tiny","mobile_medium","mobile_large","tablet","desktop","StyledHintGiver","styled","div","StyledLilManContainer","NewHintGiver","isTalking","hintGiver","align","useAppSelector","selectActiveHintGiver","useState","bodyType","setBodyType","transition","setTransition","transitionTimer","useRef","startTransition","useCallback","current","global","setTimeout","useEffect","clearTimeout","className","hideFace","bodyClass","StyledLilManGif","p","imageUrl","LilFace","onClick","talkingImage","idleImage","StyledButton","StyledSolvedButton","StyledHelpButton","StyledProgressButton","StyledContainer","BoardControls","solved","checkIfSolved","dispatch","useAppDispatch","onSubmitGame","forceWin","submitAnswer","setGameStatus","initialState","zoom","position","uiSlice","createSlice","name","reducers","setZoom","action","payload","setPosition","resetZoom","resetPosition","actions","getZoom","ui","getPosition","StyledZoomContainer","StyledPanContainer","StyledSlider","input","PanSliderY","PositionControls","onChangeZoom","target","value","onChangePositionX","onChangePositionY","onResetZoom","onResetPosition","title","type","min","max","onChange","id","StyledBoardContainer","StyledBoard","StyledLeftLabels","StyledLeftLabel","gridSize","StyledTopLabels","StyledTopLabel","StyledCells","StyledRawCellGroup","StyledCellGroup","cellRatio","StyledCell","status","BlankCellGroup","StyledControls","Board","grid","selectGridBox","gridLabels","selectGridLabels","gridInfo","selectGridInfo","onClickCell","cellIdx","rotateCell","useMemo","numValues","Math","round","tStyles","transform","map","gridRow","grIdx","cellGroup","cgIdx","cgKey","boardCell","length","gridColumn","cell","isSolution","idx","renderCellGroup","gl","glIdx","v","vIdx","toUpperCase","StyledPositiveButton","StyledNegativeButton","StyledSpecialButton","StyledNeutralButton","Button","text","buttonType","StyledModalAbstract","StyledModalContainer","StyledModalHeader","StyledModalBody","ul","StyledModalFooter","WinModal","startNextLevel","LoseModal","restartLevel","StyledSolution","DebugModal","renderedSolution","selectRenderedSolution","attributes","selectAttributes","attr","rS","rSe","rSeIdx","SplashModal","levelIdx","getLevelIdx","textAlign","resumeLevel","startLevel","StyledBody","StyledLevelEntry","li","isEven","StyledCompleted","completed","StyledGroupEntry","LevelGroupEntry","levelGroup","levels","lI","LevelInfoEntry","data","level","layout","ProgressModal","levelInfo","selectAllLevelInfo","onStartLevel","StyledInstructions","StyledWebsiteLink","HelpModal","href","StyledModalBg","Modal","modal","getModal","getGameStatus","RuleMaster","levelData","useSelector","selectLevelData","resetMatrix","resume","innerTimer","innerText","SpeechText","onTextComplete","delay","curText","setCurText","isComplete","setIsComplete","nextTextPlease","fullText","reset","partial","slice","StyledHintHint","StyledHint","isActive","HintPicker","activeHintIdx","getActiveHintIdx","hints","selectHints","onCloseHint","setActiveHint","onClickHint","hintIdx","hint","StyledBanner","StyledTitleBox","StyledHintBox","InfoPanel","setIsTalking","selectActiveHint","selectLevelInfo","titleText","hintText","description","Main","gameReady","getGameReady","ScStage","App","routes","route","element","i","path","configureStore","reducer","boardReducer","uiReducer","preloadedState","Boolean","window","hostname","match","subscribe","throttle","getState","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","LEVELMENU","LEVELDATA","solution","HINT_GIVERS","generatedGrids","getGridShape","size","gridShape","gsRow","rowIdx","gsCol","push","generateGridShape","isCellSolution","answerSet","attrMatrix","filter","attrPair","cellMatrix","hintGivers","progression","boardSlice","solutionSet","numAttributes","boxSize","pow","newMatrix","r","c","bi","xVal","floor","yVal","ansMatrix","attrs","generateCellMatrix","forEach","hIdx","foundIdx","findIndex","hg","getHintIdxById","random","nextStatus","getNextStatus","includes","getNextLevelIdx","cellObj","getCellMatrix","getHintGivers","getProgression","renderHint","hintGiverIdx","curIdx","createSelector","levelMenu","menuGroup","lId","h","activeHint","rowAttributes","colAttributes","rc","row","rIdx","Array","_","cIdx","boxArr","selectSolution","sIdx","numExpected","answeredCells","expectedCells","find","aC","useDispatch"],"mappings":"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","file":"static/js/main.003d19f7.chunk.js","sourcesContent":["// pattern from https://dev.to/igorovic/simplest-way-to-persist-redux-state-to-localstorage-e67\r\n\r\n/* when changing redux store or save format, update from whatever epoch time it is\r\n   to invalidate older saves. prevents corrupting localStorage while its tied to loose\r\n   redux state\r\n*/\r\nexport const STORE_SCHEMA = 1668926512838;\r\n\r\nconst LS_KEY = 'state';\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(LS_KEY);\r\n    if(!serializedState) return undefined;\r\n    const state = JSON.parse(serializedState);\r\n    if(state.board.storeSchema !== STORE_SCHEMA) {\r\n      console.log('saved data does not match store schema, resetting');\r\n      return undefined;\r\n    }\r\n\r\n    // hack for now, force player to start a new level and reset some messy data\r\n    state.board.gameStatus = 'start';\r\n\r\n    return state;\r\n  } catch(e) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport const saveSate = async (state: any) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(LS_KEY, serializedState);\r\n  } catch(e) {\r\n    \r\n  }\r\n}\r\n\r\n// TODO see if this has async issues with redux\r\nexport const resetData = () => {\r\n  localStorage.removeItem(LS_KEY);\r\n  document.location.reload();\r\n}","import { createGlobalStyle, css } from \"styled-components\"\r\n\r\ntype FontStyle = 'display' | 'speech';\r\nexport const mixinFontFamily = (style?: FontStyle) => {\r\n  switch(style){\r\n    case 'display' : return css`font-family: 'Noto Sans', sans-serif`;\r\n    case 'speech': return css`font-family: 'VT323', monospace`;\r\n    default: return css`font-family: 'VT323', monospace`;\r\n  }\r\n}\r\n\r\nexport default createGlobalStyle`\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    outline:0;\r\n    box-sizing:border-box;\r\n\r\n    -webkit-touch-callout: none; /* iOS Safari */\r\n    -webkit-user-select: none; /* Safari */\r\n     -khtml-user-select: none; /* Konqueror HTML */\r\n       -moz-user-select: none; /* Old versions of Firefox */\r\n        -ms-user-select: none; /* Internet Explorer/Edge */\r\n            user-select: none; /* Non-prefixed version, currently\r\n                                  supported by Chrome, Edge, Opera and Firefox */\r\n  }\r\n  #root{\r\n    margin:0 auto;\r\n  }\r\n  h1, h2, h3, h4{\r\n    /* font-family: 'Noto Sans', sans-serif; */\r\n    ${mixinFontFamily()};\r\n  }\r\n  a, p, button, span, h5, h6{\r\n    ${mixinFontFamily()};\r\n  }\r\n  h1{\r\n    font-size: 5rem;\r\n  }\r\n  h2{\r\n    font-size: 4rem;\r\n  }\r\n  h3{\r\n    font-size: 3.5rem;\r\n  }\r\n  h4{\r\n    font-size: 2.5rem;\r\n  }\r\n  h5{\r\n    font-size: 2rem;\r\n  }\r\n  p, span{\r\n    font-size:2rem;\r\n  }\r\n\r\n  html{\r\n    font-size: 62.5%;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    ${mixinFontFamily()};\r\n    background-color: black;\r\n  }\r\n`\r\n\r\n\r\n\r\nexport const listColors = () => {\r\n  return Object.keys(store.colors);\r\n}\r\n\r\n\r\nexport const getColor = (colorId: tColor) => {\r\n  return store.colors[colorId] as CssString; \r\n}\r\n\r\nexport const getShadow = (shadowId: tShadow) => {\r\n  return store.shadows[shadowId] as CssString;\r\n}\r\n\r\nexport const getBreakpoint = (breakpointId: tBreakpoint) => {\r\n  return store.breakpoints[breakpointId] as CssString;\r\n}\r\n\r\ntype CssString = string;\r\n\r\ntype tShadow = 'z1' | 'z2' | 'z3';\r\nconst shadows = {\r\n  z1: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.16)',\r\n  z2: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.36)',\r\n  z3: '-.2rem .5rem 1rem .2rem rgba(0,0,0,.36)'\r\n}\r\ntype tColor = 'brown_dark' | 'brown' | 'brown_light' | 'black' | 'grey_dark' | 'grey' | 'grey_light' | 'white' | 'pink' | 'red_dark' | 'red' | 'red_light' | 'blue_dark' | 'blue' | 'blue_light' | 'green_dark' | 'green' | 'green_light' | 'yellow_dark' | 'yellow' | 'yellow_light' | 'purple';\r\nconst colors = {\r\n  brown_dark: '#35120e',\r\n  brown: '#6b2b15',\r\n  brown_light: '#d48e55',\r\n  black: '#07070e',\r\n  grey_dark: '#1a1932',\r\n  grey: '#424c6e',\r\n  grey_light: '#92a1b9',\r\n  white: '#f7ede3',\r\n  pink: '#f29caa',\r\n  red_dark: '#7b102b',\r\n  red: '#b3102b',\r\n  red_light: '#e35970',\r\n  green_dark: '#123f1d',\r\n  green: '#33984b',\r\n  green_light: '#5ac54f',\r\n  blue_dark: '#003f61',\r\n  blue: '#1c638d',\r\n  blue_light: '#7ecbed',\r\n  yellow_dark: '#666a15',\r\n  yellow: '#afb224',\r\n  yellow_light: '#cfd14d',\r\n  purple: '#9c3d95',\r\n}\r\n\r\ntype tBreakpoint = 'mobile_tiny' | 'mobile_medium' | 'mobile_large' | 'tablet' | 'desktop';\r\nconst breakpoints = {\r\n  mobile_tiny: '300px',\r\n  mobile_medium: '400px',\r\n  mobile_large: '500px',\r\n  tablet: '768px',\r\n  desktop: '1024px'\r\n}\r\n\r\ntype ThemeStore = {\r\n  colors: typeof colors,\r\n  shadows: typeof shadows,\r\n  breakpoints: typeof breakpoints\r\n}\r\n\r\nexport const store: ThemeStore = {\r\n  colors: colors,\r\n  shadows: shadows,\r\n  breakpoints: breakpoints\r\n}\r\n","import styled from 'styled-components';\r\n\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { LilFace } from '../../components/lil-face';\r\nimport { selectActiveHintGiver } from '../../app/board-slice';\r\nimport { getColor } from '../../themes';\r\nimport { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\n\r\nconst StyledHintGiver = styled.div`\r\n  position:absolute;\r\n  bottom:-1rem;\r\n  width:100%;\r\n  height:100%;\r\n  left:10%;\r\n  transition: width .25s ease-in, height .5s ease-in-out, left 1s ease-out, background-color .5s, color .5s, border-radius .5s;\r\n  border-radius: 3rem 3rem 0 0;\r\n\r\n  &.hg-body1, &.hg-body2, &.hg-body3 {\r\n\r\n    >div{\r\n      opacity: 1;\r\n      transition: opacity .25s;\r\n      transition-delay: .25s;\r\n      >div{\r\n        width:100%;\r\n        height:100%;\r\n        transition: width .25s cubic-bezier(0.6, 1.47, 1, 1.06), height .25s cubic-bezier(0.6, 1.47, 1, 1.06);\r\n        transition-delay: .25s;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.hg-none{\r\n    background-color: ${getColor('brown_light')};\r\n    border: 1rem solid ${getColor('brown')};\r\n    height: 40%;\r\n    width: 80%;\r\n    left: 10%;\r\n  }\r\n\r\n  &.hg-body1 {\r\n    background-color: ${getColor('brown_dark')};\r\n    border: 1rem solid ${getColor('brown')};\r\n    height: 60%;\r\n    width: 90%;\r\n    left: 5%;\r\n  }\r\n\r\n  &.hg-body2 {\r\n    background-color: ${getColor('green_dark')};\r\n    border: 1rem solid ${getColor('green')};\r\n    border-radius: 3rem 12rem 0 0;\r\n    height: 100%;\r\n    width: 70%;\r\n    left: 15%;\r\n  }\r\n\r\n  &.hg-body3 {\r\n    border-radius: 6rem 6rem 0 0;\r\n    background-color: ${getColor('brown')};\r\n    border: 1rem solid ${getColor('brown_light')};\r\n    height: 90%;\r\n    width: 80%;\r\n    left: 10%;\r\n  }\r\n\r\n  &.transitioning {\r\n    >div{\r\n      opacity: 0;\r\n      transition: opacity 0s;\r\n\r\n      >div{\r\n        width:50%;\r\n        height:50%;\r\n        transition: width 0s, height 0s;\r\n        transition-delay: 0s;\r\n      }\r\n    }\r\n  }\r\n\r\n`;\r\n\r\nconst StyledLilManContainer = styled.div`\r\n  position: absolute;\r\n  width:100%;\r\n  height:100%;\r\n  left:50%;\r\n  top:50%;\r\n  transform: translate(-50%, -50%);\r\n`;\r\n\r\ninterface HintGiverProps {\r\n  isTalking?: boolean,\r\n  align?: 'bottom' | 'top'\r\n}\r\n\r\n\r\nexport function NewHintGiver({ isTalking, align = 'bottom' }: HintGiverProps) {\r\n  const hintGiver = useAppSelector(selectActiveHintGiver);\r\n  const [ bodyType, setBodyType ] = useState('');\r\n  const [ transition, setTransition ] = useState(false);\r\n  const transitionTimer: { current: NodeJS.Timeout | null } = useRef(null);\r\n\r\n  const startTransition = useCallback(() => {\r\n    setTransition(true);\r\n    transitionTimer.current = global.setTimeout(() => {\r\n      setTransition(false);\r\n    }, 250);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if(hintGiver && hintGiver.bodyType){\r\n      if(bodyType !== hintGiver.bodyType){\r\n        setBodyType(hintGiver.bodyType);\r\n        startTransition();\r\n      }\r\n    }\r\n  }, [ hintGiver, bodyType, transition, startTransition ]);\r\n\r\n  useEffect(() => {\r\n    global.clearTimeout(transitionTimer.current as NodeJS.Timeout);\r\n  }, []);\r\n\r\n  if (!hintGiver || !bodyType) {\r\n    return (\r\n      <StyledHintGiver className={'hg-none'} >\r\n      </StyledHintGiver>\r\n    );\r\n  }\r\n\r\n  const hideFace = hintGiver.bodyType !== bodyType;\r\n  const bodyClass = transition ? `hg-${bodyType} transitioning` : `hg-${bodyType}`;\r\n\r\n  return (\r\n    <StyledHintGiver className={bodyClass} >\r\n      <StyledLilManContainer>\r\n        <LilFace\r\n          isTalking={isTalking}\r\n          hintGiver={hintGiver}\r\n          hideFace={hideFace}\r\n        />\r\n      </StyledLilManContainer>\r\n    </StyledHintGiver>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { HintGiver } from '../types';\r\n\r\nexport const ScButton = styled.div`\r\n  padding: 2rem;\r\n`;\r\n\r\ninterface StyledLilManProps {\r\n  imageUrl: string\r\n};\r\n\r\nexport const StyledLilManGif = styled.div<StyledLilManProps>`\r\n  position:absolute;\r\n  width:100%;\r\n  height:100%;\r\n  left:50%;\r\n  top:50%;\r\n  transform: translate(-50%, -50%);\r\n  bottom:-2rem;\r\n  background: url(${p => p.imageUrl}) no-repeat center;\r\n  background-position:center;\r\n  background-size:contain;\r\n`;\r\n\r\ninterface LilManProps {\r\n  hintGiver: HintGiver,\r\n  onClick?: Function,\r\n  isTalking?: boolean,\r\n  hideFace?: boolean\r\n}\r\n\r\nexport function LilFace({hintGiver, onClick, isTalking = false, hideFace}: LilManProps) {\r\n  // helps prevent showing images before transition is done\r\n  if(hideFace) return null;\r\n  return (\r\n    <StyledLilManGif\r\n      imageUrl={isTalking ? hintGiver.talkingImage : hintGiver.idleImage}\r\n      onClick={(e) => onClick && onClick(e)}\r\n    />\r\n  );\r\n}\r\n","import { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { checkIfSolved, setGameStatus, submitAnswer } from '../../app/board-slice';\r\n\r\nconst StyledButton = styled.div`\r\n  border-radius: 1rem;\r\n  border: .4rem solid ${getColor('brown')};\r\n  cursor: pointer;\r\n  transition: background-color .1s, border-color .2s, box-shadow .15s, transform .15s;\r\n  text-align:center;\r\n  font-size:2.5rem;\r\n  padding: .5rem .5rem;\r\n  \r\n  &:active{\r\n    transform: translate(.35rem, .35rem);\r\n  }\r\n`;\r\n\r\nconst StyledSolvedButton = styled(StyledButton)`\r\n  padding: 1.5rem .5rem;\r\n\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('green')};\r\n  border-color: ${getColor('green_light')};\r\n  box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('green_light')};\r\n\r\n  &:hover{\r\n    border-color: ${getColor('white')};\r\n  }\r\n`;\r\n\r\nconst StyledHelpButton = styled(StyledButton)`\r\n  padding: 0.25rem .5rem;\r\n  color: ${getColor('brown_dark')};\r\n  background-color:${getColor('yellow')};\r\n  border-color: ${getColor('yellow_light')};\r\n  box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('yellow_light')};\r\n  \r\n  &:hover{\r\n    border-color: ${getColor('white')};\r\n  }\r\n  &:active{\r\n    background-color: ${getColor('yellow')};\r\n    border-color: ${getColor('yellow_light')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('yellow_light')};\r\n  }\r\n`;\r\n\r\nconst StyledProgressButton = styled(StyledButton)`\r\n  padding: 0.25rem .5rem;\r\n  color: ${getColor('purple')};\r\n  background-color:${getColor('brown_dark')};\r\n  border-color: ${getColor('purple')};\r\n  box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('purple')};\r\n  \r\n  &:hover{\r\n    color: ${getColor('pink')};\r\n    border-color: ${getColor('pink')};\r\n  }\r\n  &:active{\r\n    color: ${getColor('purple')};\r\n    background-color: ${getColor('brown_dark')};\r\n    border-color: ${getColor('purple')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('purple')};\r\n  }\r\n`;\r\n\r\nconst StyledContainer = styled.div`\r\n  ${StyledButton}{\r\n    margin:1rem;\r\n  }\r\n`;\r\n\r\nexport function BoardControls() {\r\n  const solved = useAppSelector(checkIfSolved);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const onSubmitGame = useCallback((solved:boolean, forceWin?: boolean) => {\r\n    dispatch(submitAnswer(forceWin || solved));\r\n  }, [ dispatch ]);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledHelpButton onClick={() => dispatch(setGameStatus('debug'))}>{'debug'}</StyledHelpButton>\r\n      <StyledHelpButton onClick={() => dispatch(setGameStatus('help'))}>{'HELP!'}</StyledHelpButton>\r\n      <StyledProgressButton onClick={() => dispatch(setGameStatus('progress'))}>{'progress'}</StyledProgressButton>\r\n      <StyledSolvedButton onClick={() => onSubmitGame(solved)}>{'SUBMIT'}</StyledSolvedButton>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from './store';\r\nimport { Coordinate } from '../types';\r\n\r\nexport interface UiState {\r\n  zoom: number,\r\n  position: Coordinate\r\n}\r\n\r\nconst initialState: UiState = {\r\n  zoom: 0.4,\r\n  position: [0, -25]\r\n};\r\n\r\nexport const uiSlice = createSlice({\r\n  name: 'ui',\r\n  initialState,\r\n  reducers: {\r\n    setZoom: (state: UiState, action: PayloadAction<number>) => {\r\n      state.zoom = action.payload;\r\n    },\r\n    setPosition: (state, action: PayloadAction<Coordinate>) => {\r\n      state.position = action.payload;\r\n    },\r\n    resetZoom: (state: UiState) => {\r\n      state.zoom = initialState.zoom;\r\n    },\r\n    resetPosition: (state: UiState) => {\r\n      state.position = initialState.position;\r\n    },\r\n  } \r\n});\r\n\r\nexport const { setZoom, setPosition, resetZoom, resetPosition } = uiSlice.actions;\r\n\r\nexport const getZoom = (state: RootState) => state.ui.zoom;\r\nexport const getPosition = (state: RootState) => state.ui.position;\r\n\r\nexport default uiSlice.reducer;","import { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getPosition, getZoom, resetPosition, resetZoom, setPosition, setZoom } from '../../app/ui-slice';\r\nimport { getColor } from '../../themes';\r\n\r\nconst StyledContainer = styled.div`\r\n  position:absolute;\r\n  right:0;\r\n  top:0;\r\n  padding-left: 1rem;\r\n  border: .25rem solid ${getColor('white')};\r\n  border-radius: 1rem;\r\n  color: ${getColor('white')};\r\n  background-color: ${getColor('brown')};\r\n  z-index:1;\r\n\r\n  >p{\r\n    font-size: 1.5rem;\r\n    margin-bottom: .5rem;\r\n    color: ${getColor('brown_light')};\r\n    text-align:center;\r\n  }\r\n\r\n  >div{\r\n    display:inline-block;\r\n    vertical-align: middle;\r\n    height: 6rem;\r\n  }\r\n`;\r\n\r\nconst StyledZoomContainer = styled.div`\r\n  margin-right: 1rem;\r\n`;\r\n\r\nconst StyledPanContainer = styled.div`\r\n  >button, >input {\r\n    display:inline-block;\r\n    vertical-align:middle;\r\n  }\r\n\r\n  >button {\r\n    margin-right: 1rem;\r\n  }\r\n\r\n`;\r\n\r\nconst StyledSlider = styled.input`\r\n  width: 5rem;\r\n  cursor: pointer;\r\n`\r\nconst PanSliderY = styled(StyledSlider)`\r\n  transform: rotate(90deg);\r\n  margin-left: -1rem;\r\n  margin-top:-1rem;\r\n`;\r\n\r\nconst StyledButton = styled.div`\r\n  font-size: 2rem;\r\n  margin-bottom: .5rem;\r\n  cursor: pointer;\r\n\r\n  &:hover{\r\n    color: ${getColor('green_light')}\r\n  }\r\n`;\r\n\r\nexport function PositionControls() {\r\n  const zoom = useAppSelector(getZoom);\r\n  const position = useAppSelector(getPosition);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onChangeZoom = useCallback((e) => {\r\n    dispatch(setZoom(e.target.value / 10));\r\n  }, [ dispatch ]);\r\n  \r\n  const onChangePositionX = useCallback((e) => {\r\n    dispatch(setPosition([+e.target.value, position[1]]));\r\n  }, [ dispatch, position ]);\r\n  \r\n  const onChangePositionY = useCallback((e) => {\r\n    dispatch(setPosition([position[0], +e.target.value]));\r\n  }, [ dispatch, position ]);\r\n\r\n  const onResetZoom = useCallback(() => {\r\n    dispatch(resetZoom());\r\n  }, [ dispatch ]);\r\n\r\n  const onResetPosition = useCallback(() => {\r\n    dispatch(resetPosition());\r\n  }, [ dispatch ]);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <p>{'- reposition board -'}</p>\r\n      <StyledZoomContainer>\r\n        <StyledButton onClick={onResetZoom} title={'reset zoom'}>{'ZOOM'}</StyledButton>\r\n        <StyledSlider type=\"range\" min={1} max={10} value={zoom * 10} onChange={onChangeZoom} id=\"zoomRange\" />\r\n      </StyledZoomContainer>\r\n      <StyledPanContainer>\r\n        <StyledButton onClick={onResetPosition} title={'reset pan'}>{'PAN'}</StyledButton>\r\n        <StyledSlider type=\"range\" min={-50} max={50} value={position[0]} onChange={onChangePositionX} id=\"xRange\" />\r\n        <PanSliderY type=\"range\" min={-50} max={50} value={position[1]} onChange={onChangePositionY} id=\"yRange\" />\r\n      </StyledPanContainer>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { CellObj, CellStatus, RawCell } from '../../types';\r\nimport { rotateCell, selectGridBox, selectGridLabels, selectGridInfo } from '../../app/board-slice';\r\nimport { BoardControls } from '../board/board-controls';\r\nimport { getPosition, getZoom } from '../../app/ui-slice';\r\nimport { PositionControls } from './position-controls';\r\n\r\n\r\nconst StyledBoardContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nconst StyledBoard = styled.div`\r\n  position:absolute;\r\n  left:50%;\r\n  top:40%;\r\n\r\n  display:grid;\r\n  grid-template-columns: 15rem 13rem 13rem 13rem; \r\n  grid-template-rows: 15rem 13rem 13rem 13rem; \r\n  column-gap: 2rem;\r\n  row-gap: 2rem;\r\n  color: ${getColor('brown_light')};\r\n\r\n  /* transform-origin:left; */\r\n\r\n  >div{\r\n    display:grid;\r\n    column-gap: 2rem;\r\n    row-gap: 2rem;\r\n  }\r\n`\r\n\r\nconst StyledLeftLabels = styled.div`\r\n  grid-column: 15rem;\r\n  grid-row: 2 / span 3;\r\n  \r\n  grid-template-columns: 15rem; \r\n  grid-template-rows: 13rem 13rem 13rem;\r\n`\r\n\r\ntype StyledLabelProps = {\r\n  gridSize: number\r\n}\r\nconst StyledLeftLabel = styled.div<StyledLabelProps>`\r\n  text-align:right;\r\n  ${p => p.gridSize === 4 ? css`\r\n    padding-top:0rem;\r\n    height: 25%;\r\n  `: css`\r\n    padding-top:1rem;\r\n    height: 33%;\r\n  `}\r\n\r\n  padding-right:1rem;\r\n  position:relative;\r\n  >span{\r\n    font-size: 3.5rem;\r\n    font-weight: 600;\r\n\r\n    position:absolute;\r\n    right:0;\r\n    white-space:nowrap;\r\n  }\r\n`\r\nconst StyledTopLabels = styled.div`\r\n  grid-column: 2 / span 3;\r\n  grid-row: 15rem;\r\n  \r\n  grid-template-columns: 13rem 13rem 13rem;\r\n  grid-template-rows: 15rem;\r\n`\r\nconst StyledTopLabel = styled.div<StyledLabelProps>`\r\n  display:inline-block;\r\n  ${p => p.gridSize === 4 ? css`\r\n    width: 25%;\r\n  `: css`\r\n    width: 33%;\r\n  `}\r\n  height: 100%;\r\n  position:relative;\r\n\r\n  span{\r\n    display:block;\r\n    position: absolute;\r\n\r\n    font-size: 3.5rem;\r\n    font-weight: 600;\r\n\r\n    ${p => p.gridSize === 4 ? css`\r\n      left: 1rem;\r\n    `: css`\r\n      left: 2rem;\r\n    `}\r\n    bottom: -1.5rem;\r\n    display: block;\r\n    white-space: nowrap;\r\n    transform-origin: left;\r\n    transform: rotate(-90deg);\r\n  }\r\n`\r\nconst StyledCells = styled.div`\r\n  grid-column: 2 / span 3;\r\n  grid-row: 2 / span 3;\r\n\r\n  grid-template-columns: 13rem 13rem 13rem;\r\n  grid-template-rows: 13rem 13rem 13rem;\r\n`\r\nconst StyledRawCellGroup = styled.div`\r\n  display:grid;\r\n  column-gap: .6rem;\r\n  row-gap: .6rem;\r\n`\r\ntype StyledCellGroupProps = {\r\n  gridSize: number,\r\n  cellRatio: string\r\n}\r\nconst StyledCellGroup = styled(StyledRawCellGroup)<StyledCellGroupProps>`\r\n  display:grid;\r\n  grid-template-columns: repeat(${p => p.gridSize}, ${p => p.cellRatio});\r\n  grid-template-rows: repeat(${p => p.gridSize}, ${p => p.cellRatio});\r\n  column-gap: .6rem;\r\n  row-gap: .6rem;\r\n\r\n  /* \r\n    grid-column: 1 i[ix]\r\n    grid-row: 2 i\r\n  */\r\n`\r\ntype StyledCellProps = {\r\n  status: CellStatus,\r\n  isSolution?: boolean\r\n}\r\nconst StyledCell = styled.div<StyledCellProps>`\r\n  border-radius: 1rem;\r\n  border: .4rem solid ${getColor('brown')};\r\n  cursor: pointer;\r\n  transition: background-color .1s, border-color .2s, box-shadow .15s, transform .15s;\r\n\r\n  ${p => p.status === 0 && css`\r\n    background-color:${getColor('brown')};\r\n    border-color: ${getColor('white')};\r\n    box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('white')};\r\n  `};\r\n  ${p => p.status === 1 && css`\r\n    background-color:${getColor('green')};\r\n    border-color: ${getColor('green_light')};\r\n    box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('green_light')};\r\n  `};\r\n  ${p => p.status === 2 && css`\r\n    background-color:${getColor('red_light')};\r\n    border-color: ${getColor('pink')};\r\n    box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('pink')};\r\n  `};\r\n  &:hover{\r\n    ${p => p.status === 0 && css`\r\n      border-color: ${getColor('pink')};\r\n    `};\r\n    ${p => p.status === 1 && css`\r\n      border-color: ${getColor('white')};\r\n    `};\r\n    ${p => p.status === 2 && css`\r\n      border-color: ${getColor('green_light')};\r\n    `};\r\n  }\r\n  \r\n  &:active{\r\n    transform: translate(.35rem, .35rem);\r\n\r\n    ${p => p.status === 0 && css`\r\n      background-color: ${getColor('red_light')};\r\n      border-color: ${getColor('pink')};\r\n      box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('pink')};\r\n    `};\r\n    ${p => p.status === 1 && css`\r\n      background-color: ${getColor('brown')};\r\n      border-color: ${getColor('white')};\r\n      box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('white')};\r\n    `};\r\n    ${p => p.status === 2 && css`\r\n      background-color: ${getColor('green')};\r\n      border-color: ${getColor('green_light')};\r\n      box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('green_light')};\r\n    `};\r\n  }\r\n`\r\nconst BlankCellGroup = styled(StyledRawCellGroup)`\r\n  background-color: ${getColor('white')};\r\n  opacity: .2;\r\n`\r\n\r\nconst StyledControls = styled.div`\r\n  grid-column: 1 / span 1;\r\n  grid-row: 1 / span 1;\r\n  position:absolute;\r\n  bottom:0;\r\n  right:0;\r\n`;\r\n\r\nexport function Board() {\r\n  const dispatch = useAppDispatch();\r\n  const grid = useAppSelector(selectGridBox);\r\n  const gridLabels = useAppSelector(selectGridLabels);\r\n  const gridInfo = useAppSelector(selectGridInfo);\r\n  const zoom = useAppSelector(getZoom);\r\n  const position = useAppSelector(getPosition);\r\n\r\n  const onClickCell = useCallback((cellIdx) => {\r\n    dispatch(rotateCell(cellIdx));\r\n  }, [ dispatch ]);\r\n\r\n  const cellRatio = useMemo(() => {\r\n    if(gridInfo.numValues === 3) {\r\n      return '30%';\r\n    } else if(gridInfo.numValues === 4) {\r\n      return '20%';\r\n    }\r\n    return `${Math.round(100 / gridInfo.numValues)}%`;\r\n  }, [ gridInfo.numValues ])\r\n\r\n  const renderCellGroup = (cellGroup: CellObj[], cgKey: string, gridSize: number, cellRatio: string, boardCell: RawCell) => {\r\n    // [0] check here cause this is all janky and the individual cells are undefined on load\r\n    if(cellGroup.length > 0 && cellGroup[0]){\r\n      return (\r\n        <StyledCellGroup \r\n          key={cgKey}\r\n          gridSize={gridSize}\r\n          cellRatio={cellRatio}\r\n          style={{gridRow: `${boardCell[0] + 1} / span 1`, gridColumn: `${boardCell[1] + 1} / span 1`}}\r\n        >\r\n          {cellGroup.map(cell => (\r\n            <StyledCell \r\n              key={`cell${cell?.idx}`}\r\n              status={cell.status}\r\n              isSolution={cell.isSolution}\r\n              onClick={() => onClickCell(cell.idx)}\r\n            />\r\n          ))}\r\n        </StyledCellGroup>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <BlankCellGroup \r\n        key={cgKey} \r\n        style={{gridRow: `${boardCell[0] + 1} / span 1`, gridColumn: `${boardCell[1] + 1} / span 1`}}\r\n      />\r\n    )\r\n  }\r\n\r\n  const tStyles = {\r\n    transform: `translate(${position[0]}%, ${position[1]}%) matrix(2.5,1.25,-2.5,1.25,-300,-0) scale(${zoom})`\r\n  };\r\n\r\n  return (\r\n    <StyledBoardContainer>\r\n      <PositionControls />\r\n      <StyledBoard style={tStyles}>\r\n        <StyledControls>\r\n          <BoardControls />\r\n        </StyledControls>\r\n        <StyledCells>\r\n          {grid.map((gridRow, grIdx) => (\r\n            gridRow.map((cellGroup, cgIdx) => renderCellGroup(cellGroup, `cg${cgIdx}`, gridInfo.numValues, cellRatio, [grIdx, cgIdx])\r\n          )))}\r\n        </StyledCells>\r\n        <StyledTopLabels>\r\n          {gridLabels[1].map((gl, glIdx) => (\r\n            <div key={`tl${glIdx}`}>\r\n              {gl.map((v,vIdx) => (\r\n                <StyledTopLabel key={`tv${vIdx}`} gridSize={gridInfo.numValues}>\r\n                  <span>{v.toUpperCase()}</span>\r\n                </StyledTopLabel>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </StyledTopLabels>\r\n        <StyledLeftLabels>\r\n          {gridLabels[0].map((gl, glIdx) => (\r\n            <div key={`ll${glIdx}`}>\r\n              {gl.map((v,vIdx) => (\r\n                <StyledLeftLabel key={`lv${vIdx}`} gridSize={gridInfo.numValues}>\r\n                  <span>{v.toUpperCase()}</span>\r\n                </StyledLeftLabel>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </StyledLeftLabels>\r\n\r\n      </StyledBoard>\r\n    </StyledBoardContainer>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { MouseEventHandler } from 'hoist-non-react-statics/node_modules/@types/react';\r\nimport { getColor } from '../themes';\r\n\r\nexport const StyledButton = styled.div`\r\n  border-radius: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color .1s, border-color .2s, box-shadow .15s, transform .15s;\r\n  text-align:center;\r\n  padding: 1.5rem .5rem;\r\n\r\n  span{\r\n    font-size:2.5rem;\r\n  }\r\n  \r\n  &:hover{\r\n    transform: translate(-.15rem, -.15rem);\r\n  }\r\n  &:active{\r\n    transform: translate(.45rem, .65rem);\r\n  }\r\n`\r\n\r\nconst StyledPositiveButton = styled(StyledButton)`\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('green')};\r\n  box-shadow: 0.4rem 0.5rem 0 0.4rem ${getColor('green_light')};\r\n\r\n  &:hover{\r\n    box-shadow: 0.6rem 0.75rem 0 0.4rem ${getColor('green_light')};\r\n  }\r\n  &:active{\r\n    background-color:${getColor('green')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.0rem ${getColor('green_light')};\r\n  }\r\n`;\r\n\r\nconst StyledNegativeButton = styled(StyledButton)`\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('red')};\r\n  box-shadow: 0.4rem 0.5rem 0 0.4rem ${getColor('red_light')};\r\n\r\n  &:hover{\r\n    box-shadow: 0.6rem 0.75rem 0 0.4rem ${getColor('red_light')};\r\n  }\r\n  &:active{\r\n    background-color:${getColor('red')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.0rem ${getColor('red_light')};\r\n  }\r\n`;\r\n\r\nconst StyledSpecialButton = styled(StyledButton)`\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('yellow_dark')};\r\n  box-shadow: 0.4rem 0.5rem 0 0.4rem ${getColor('yellow')};\r\n\r\n  &:hover{\r\n    box-shadow: 0.6rem 0.75rem 0 0.4rem ${getColor('yellow')};\r\n  }\r\n  &:active{\r\n    background-color:${getColor('yellow_dark')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.0rem ${getColor('yellow')};\r\n  }\r\n`;\r\n\r\n\r\nconst StyledNeutralButton = styled(StyledButton)`\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('brown_dark')};\r\n  box-shadow: 0.4rem 0.5rem 0 0.4rem ${getColor('brown')};\r\n\r\n  &:hover{\r\n    box-shadow: 0.6rem 0.75rem 0 0.4rem ${getColor('brown')};\r\n  }\r\n  &:active{\r\n    background-color:${getColor('brown_dark')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.0rem ${getColor('brown')};\r\n  }\r\n`;\r\n\r\ntype ButtonType = 'positive' | 'negative' | 'special' | 'neutral';\r\n\r\ninterface LBType {\r\n  text: string,\r\n  onClick?: MouseEventHandler,\r\n  buttonType?: ButtonType\r\n}\r\n\r\nexport function Button({ onClick, text, buttonType }: LBType) {\r\n  switch(buttonType){\r\n    case 'positive': return (\r\n      <StyledPositiveButton onClick={onClick}><span>{text}</span></StyledPositiveButton>\r\n    )\r\n    case 'negative': return (\r\n      <StyledNegativeButton onClick={onClick}><span>{text}</span></StyledNegativeButton>\r\n    )\r\n    case 'special': return (\r\n      <StyledSpecialButton onClick={onClick}><span>{text}</span></StyledSpecialButton>\r\n    )\r\n    default: return (\r\n      <StyledNeutralButton onClick={onClick}><span>{text}</span></StyledNeutralButton>\r\n    )\r\n  }\r\n}\r\n","import styled from 'styled-components';\r\nimport { Button, StyledButton } from '../../../components/button';\r\nimport { getColor } from '../../../themes';\r\n\r\n// basic positioning all modals should have\r\nexport const StyledModalAbstract = styled.div`\r\n  position:absolute;\r\n  width:100%;\r\n  height:100%;\r\n  \r\n  left:50%;\r\n  top:50%;\r\n  transform: translate(-50%, -50%);\r\n  \r\n  display:grid;\r\n  grid-template-columns: 5rem auto 5rem; \r\n  grid-template-rows: min-content auto min-content;\r\n\r\n  padding:1rem;\r\n`\r\n\r\nexport const StyledModalContainer = styled(StyledModalAbstract)`\r\n  max-width:80%;\r\n  max-height:80%;\r\n  border-radius:2rem;\r\n\r\n  background-color: ${getColor('brown_light')};\r\n  color: ${getColor('brown_dark')};\r\n  border: 0.75rem solid ${getColor('brown_dark')};\r\n`;\r\n\r\nexport const StyledModalHeader = styled.div`\r\n  grid-column: 1 / span 3;\r\n  grid-row: 1 / span 1;\r\n  text-align:center;\r\n`;\r\n\r\nexport const StyledModalBody = styled.ul`\r\n  grid-column: 1 / span 3;\r\n  grid-row: 2 / span 1;\r\n\r\n  width:100%;\r\n  height:100%;\r\n  padding: .5rem 3rem;\r\n  overflow-y:auto;\r\n`;\r\n\r\nexport const StyledModalFooter = styled.div`\r\n  grid-column: 1 / span 3;\r\n  grid-row: 3 / span 1;\r\n\r\n  padding: 1rem;\r\n\r\n  >${StyledButton}{\r\n    margin: 2rem 0rem;\r\n  }\r\n`;\r\n\r\nexport function BasicModal() {\r\n  return (\r\n    <StyledModalContainer>\r\n      <StyledModalHeader>\r\n        <h1>{'BASIC'}</h1>\r\n      </StyledModalHeader>\r\n      \r\n      <StyledModalBody>\r\n        \r\n      </StyledModalBody>\r\n      <StyledModalFooter>\r\n        <Button text={'OK'}/>\r\n      </StyledModalFooter>\r\n    </StyledModalContainer>\r\n  );\r\n}\r\n","import { useAppDispatch } from '../../../app/hooks';\r\nimport { Button } from '../../../components/button';\r\nimport { restartLevel, setGameStatus, startNextLevel } from '../../../app/board-slice';\r\nimport { StyledModalBody, StyledModalContainer, StyledModalFooter, StyledModalHeader } from './basic';\r\n\r\nexport function WinModal() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <StyledModalContainer>\r\n      <StyledModalHeader>\r\n        <h1>{'CORRECT!'}</h1>\r\n      </StyledModalHeader>\r\n\r\n      <StyledModalBody>\r\n        \r\n      </StyledModalBody>\r\n      <StyledModalFooter>\r\n        <Button buttonType={'special'} text={'REPLAY LEVEL'} onClick={() => dispatch(startNextLevel())} />\r\n        <Button text={'NEXT LEVEL'} onClick={() => dispatch(startNextLevel())} />\r\n      </StyledModalFooter>\r\n    </StyledModalContainer>\r\n  );\r\n}\r\n\r\nexport function LoseModal() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <StyledModalContainer>\r\n      <StyledModalHeader>\r\n        <h1>{'INCORRECT!'}</h1>\r\n      </StyledModalHeader>\r\n\r\n      <StyledModalBody>\r\n        <p>{'Every green cell must match the solution'}</p>\r\n      </StyledModalBody>\r\n      <StyledModalFooter>\r\n        <Button buttonType={'negative'} text={'RESET LEVEL'} onClick={() => dispatch(restartLevel())} />\r\n        <Button buttonType={'special'} text={'SKIP TO NEXT LEVEL!'} onClick={() => dispatch(startNextLevel())} />\r\n        <Button text={'KEEP TRYING'} onClick={() => dispatch(setGameStatus('playing'))} />\r\n      </StyledModalFooter>\r\n    </StyledModalContainer>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks';\r\nimport { selectAttributes, selectRenderedSolution, setGameStatus } from '../../../app/board-slice';\r\nimport { StyledModalBody, StyledModalContainer, StyledModalFooter, StyledModalHeader } from './basic';\r\nimport { Button } from '../../../components/button';\r\nimport { getColor } from '../../../themes';\r\n\r\nconst StyledSolution = styled.div`\r\n  margin-top: 2rem;\r\n\r\n  table{\r\n    width:100%;\r\n    border-collapse: collapse;\r\n    tr{\r\n      border: 2px solid ${getColor('white')};\r\n    }\r\n    th, td{\r\n      padding:.5rem;\r\n      text-align:center;\r\n      border: 2px solid ${getColor('white')};\r\n    }\r\n  }\r\n`\r\n\r\nexport function DebugModal() {\r\n  const dispatch = useAppDispatch();\r\n  const renderedSolution = useAppSelector(selectRenderedSolution);\r\n  const attributes = useAppSelector(selectAttributes);\r\n\r\n  return (\r\n    <StyledModalContainer>\r\n      <StyledModalHeader>\r\n        <h1>{'DEBUG'}</h1>\r\n      </StyledModalHeader>\r\n      \r\n      <StyledModalBody>\r\n        <StyledSolution>\r\n          <p>{'DEBUG SOLUTION'}</p>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                {attributes.map((attr, idx) => (\r\n                  <th key={idx}><span>{`group ${idx + 1}`}</span></th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {renderedSolution?.map((rS, idx) => (\r\n                <tr key={idx}>\r\n                  {rS.map((rSe, rSeIdx) => (\r\n                    <td key={`${idx}-${rSeIdx}`}><span>{rSe}</span></td>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </StyledSolution>\r\n      </StyledModalBody>\r\n      <StyledModalFooter>\r\n        <Button text={'OK'} onClick={() => dispatch(setGameStatus('playing'))} />\r\n      </StyledModalFooter>\r\n    </StyledModalContainer>\r\n  );\r\n}\r\n","import { useAppDispatch, useAppSelector } from '../../../app/hooks';\r\nimport { getLevelIdx, resumeLevel, startLevel } from '../../../app/board-slice';\r\nimport { Button } from '../../../components/button';\r\nimport { StyledModalBody, StyledModalContainer, StyledModalFooter, StyledModalHeader } from './basic';\r\nimport { resetData } from '../../../utils/localstorage';\r\n\r\nexport function SplashModal() {\r\n  const dispatch = useAppDispatch();\r\n  const levelIdx = useAppSelector(getLevelIdx);\r\n\r\n  return (\r\n    <StyledModalContainer>\r\n      <StyledModalHeader>\r\n        <h1>{'TRUTH TABLES'}</h1>\r\n      </StyledModalHeader>\r\n      \r\n      <StyledModalBody style={{ textAlign:'center' }}>\r\n      {levelIdx > -1 && (\r\n        <>\r\n          <p>{'welcome back!'}</p>\r\n          <p>{'saves are work in progress and will be reset often.'}</p>\r\n        </>\r\n      ) }\r\n      </StyledModalBody>\r\n\r\n      <StyledModalFooter>\r\n        {levelIdx > -1 ? (\r\n          <>\r\n            <Button buttonType=\"negative\" text={'CLEAR SAVE'} onClick={() => resetData()} />\r\n            <Button text={'CONTINUE SAVED'} onClick={() => dispatch(resumeLevel(levelIdx))} />\r\n          </>\r\n        ):(\r\n          <>\r\n            <Button text={'NEW GAME'} onClick={() => dispatch(startLevel(0))} />\r\n          </>\r\n        )}\r\n      </StyledModalFooter>\r\n    </StyledModalContainer>\r\n  );\r\n}","import styled, { css } from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks';\r\nimport { Button } from '../../../components/button';\r\nimport { selectAllLevelInfo, setGameStatus, startLevel } from '../../../app/board-slice';\r\nimport { getColor } from '../../../themes';\r\nimport { LevelInfo, RenderedMenuGroup } from '../../../types';\r\nimport { useCallback } from 'react';\r\n\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport { StyledModalBody, StyledModalContainer, StyledModalFooter, StyledModalHeader } from './basic';\r\n\r\nexport const StyledBody = styled(StyledModalBody)`\r\n  border: .75rem solid ${getColor('brown_dark')};\r\n  background-color: ${getColor('brown')};\r\n  border-radius: 2rem;\r\n\r\n  li{\r\n    list-style: none;\r\n    padding:1rem 0;\r\n    margin:0;\r\n  }\r\n`;\r\n\r\ninterface StyledLevelEntryProps {\r\n  current?: boolean,\r\n  isEven: boolean\r\n}\r\nexport const StyledLevelEntry = styled.li<StyledLevelEntryProps>`\r\n  width:100%;\r\n  border: .5rem dashed transparent;\r\n  transition: border-color .2s ease-out;\r\n\r\n  color: ${getColor('brown_light')};\r\n  ${p => p.current && css`\r\n    border-color: ${getColor('green')};\r\n  `}\r\n\r\n  ${p => p.isEven ? css`\r\n    background-color: rgba(53, 18, 14, .5);\r\n  `: css`\r\n    background-color: rgba(53, 18, 14, .3);\r\n  `}\r\n\r\n  cursor: pointer;\r\n  &:hover{\r\n    color: ${getColor('white')};\r\n    border-color: ${getColor('brown_light')};\r\n  }\r\n\r\n  display:grid;\r\n  grid-template-columns: 4rem auto 5rem;\r\n  gap: .5rem;\r\n  justify-items:middle;\r\n  align-items: middle;\r\n  justify-content: middle;\r\n\r\n  >span{\r\n    margin: auto 0;\r\n    font-size: 3rem;\r\n\r\n    &:last-child{\r\n      font-size: 2rem;\r\n    }\r\n  }\r\n`;\r\n\r\ninterface StyledCompletedProps {\r\n  completed?: boolean\r\n}\r\n\r\nexport const StyledCompleted = styled.div<StyledCompletedProps>`\r\n  width: 2.5rem;\r\n  height: 2.5rem;\r\n  margin: .25rem auto 0 auto;\r\n  border-radius: 50%;\r\n  padding: 1rem;\r\n  background-color: ${getColor('brown')};\r\n\r\n  >svg{\r\n    opacity:0;\r\n    color: ${getColor('brown_light')};\r\n    font-size:2.5rem;\r\n    margin-left:-1rem;\r\n    margin-top:-1rem;\r\n  }\r\n\r\n  ${p => p.completed ? css`\r\n    >svg{\r\n      opacity:1;\r\n    }\r\n  }\r\n  `: css`\r\n  `}\r\n`;\r\n\r\nexport const StyledGroupEntry = styled.li`\r\n  h2{\r\n    margin-left:-1rem;\r\n    color: ${getColor('brown_light')};\r\n  }\r\n\r\n  hr{\r\n    color: ${getColor('brown_light')};\r\n    background: none;\r\n    background-color: ${getColor('brown_light')};\r\n    border: 0;\r\n    height:.5rem;\r\n    margin: .5rem 0 .5rem 0;\r\n  }\r\n`;\r\n\r\ninterface LevelGroupEntryProps {\r\n  levelGroup: RenderedMenuGroup,\r\n  startLevel: Function\r\n}\r\nexport function LevelGroupEntry({levelGroup, startLevel}: LevelGroupEntryProps) {\r\n  return (\r\n    <StyledGroupEntry>\r\n      <h2>{levelGroup.title}</h2>\r\n      <hr/>\r\n      <ul>\r\n        {levelGroup.levels.map((lI, idx) => (\r\n          <LevelInfoEntry key={idx} data={lI} idx={idx} startLevel={startLevel}/>\r\n        ))}\r\n      </ul>\r\n    </StyledGroupEntry>\r\n  )\r\n}\r\n\r\ninterface LevelInfoEntryProps {\r\n  data: LevelInfo,\r\n  startLevel: Function,\r\n  idx: number\r\n}\r\nexport function LevelInfoEntry({data, idx, startLevel}: LevelInfoEntryProps) {\r\n  return (\r\n    <StyledLevelEntry current={data.current} isEven={idx % 2 === 0} onClick={() => startLevel(data.level)}>\r\n\r\n      <StyledCompleted completed={data.completed}>\r\n        <DoneIcon />\r\n      </StyledCompleted>\r\n      <span>{`${data.title}`}</span>\r\n      <span>{`(${data.layout})`}</span>\r\n    </StyledLevelEntry>\r\n  )\r\n}\r\n\r\nexport function ProgressModal() {\r\n  const dispatch = useAppDispatch();\r\n  const levelInfo = useAppSelector(selectAllLevelInfo);\r\n\r\n  const onStartLevel = useCallback((idx => {\r\n    dispatch(startLevel(idx))\r\n  }), [dispatch]);\r\n\r\n  return (\r\n    <StyledModalContainer>\r\n      <StyledModalHeader>\r\n        <h1>{'PROGRESS'}</h1>\r\n      </StyledModalHeader>\r\n      \r\n      <StyledBody>\r\n        {levelInfo.map((lI, idx) => (\r\n          <LevelGroupEntry key={idx} levelGroup={lI} startLevel={onStartLevel}/>\r\n        ))}\r\n      </StyledBody>\r\n      <StyledModalFooter>\r\n        <Button text={'OK'} onClick={() => dispatch(setGameStatus('playing'))} />\r\n      </StyledModalFooter>\r\n    </StyledModalContainer>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { useAppDispatch } from '../../../app/hooks';\r\nimport { setGameStatus } from '../../../app/board-slice';\r\nimport { Button } from '../../../components/button';\r\nimport { getColor } from '../../../themes';\r\nimport { resetData } from '../../../utils/localstorage';\r\nimport { StyledModalBody, StyledModalContainer, StyledModalFooter, StyledModalHeader } from './basic';\r\n\r\nconst StyledInstructions = styled.ul`\r\n  text-align:left;\r\n`;\r\n\r\nconst StyledWebsiteLink = styled.a`\r\n  font-size: 3rem;\r\n  color: ${getColor('black')};\r\n\r\n  &:hover{\r\n    color: ${getColor('white')};\r\n  }\r\n`;\r\n\r\nexport function HelpModal() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <StyledModalContainer>\r\n      <StyledModalHeader>\r\n        <h1>{'HELP'}</h1>\r\n      </StyledModalHeader>\r\n      \r\n      <StyledModalBody>\r\n        <StyledInstructions>\r\n          <li><p>{'Click the characters at the bottom of the screen to reveal clues about the puzzle'}</p></li>\r\n          <li><p>{'Click the grid cells to cycle between RED (no) and GREEN (yes)'}</p></li>\r\n          <li><p>{'After selecting all of the correct GREEN tiles, click SUBMIT to see if you have the answer correct'}</p></li>\r\n          <li><p>{'The RED tiles do not need to be filled in to solve the puzzle, but they can be used to help you rule out information!'}</p></li>\r\n          <li><p>{'Each attribute combination can only be used once'}</p></li>\r\n          <li><p>{'You may have to iterate through the clues multiple times to arrive at an answer'}</p></li>\r\n        </StyledInstructions>\r\n        \r\n      </StyledModalBody>\r\n      <StyledModalFooter>\r\n        <Button text={'CLEAR SAVE'} buttonType=\"negative\" onClick={() => resetData()} />\r\n        <Button text={'OK'} onClick={() => dispatch(setGameStatus('playing'))} />\r\n        <StyledWebsiteLink href=\"https://www.thomasyancey.com\" target=\"_blank\" title=\"see some of my other stuff\">{'thomasyancey.com'}</StyledWebsiteLink>\r\n      </StyledModalFooter>\r\n    </StyledModalContainer>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { GameStatus } from '../../types';\r\nimport { getGameStatus } from '../../app/board-slice';\r\nimport { WinModal, LoseModal } from './modals/winlose';\r\nimport { DebugModal } from './modals/debug';\r\nimport { SplashModal } from './modals/splash';\r\nimport { ProgressModal } from './modals/progress';\r\nimport { HelpModal } from './modals/help';\r\n\r\nconst StyledContainer = styled.div`\r\n  position:fixed;\r\n  left:0;\r\n  top:0;\r\n  right:0;\r\n  bottom:0;\r\n  z-index:5;\r\n`;\r\n\r\nconst StyledModalBg = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  right:0;\r\n  top:0;\r\n  bottom:0;\r\n  background-color: ${getColor('brown')};\r\n  opacity: .95;\r\n  z-index:-1;\r\n`;\r\n\r\nexport const getModal = (gameStatus: GameStatus) => {\r\n  switch(gameStatus){\r\n    case 'start': return <SplashModal />\r\n    case 'roundWin': return <WinModal />\r\n    case 'invalidAnswer': return <LoseModal />\r\n    case 'help': return <HelpModal />\r\n    case 'debug': return <DebugModal />\r\n    case 'progress': return <ProgressModal />\r\n    default: return null;\r\n  }\r\n}\r\n\r\nexport function Modal() {\r\n  const gameStatus = useAppSelector(getGameStatus);\r\n  const modal = getModal(gameStatus);\r\n  if(!modal) return null;\r\n\r\n  return (\r\n    <StyledContainer>\r\n      {modal}\r\n      <StyledModalBg />\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { useAppDispatch } from '../../app/hooks';\r\nimport { getGameStatus, resetMatrix, selectLevelData } from '../../app/board-slice';\r\nimport { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function RuleMaster() {\r\n  const dispatch = useAppDispatch();\r\n  const levelData = useSelector(selectLevelData);\r\n  const gameStatus = useSelector(getGameStatus);\r\n\r\n  // eventually, should move this logic into the slice somehow\r\n  useEffect(() => {\r\n    if(levelData){\r\n      if(gameStatus === 'loading'){\r\n        dispatch(resetMatrix({ levelData }));\r\n      } else if(gameStatus === 'loadingResume'){\r\n        dispatch(resetMatrix({ levelData, resume: true }));\r\n      }\r\n    }\r\n  }, [dispatch, levelData, gameStatus]);\r\n\r\n  return null;\r\n}\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\ntype SpeechTextProps = {\r\n  text: string,\r\n  onTextComplete: Function,\r\n  delay?: number\r\n}\r\n\r\nlet innerTimer: NodeJS.Timeout;\r\nlet innerText = '';\r\n\r\nexport function SpeechText({ text, onTextComplete, delay }: SpeechTextProps) {\r\n  const [ curText, setCurText ] = useState('');\r\n  const [ isComplete, setIsComplete ] = useState(false);\r\n  const getNextText = (partial: string, full: string) => {\r\n    return full.slice(0, partial.length + 1);\r\n  }\r\n\r\n  const nextTextPlease = useCallback((fullText: string, reset?: boolean, delay?: number) => {\r\n    if(reset) innerText = '';\r\n    const startDelay = delay ? delay : 50;\r\n    innerTimer = setTimeout(() => {\r\n      innerText = getNextText(innerText, fullText);\r\n      setCurText(innerText);\r\n\r\n      if(innerText.length !== fullText.length){\r\n        nextTextPlease(fullText);\r\n      }else{\r\n        setIsComplete(true);\r\n      }\r\n    }, startDelay);\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setCurText('');\r\n    setIsComplete(false);\r\n    nextTextPlease(text, true, delay);\r\n\r\n    return () => {\r\n      clearTimeout(innerTimer);\r\n    }\r\n  }, [ text, nextTextPlease, delay ]);\r\n\r\n  useEffect(() => {\r\n    if(isComplete) onTextComplete();\r\n  }, [ isComplete, onTextComplete ]);\r\n  \r\n  return (\r\n    <p>{curText}</p>\r\n  );\r\n}\r\n","import { useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { getActiveHintIdx, selectHints, setActiveHint } from '../../app/board-slice';\r\n\r\nconst StyledContainer = styled.div`\r\n  pointer-events: none;\r\n`;\r\n\r\nconst StyledControls = styled.ul`\r\n  text-align:center;\r\n  >div{\r\n    display:inline-block;\r\n    pointer-events: all;\r\n  }\r\n`;\r\n\r\ninterface StyledHintProps {\r\n  isActive?: boolean;\r\n};\r\n\r\nconst StyledHintHint = styled.div`\r\n  position: absolute;\r\n  bottom: 100%;\r\n  font-size: 1.5rem;\r\n  left:50%;\r\n  transform: translateX(-50%);\r\n  color: ${getColor('brown_light')};\r\n`\r\n\r\nconst StyledHint = styled.div<StyledHintProps>`\r\n  cursor: pointer;\r\n\r\n  background-color: ${getColor('brown_light')};\r\n\r\n  width: 5rem;\r\n  height: 5rem;\r\n  margin: .25rem;\r\n  border: .75rem solid ${getColor('brown')};\r\n  border-radius: 1.5rem;\r\n  transition: all .3s;\r\n\r\n  &:hover{  \r\n    width: 7rem;\r\n    height: 6rem;\r\n    background-color: ${getColor('yellow_light')};\r\n\r\n    transition: all .3s;\r\n  }\r\n\r\n  ${p => p.isActive && css`\r\n    background-color: ${getColor('yellow')};\r\n\r\n    width: 8rem;\r\n    height: 8rem;\r\n\r\n    &:hover{  \r\n      width: 9rem;\r\n      height: 9rem;\r\n      background-color: ${getColor('pink')};\r\n\r\n      transition: all .3s;\r\n    }\r\n  `}\r\n`;\r\n\r\nexport function HintPicker() {\r\n  const activeHintIdx = useAppSelector(getActiveHintIdx);\r\n  const hints = useAppSelector(selectHints);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const onCloseHint = useCallback(() => {\r\n    dispatch(setActiveHint(-1));\r\n  }, [dispatch]);\r\n\r\n  const onClickHint = useCallback((hintIdx) => {\r\n    dispatch(setActiveHint(hintIdx));\r\n  }, [ dispatch ]);\r\n\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledControls>\r\n        {hints?.map((hint, idx) => \r\n          idx === activeHintIdx ? (\r\n            <StyledHint \r\n              key={idx}\r\n              onClick={() => onCloseHint()}\r\n              isActive={true}\r\n            />\r\n          ):(\r\n            <StyledHint \r\n              key={idx}\r\n              onClick={() => onClickHint(idx)}\r\n            />\r\n          )\r\n        )}\r\n        {activeHintIdx === -1 && <StyledHintHint>{'click the clues to solve the puzzle'}</StyledHintHint>}\r\n      </StyledControls>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { getColor, mixinFontFamily } from '../../themes';\r\nimport { SpeechText } from '../../components/speech-text';\r\nimport { selectActiveHint, selectLevelInfo } from '../../app/board-slice';\r\nimport { HintPicker } from './hint-picker';\r\nimport { NewHintGiver } from './new-hint-giver';\r\n\r\nconst StyledHintGiver = styled.div`\r\n  grid-column: 1 / span 1;\r\n  grid-row: 2 / span 2;\r\n  position:relative;\r\n  z-index:1;\r\n`;\r\ninterface StyledBannerProps {\r\n  completed?: boolean\r\n}\r\nconst StyledBanner = styled.div<StyledBannerProps>`\r\n  grid-column: 1 / span 2;\r\n  grid-row: 3 / span 1;\r\n\r\n  background-color: ${getColor('brown_light')};\r\n  border-top: .75rem solid ${getColor('brown')};\r\n\r\n  display:grid;\r\n  grid-template-columns: 27rem auto;\r\n  grid-template-rows: min-content auto;\r\n\r\n  z-index:1;\r\n  /* ${p => p.completed && css`\r\n    background-color: ${getColor('green_light')};\r\n    border-top: .75rem solid ${getColor('green_dark')};\r\n    color: ${getColor('green_dark')};\r\n  `} */\r\n`;\r\n\r\n\r\nconst StyledTitleBox = styled.div`\r\n  grid-column: 2 / span 1;\r\n  grid-row: 1 / span 1;\r\n\r\n  h2{\r\n    font-size: 3rem;\r\n    padding: .5rem;\r\n    padding-top: 1rem;\r\n\r\n    margin: auto 0;\r\n  }\r\n\r\n`\r\n\r\nconst StyledHintBox = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  grid-column: 2 / span 1;\r\n  grid-row: 2 / span 1;\r\n  padding: 0 2rem;\r\n\r\n  p {\r\n    ${mixinFontFamily('speech')};\r\n    font-size: min(4vw, 5rem);\r\n    line-height: 75%;\r\n  }\r\n`;\r\n\r\nconst StyledControls = styled.div`\r\n  grid-column: 2 / span 1;\r\n  grid-row: 1 / span 1;\r\n  position:relative;\r\n\r\n  >div{\r\n    position:absolute;\r\n    left:50%;\r\n    transform:translateX(-50%);\r\n\r\n    bottom: calc(100% - 1.5rem);\r\n    width:100%;\r\n  }\r\n`;\r\n\r\nexport function InfoPanel() {\r\n  const [ isTalking, setIsTalking ] = useState(true);\r\n  const hint = useAppSelector(selectActiveHint);\r\n  const levelInfo = useAppSelector(selectLevelInfo);\r\n\r\n  const titleText = useMemo(() => {\r\n    return `${levelInfo?.completed ? '(solved) ' : ''}Level ${(levelInfo?.level || 0) + 1}: ${levelInfo?.title}`\r\n  }, [levelInfo]);\r\n\r\n  const hintText = useMemo(() => {\r\n    return hint ? hint.text : ''\r\n  }, [ hint ]);\r\n  \r\n  const description = useMemo(() => \r\n    (levelInfo?.description || null)\r\n  , [ levelInfo ]);\r\n\r\n  useEffect(() => {\r\n    setIsTalking(true);\r\n  }, [ hint, setIsTalking ]);\r\n\r\n  const onTextComplete = useCallback(() => {\r\n    setIsTalking(false);\r\n  }, [ setIsTalking ]);\r\n\r\n  if(!description) return null;\r\n\r\n\r\n  return (\r\n    <>\r\n      <StyledBanner completed={levelInfo?.completed}>\r\n        <StyledControls>\r\n          <HintPicker />\r\n        </StyledControls>\r\n        <StyledHintBox>\r\n          {hint ? (\r\n            <SpeechText text={hintText} onTextComplete={onTextComplete} delay={750} />\r\n          ) : (\r\n            <SpeechText text={description} onTextComplete={onTextComplete} delay={500} />\r\n          )}\r\n        </StyledHintBox>\r\n        <StyledTitleBox>\r\n          <h2>{titleText}</h2>\r\n        </StyledTitleBox>\r\n      </StyledBanner>\r\n      <StyledHintGiver>\r\n        <NewHintGiver isTalking={isTalking} />\r\n      </StyledHintGiver>\r\n    </>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { getColor } from '../../themes';\r\nimport { getGameReady } from '../../app/board-slice';\r\nimport { Board } from '../board';\r\nimport { Modal } from '../modal';\r\nimport { useSelector } from 'react-redux';\r\nimport { RuleMaster } from './rulemaster';\r\nimport { InfoPanel } from '../info-panel';\r\n\r\nconst StyledContainer = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  bottom:0;\r\n  right:0;\r\n  background-color: ${getColor('brown')};\r\n  color: ${getColor('brown_dark')};\r\n  overflow: hidden;\r\n\r\n  display:grid;\r\n  grid-template-columns: 27rem auto;\r\n  grid-template-rows: auto 30% 15rem;\r\n`;\r\n\r\nconst StyledBody = styled.div`\r\n  grid-column: 1 / span 2;\r\n  grid-row: 1 / span 2;\r\n`;\r\n\r\nexport function Main() {\r\n  const gameReady = useSelector(getGameReady);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <RuleMaster />\r\n      <Modal />\r\n      <StyledBody>\r\n        {gameReady && <Board />}\r\n      </StyledBody>\r\n      <InfoPanel />\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { HashRouter, Route, Routes } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Main } from './scenes/main';\r\n\r\nexport const ScStage = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  right:0;\r\n  bottom:0;\r\n`\r\n\r\nfunction App() {\r\n  const routes = [\r\n    {\r\n      route: '/',\r\n      text: 'Main',\r\n      element: <Main/>\r\n    }\r\n  ]\r\n  \r\n  return (\r\n    <HashRouter>\r\n      <ScStage>\r\n        <Routes>\r\n          {routes.map((p, i) => (\r\n            <Route key={i} path={p.route} element={p.element} />\r\n          ))}\r\n        </Routes>\r\n      </ScStage>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport { loadState } from '../utils/localstorage';\r\nimport boardReducer from './board-slice';\r\nimport uiReducer from './ui-slice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    board: boardReducer,\r\n    ui: uiReducer\r\n  },\r\n  preloadedState: loadState()\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './themes/fonts.css';\r\nimport GlobalStyle from './themes/';\r\nimport { throttle } from 'throttle-debounce';\r\nimport { saveSate } from './utils/localstorage';\r\n\r\n//pattern from https://dev.to/igorovic/simplest-way-to-persist-redux-state-to-localstorage-e67\r\n\r\nstore.subscribe(\r\n  throttle(1000, () => {\r\n    // saveSate({\r\n    //   ui: store.getState().ui,\r\n    //   // board: {\r\n    //   //   levelIdx: store.getState().board.levelIdx\r\n    //   // }\r\n    // });\r\n    saveSate(store.getState())\r\n  })\r\n);\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n      <GlobalStyle />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { HintGiver, RawCell, LevelData, LevelMenuGroup } from '../../types';\r\n\r\nexport const LEVELMENU: LevelMenuGroup[] = [\r\n  {\r\n    title: 'tutorial',\r\n    levels: [ 0 ]\r\n  },\r\n  {\r\n    title: 'easy',\r\n    levels: [ 1 ]\r\n  },\r\n  {\r\n    title: 'medium',\r\n    levels: [ 2 ]\r\n  },\r\n  {\r\n    title: 'hard',\r\n    levels: []\r\n  }\r\n]\r\n/**\r\n * The attributes that defined the thingies this level\r\n */\r\nexport const LEVELDATA: LevelData[] = [\r\n  {\r\n    title: 'Animals Doing People Jobs',\r\n    description: 'Three animals are looking for jobs.',\r\n    layout: '2x3',\r\n    attributes: [\r\n      [ 'monkey', 'fish', 'frog' ],\r\n      [ 'firefighter', 'dentist', 'clown' ]\r\n    ],\r\n    solution:[\r\n      [ 0, 2 ], // monkey clown\r\n      [ 1, 0 ], // fish firefighter\r\n      [ 2, 1 ]  // frog dentist\r\n    ],\r\n    hints:[\r\n      ['The fish hopes they get to use that trampoline at least once.', 'skull'],\r\n      ['Everyone knows that clowns disintegrate when they touch water.', 'cactoid']\r\n    ],\r\n  },\r\n  {\r\n    title: 'Food Chain',\r\n    description: 'A hiker, a camper, and a birder wandered in the woods. So did some apex predators. Who got eaten by what?',\r\n    layout: '3x3',\r\n    attributes: [\r\n      [ 'hiker', 'camper', 'birder' ],\r\n      [ 'first meal', 'second feast', 'last dessert' ],\r\n      [ 'mountain lion', 'escaped tiger', 'bear' ]\r\n    ],\r\n    solution:[\r\n      [ 0, 2, 2 ], // hiker last bear \r\n      [ 1, 0, 0 ], // camper first lion \r\n      [ 2, 1, 1 ]  // birder second tiger\r\n    ],\r\n    hints:[ \r\n      ['The camper loved cats, well.. used to love cats.'],\r\n      ['The mountain lion ate before the tiger.'],\r\n      ['The hiker walked past a tiger with a huge belly.'],\r\n      ['The bird lover was eaten right after the camper.']\r\n    ],\r\n  },\r\n  {\r\n    title: 'Pirate Predicament',\r\n    description: 'A crew of pirates are trying to find the treasure they buried, they don\\'t even remember how they did it!',\r\n    layout: '3x4',\r\n    attributes: [\r\n      [ 'Blue Beard', 'Carl the Skinless', 'Stank Tooth', 'Gravy Bones' ],\r\n      [ 'Gold Doubloons', 'Skull with Gold Teeth', 'Just an Old Boot', 'A Book of Curses' ],\r\n      [ 'Message in a Bottle', 'Treasure Map', 'Grog-induced Dream', 'A Sea Shanty' ]\r\n    ],\r\n    solution:[\r\n      [ 0, 2, 1 ],\r\n      [ 1, 3, 0 ],\r\n      [ 2, 1, 3 ],\r\n      [ 3, 0, 2 ]\r\n    ],\r\n    hints:[ \r\n      ['Blue Beard will not be happy with his treasure', 'face1_pirate'],\r\n      [`The message in a bottle reads \"yarrrr read me treasure and ye skin will melt off. just speakin' from experience\"`, 'skull_pirate'],\r\n      ['The valuable treasures were not written down', 'skull_pirate'],\r\n      ['Gravy bones is always drunk, it finally did something good for him', 'face1_pirate'],\r\n      ['Stank tooths treasure has to do with uh, teeth.', 'face1_pirate']\r\n    ],\r\n  },\r\n  {\r\n    title: '4 attributes, 3 values',\r\n    description: 'this puzzle has 4 attributes with 3 values. It doesnt work yet.',\r\n    layout: '4x3',\r\n    attributes: [\r\n      [ 'monkey', 'frog', 'fish' ],\r\n      [ 'first', 'second', 'last' ],\r\n      [ 'happy', 'angry', 'sad' ],\r\n      [ 'firefighter', 'dentist', 'clown' ]\r\n    ],\r\n    solution:[\r\n      [ 0, 0, 0 ],\r\n      [ 1, 1, 1 ],\r\n      [ 2, 2, 2 ],\r\n      [ 3, 3, 3 ]\r\n    ],\r\n    hints:[ \r\n      ['A hint needs to be created here'],\r\n      ['A hint needs to be created here'],\r\n      ['A hint needs to be created here'],\r\n      ['A hint needs to be created here']\r\n    ],\r\n  },\r\n  {\r\n    title: '4 attributes, 4 values',\r\n    description: 'this puzzle has 4 attributes with 4 values. It doesnt work yet.',\r\n    layout: '4x4',\r\n    attributes: [\r\n      [ 'monkey', 'frog', 'fish', 'crab' ],\r\n      [ 'first', 'second', 'third', 'last' ],\r\n      [ 'happy', 'angry', 'sad', 'bored' ],\r\n      [ 'firefighter', 'dentist', 'clown', 'lawyer' ]\r\n    ],\r\n    solution:[\r\n      [ 0, 0, 0, 0 ],\r\n      [ 1, 1, 1, 1 ],\r\n      [ 2, 2, 2, 2 ],\r\n      [ 3, 3, 3, 3 ]\r\n    ],\r\n    hints:[ \r\n      ['A hint needs to be created here'],\r\n      ['A hint needs to be created here'],\r\n      ['A hint needs to be created here'],\r\n      ['A hint needs to be created here']\r\n    ],\r\n  }\r\n]\r\n\r\nexport const HINT_GIVERS: HintGiver[] = [\r\n  {\r\n    id: 'skull',\r\n    name: 'Skull Guy',\r\n    bodyType: 'body1',\r\n    idleImage: 'assets/hinters/faces/skull-s.gif',\r\n    talkingImage: 'assets/hinters/faces/skull-t.gif',\r\n  },{\r\n    id: 'skull_pirate',\r\n    name: 'Skull Guy Pirate',\r\n    bodyType: 'body1',\r\n    idleImage: 'assets/hinters/faces/skull-pirate-s.gif',\r\n    talkingImage: 'assets/hinters/faces/skull-pirate-t.gif',\r\n  },{\r\n    id: 'cactoid',\r\n    name: 'Cactoid',\r\n    bodyType: 'body2',\r\n    idleImage: 'assets/hinters/faces/cactus-s.gif',\r\n    talkingImage: 'assets/hinters/faces/cactus-t.gif',\r\n  },{\r\n    id: 'face1',\r\n    name: 'Face 1',\r\n    bodyType: 'body3',\r\n    idleImage: 'assets/hinters/faces/face1-s.gif',\r\n    talkingImage: 'assets/hinters/faces/face1-t.gif',\r\n  },{\r\n    id: 'face1_pirate',\r\n    name: 'Face 1 Pirate',\r\n    bodyType: 'body3',\r\n    idleImage: 'assets/hinters/faces/face1-pirate-s.gif',\r\n    talkingImage: 'assets/hinters/faces/face1-pirate-t.gif',\r\n  }\r\n]\r\n\r\ntype GridShapeDef = {\r\n  [key: string]: RawCell[][]\r\n}\r\n\r\n\r\n/*\r\n  Making this stupid data structure that I wanna get rid of\r\n  its the row/column of each attribute\r\n  4 ->  [\r\n          [[0, 1], [ 0, 2 ], [ 0, 3 ]],\r\n          [[3, 1], [ 3, 2 ]],\r\n          [[2, 1]]\r\n        ],\r\n*/\r\nexport const generateGridShape = (size: number) => {\r\n  let gridShape = [];\r\n  for(let gsRow = 0; gsRow < size - 1; gsRow++){\r\n    let gridRow = [];\r\n    let rowIdx = gsRow === 0 ? 0 : size - gsRow;\r\n    for(let gsCol = 0; gsCol < size - 1 - gsRow; gsCol++){\r\n      gridRow.push([ rowIdx, gsCol + 1 ])\r\n    }\r\n    gridShape.push(gridRow);\r\n  }\r\n  return gridShape as RawCell[][];\r\n}\r\n\r\nconst generatedGrids: GridShapeDef = {};\r\nexport const getGridShape = (size:number) => {\r\n  if(!generatedGrids[size]){\r\n    generatedGrids[size] = generateGridShape(size);\r\n  }\r\n  return generatedGrids[size];\r\n}\r\n","import { getGridShape } from '../app/data/data';\r\nimport { SolutionSet, AttributeMatrix, CellObj, ComparisonHash, SimpleAttributeDef } from '../types';\r\n\r\n// make a hash of all unique attribute:attribute combinations\r\nexport const createComparisonHash = (numAttributes: number, numValues: number): ComparisonHash => {\r\n  const hash: ComparisonHash = {};\r\n  /**\r\n   * makes a flat hash of every unique attribute:value relationship to be used when script is iteratively\r\n   * \"solving\" to create hints. This can get quite large\r\n   * {\r\n   *  0:0|1:0,\r\n   *  0:0|1:1,\r\n   *  0:0|1:2,\r\n   *  0:0|2:0,\r\n   *  ...\r\n   * }\r\n   */\r\n  for(let i = 0; i < numAttributes-1; i++){\r\n    for(let j = 0; j < numValues; j++){\r\n      for(let k = i + 1; k < numAttributes; k++){\r\n        for(let l = 0; l < numValues; l++){\r\n          hash[`${i}:${j}|${k}:${l}`] = -1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return hash;\r\n}\r\n\r\n// answer set is the raw attributes (in order) and their values\r\n/// [1, 1, 1] would mean a valueIdx of 1 for attributes 0, 1, and 2\r\n\r\n// attrMatrix is a 2d array of attrIdx and numberIdx, so [[0,0],[2,0]] compares the 1st val of attr[0] with the 1st value of attr[2]\r\nexport const isCellSolution = (answerSet: SolutionSet, attrMatrix: AttributeMatrix) => {\r\n  for(let a = 0; a < answerSet.length; a++){\r\n    if(attrMatrix.filter(attrPair => answerSet[a][attrPair[0]] === attrPair[1]).length === 2) return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n// make a unique combination of each attribute/value, with no overlaps.\r\n// This is the solution to the current truth table.\r\nexport const calcSolution = (numAnswers: number, numAttributes:number): SolutionSet => {\r\n  const availableAttributes = [];\r\n  for(let i = 0; i < numAttributes; i++){\r\n    availableAttributes.push(Array.from(Array(numAnswers).keys()))\r\n  }\r\n\r\n  let generatedAnswer = [];\r\n  for(let i = 0; i < numAnswers; i++){\r\n    let answerAttrs = [];\r\n    for(let i = 0; i < availableAttributes.length; i++){\r\n      const randIdx = Math.floor(Math.random() * availableAttributes[i].length);\r\n      answerAttrs.push(availableAttributes[i][randIdx]);\r\n      availableAttributes[i].splice(randIdx, 1);\r\n    }\r\n    generatedAnswer.push(answerAttrs)\r\n  }\r\n\r\n  return generatedAnswer;\r\n}\r\n\r\nexport const generateCellMatrix = (solutionSet: SolutionSet, attributes:SimpleAttributeDef[]) => {\r\n  const numAttributes = attributes.length || 0;\r\n  const numValues = attributes[0].length;\r\n\r\n  if(numAttributes < 2 || numAttributes > 5){\r\n    console.error('invalid data, must use between 2 and 5 attributes');\r\n  }\r\n  \r\n  const boxSize = Math.pow(numValues, 2);\r\n  const gridShape = getGridShape(numAttributes);\r\n  const newMatrix = [];\r\n\r\n  let idx = 0;\r\n  for(let r = 0; r < gridShape.length; r++){\r\n    for(let c = 0; c < gridShape[r].length; c ++){\r\n      for(let bi = 0; bi < boxSize; bi++){\r\n        // [ 0, 1 ] is comparing attr0 and attr1\r\n        const attrPair = gridShape[r][c];\r\n        const xVal = Math.floor((idx % boxSize) / numValues);\r\n        const yVal = idx % numValues;\r\n\r\n        const ansMatrix: AttributeMatrix = [ [ attrPair[0], xVal ], [attrPair[1], yVal ] ]\r\n        const isSolution = isCellSolution(solutionSet, ansMatrix)\r\n\r\n        newMatrix.push({\r\n          idx: idx++,\r\n          attrs: attrPair,\r\n          isSolution: isSolution,\r\n          status: 0\r\n        } as CellObj)\r\n      }\r\n    }\r\n  }\r\n\r\n  return newMatrix;\r\n}","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from './store';\r\nimport { SolutionSet, AttributeMatrix, CellMatrix, CellObj, GameStatus, HintGiver, RawCell, RenderedHint, LevelData, LevelInfo, SimpleAttributeDef, RenderedMenuGroup } from '../types';\r\nimport { getGridShape, LEVELDATA, HINT_GIVERS, LEVELMENU } from './data/data';\r\nimport { generateCellMatrix } from '../utils/puzzler';\r\nimport { STORE_SCHEMA } from '../utils/localstorage';\r\n\r\nexport interface GridState {\r\n  storeSchema: number,\r\n  cellMatrix: CellMatrix,\r\n  hintGivers: number[],\r\n  gameStatus: GameStatus,\r\n  levelIdx: number,\r\n  hintIdx: number,\r\n  progression: number[],\r\n  gameReady: boolean\r\n}\r\n\r\nconst initialState: GridState = {\r\n  storeSchema: STORE_SCHEMA,\r\n  cellMatrix: [],\r\n  hintGivers: [],\r\n  gameStatus: 'start',\r\n  levelIdx: -1,\r\n  hintIdx: -1,\r\n  progression: [],\r\n  gameReady: false\r\n};\r\n\r\ntype ResetType = {\r\n  levelData: LevelData,\r\n  resume?: boolean\r\n}\r\nexport const getHintIdxById = (id:string) => {\r\n  const foundIdx = HINT_GIVERS.findIndex(hg => hg.id === id);\r\n  if(foundIdx === -1) console.error(`could not find hintgiver with id \"${id}\"`);\r\n  return foundIdx;\r\n};\r\n\r\nexport const boardSlice = createSlice({\r\n  name: 'board',\r\n  initialState,\r\n  reducers: {\r\n    resetMatrix: (state: GridState, action: PayloadAction<ResetType>) => {\r\n      const levelData = action.payload.levelData;\r\n      if(action.payload.resume && state.cellMatrix.length > 0){\r\n        state.hintIdx = -1;\r\n        state.gameStatus = 'playing';\r\n        state.gameReady = true;\r\n      }else{\r\n        if(levelData.attributes?.length > 0){\r\n          state.cellMatrix = generateCellMatrix(levelData.solution, levelData.attributes);\r\n  \r\n          let hintGivers: number[] = [];\r\n          levelData.hints.forEach((hint, hIdx) => {\r\n            if(hint[1]){\r\n              const foundIdx = getHintIdxById(hint[1]);\r\n              if(foundIdx !== -1) hintGivers.push(foundIdx);\r\n            }else{\r\n              hintGivers.push(Math.floor(Math.random() * HINT_GIVERS.length));\r\n            }\r\n          });\r\n\r\n          state.hintGivers = hintGivers;\r\n          state.hintIdx = -1;\r\n          state.gameStatus = 'playing';\r\n          state.gameReady = true;\r\n  \r\n        } else {\r\n          state.cellMatrix = [];\r\n        }\r\n      }\r\n    },\r\n    rotateCell: (state, action: PayloadAction<number>) => {\r\n      if(state.cellMatrix){\r\n        const nextStatus = getNextStatus(state.cellMatrix[action.payload]);\r\n        state.cellMatrix[action.payload].status = nextStatus;\r\n      }\r\n    },\r\n    setActiveHint: (state, action: PayloadAction<number>) => {\r\n      state.hintIdx = action.payload;\r\n    },\r\n    submitAnswer: (state, action: PayloadAction<boolean>) => {\r\n      if(action.payload === true){\r\n        if(!state.progression.includes(state.levelIdx)){\r\n          state.progression.push(state.levelIdx)\r\n        }\r\n        state.gameStatus = 'roundWin';\r\n      }else{\r\n        state.gameStatus = 'invalidAnswer';\r\n      }\r\n    },\r\n    setGameStatus: (state, action: PayloadAction<GameStatus>) => {\r\n      state.gameStatus = action.payload;\r\n    },\r\n    resumeLevel: (state, action: PayloadAction<number>) => {\r\n      state.gameReady = false;\r\n      state.gameStatus = 'loadingResume';\r\n      state.levelIdx = action.payload;\r\n    },\r\n    startLevel: (state, action: PayloadAction<number>) => {\r\n      state.gameReady = false;\r\n      state.gameStatus = 'loading';\r\n      state.levelIdx = action.payload;\r\n    },\r\n    restartLevel: (state) => {\r\n      state.gameReady = false;\r\n      state.gameStatus = 'loading';\r\n      state.levelIdx = getNextLevelIdx(state.levelIdx - 1);\r\n    },\r\n    startNextLevel: (state) => {\r\n      state.gameReady = false;\r\n      state.gameStatus = 'loading';\r\n      state.levelIdx = getNextLevelIdx(state.levelIdx);\r\n    },\r\n  } \r\n});\r\n\r\nexport const { resetMatrix, rotateCell, setActiveHint, submitAnswer, startLevel, resumeLevel, startNextLevel, restartLevel, setGameStatus } = boardSlice.actions;\r\n\r\n\r\n\r\n// answer set is the raw attributes (in order) and their values\r\n/// [1, 1, 1] would mean a valueIdx of 1 for attributes 0, 1, and 2\r\n\r\n// attrMatrix is a 2d array of attrIdx and numberIdx, so [[0,0],[2,0]] compares the 1st val of attr[0] with the 1st value of attr[2]\r\nexport const isCellSolution = (answerSet: SolutionSet, attrMatrix: AttributeMatrix) => {\r\n  for(let a = 0; a < answerSet.length; a++){\r\n    if(attrMatrix.filter(attrPair => answerSet[a][attrPair[0]] === attrPair[1]).length === 2) return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n\r\n\r\n// blank > no > yes > maybe > blank\r\nconst getNextStatus = (cellObj: CellObj) => {\r\n  try{\r\n    switch(cellObj.status){\r\n      case 0: return 2;\r\n      case 2: return 1;\r\n      case 1: return 0;\r\n    }\r\n  } catch(e){\r\n    console.error('unexpected lookup for cellObj', cellObj)\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nexport const getCellMatrix = (state: RootState) => state.board.cellMatrix;\r\nexport const getHintGivers = (state: RootState) => state.board.hintGivers;\r\nexport const getActiveHintIdx = (state: RootState) => state.board.hintIdx;\r\nexport const getGameStatus = (state: RootState) => state.board.gameStatus;\r\nexport const getLevelIdx = (state: RootState) => state.board.levelIdx;\r\nexport const getGameReady = (state: RootState) => state.board.gameReady;\r\nexport const getProgression = (state: RootState) => state.board.progression;\r\n// export const getProgression = (state: RootState) => [0,1];\r\n\r\nexport const renderHint = (hintGiverIdx: number, text: string) => ({\r\n  hintGiver: HINT_GIVERS[hintGiverIdx],\r\n  text: text\r\n});\r\n\r\nexport const getNextLevelIdx = (curIdx: number) => {\r\n  if(curIdx + 1 < LEVELDATA.length){\r\n    return curIdx + 1;\r\n  }\r\n\r\n  // for now, just start over!\r\n  return 0;\r\n};\r\n\r\nexport const selectLevelData = createSelector(\r\n  [getLevelIdx],\r\n  (levelIdx): LevelData => {\r\n    return LEVELDATA[levelIdx]\r\n  }\r\n);\r\n\r\nexport const selectLevelInfo = createSelector(\r\n  [selectLevelData, getLevelIdx, getProgression],\r\n  (levelData, levelIdx, progression): LevelInfo | null => {\r\n    if(!levelData) return null;\r\n    return {\r\n      title: levelData.title,\r\n      description: levelData.description,\r\n      layout: levelData.layout,\r\n      completed: progression.includes(levelIdx),\r\n      current: true,\r\n      level: levelIdx\r\n    };\r\n  }\r\n);\r\n\r\nexport const getLevelMenu = (state: RootState) => LEVELMENU;\r\n\r\n\r\n// eventually, merge in saved progress\r\nexport const selectAllLevelInfo = createSelector(\r\n  [getProgression, getLevelMenu, getLevelIdx],\r\n  (progression, levelMenu, levelIdx): RenderedMenuGroup[] => {\r\n    const levels = LEVELDATA.map((levelData, idx) => ({\r\n      title: levelData.title,\r\n      description: levelData.description,\r\n      layout: levelData.layout,\r\n      completed: progression.includes(idx),\r\n      current: idx === levelIdx,\r\n      level: idx\r\n    }));\r\n\r\n    return levelMenu.map(menuGroup => ({\r\n      title: menuGroup.title,\r\n      levels: menuGroup.levels.map(lId => levels[lId])\r\n    })).filter(levelMenu => levelMenu.levels.length > 0);\r\n  }\r\n);\r\n\r\nexport const selectHints = createSelector(\r\n  [getHintGivers, selectLevelData],\r\n  (hintGivers, levelData): RenderedHint[] => {\r\n    if(!levelData) return [];\r\n    return levelData.hints.map((h, hIdx) => renderHint(hintGivers[hIdx], h[0]));\r\n  }\r\n);\r\n\r\nexport const selectActiveHint = createSelector(\r\n  [getActiveHintIdx, selectLevelData, getHintGivers],\r\n  (activeHintIdx, levelData, hintGivers): RenderedHint | null => {\r\n    if(!levelData || activeHintIdx === -1){\r\n      return null;\r\n    }\r\n    // hack, otherwise when clue 3 is active, and switching to a level with 2 hints, errors out\r\n    if(activeHintIdx > levelData.hints.length){\r\n      return null;\r\n    }\r\n\r\n    return renderHint(hintGivers[activeHintIdx], levelData.hints[activeHintIdx][0]);\r\n  }\r\n);\r\n\r\nexport const selectActiveHintGiver = createSelector(\r\n  [selectActiveHint],\r\n  (activeHint): HintGiver | null => activeHint?.hintGiver || null\r\n);\r\n\r\nexport const selectAttributes = createSelector(\r\n  [selectLevelData],\r\n  (levelData) => levelData.attributes\r\n);\r\n\r\nexport const selectGridInfo = createSelector(\r\n  [selectLevelData],\r\n  (levelData) => ({\r\n    numAttributes: levelData.attributes.length,\r\n    numValues: levelData.attributes[0].length\r\n  })\r\n);\r\n\r\nexport const selectGridLabels = createSelector(\r\n  [selectAttributes],\r\n  (attributes): [ rows: SimpleAttributeDef[], cols: SimpleAttributeDef[] ] => {\r\n    const gridShape:RawCell[][] = getGridShape(attributes.length);\r\n    const rowAttributes = gridShape.map(r => r[0][0]);\r\n    const colAttributes = gridShape[0].map(rc => rc[1]);\r\n\r\n    return [\r\n      rowAttributes.map(idx => attributes[idx]),\r\n      colAttributes.map(idx => attributes[idx])\r\n    ];\r\n  }\r\n);\r\n\r\nexport const selectGridBox = createSelector(\r\n  [getCellMatrix, selectGridInfo],\r\n  (cellMatrix, gridInfo) => {\r\n    const gridShape: RawCell[][] = getGridShape(gridInfo.numAttributes);\r\n    let idx = 0;\r\n    const gridSize = gridShape[0].length;\r\n    const boxSize = Math.pow(gridInfo.numValues, 2);\r\n    return gridShape?.map((row, rIdx) => {\r\n      return [...Array(gridSize)].map((_, cIdx) => {\r\n        let boxArr: CellObj[] = [];\r\n        if(!gridShape[rIdx][cIdx]){\r\n          // handles empty cells in larger maps\r\n          return boxArr;\r\n        }\r\n\r\n        for(let i = 0; i < boxSize; i++){\r\n          boxArr.push(\r\n            cellMatrix[idx++]\r\n          )\r\n        }\r\n        return boxArr;\r\n      })\r\n    })\r\n  }\r\n);\r\n\r\nexport const selectSolution = createSelector(\r\n  [selectLevelData],\r\n  (levelData) => levelData?.solution || null\r\n)\r\n\r\nexport const selectRenderedSolution = createSelector(\r\n  [selectSolution, selectAttributes],\r\n  (solution, attributes) => solution?.map(solution => {\r\n    return solution.map((vIdx,sIdx) => \r\n      attributes[sIdx][vIdx]\r\n    )\r\n  })\r\n);\r\n\r\n// if every \"solution\" cell has a 1 status, and there are not extra answers\r\nexport const checkIfSolved = createSelector(\r\n  [getCellMatrix],\r\n  (cellMatrix) => {\r\n    const numExpected = cellMatrix.filter(cell => cell.isSolution).length;\r\n    const answeredCells = cellMatrix.filter(cell => cell.status === 1);\r\n    if(answeredCells.length !== numExpected) return false;\r\n\r\n    const expectedCells = cellMatrix.filter(cell => cell.isSolution);\r\n    for(let i = 0; i < expectedCells.length; i++){\r\n      if(!answeredCells.find(aC => aC.idx === expectedCells[i].idx)){\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n);\r\n\r\nexport default boardSlice.reducer;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n"],"sourceRoot":""}