{"version":3,"sources":["themes/index.ts","app/data/data.tsx","utils/index.tsx","utils/puzzler.tsx","app/slice.tsx","app/hooks.ts","scenes/board/board-controls.tsx","scenes/board/index.tsx","components/button.tsx","scenes/modal/modals.tsx","scenes/modal/index.tsx","scenes/main/rulemaster.tsx","components/speech-text.tsx","scenes/info-panel/hint-picker.tsx","components/lilman.tsx","scenes/info-panel/hint-giver.tsx","scenes/info-panel/index.tsx","scenes/main/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["mixinFontFamily","style","css","createGlobalStyle","getColor","colorId","store","colors","brown_dark","brown","brown_light","black","grey_dark","grey","grey_light","white","pink","red_dark","red","red_light","green_dark","green","green_light","blue_dark","blue","blue_light","yellow_dark","yellow","yellow_light","purple","shadows","z1","z2","z3","breakpoints","mobile_tiny","mobile_medium","mobile_large","tablet","desktop","SAMPLE_ROUNDDATA","title","description","attributes","id","type","values","aliases","descriptors","orderDescriptions","HINT_GIVERS","name","idleImage","talkingImage","imageType","ssData","idle","startAt","endAt","fps","talking","spritesheetData","image","widthFrame","heightFrame","steps","bottomBoost","generatedGrids","getGridShape","size","gridShape","gsRow","gridRow","rowIdx","gsCol","push","generateGridShape","RandIdx","min","max","Math","floor","random","RandFromArray","array","length","getSortComparison","attrA","attrB","rcIdx","sortComparisons","value","generateHintText","sameGroup","solutionIdx","sortComparison","attributeIdx","prefix","attr","alias","getPrefix","suffix","descriptor","getSuffix","filterUsedHints","attrGroup","reservedAttr","filter","attrDetail","chooseAttribute","groupAttrDetails","influenceType","filteredAttributes","groupAttrs","find","attrDetails","influenceGroupIdx","group","console","log","generateSingleHint","text","used","convertSolutionsToAttributeDetails","solutions","rawSortComparisons","forEach","idx","getSortComparisons","map","solution","sIdx","sC","vIdx","aIdx","attribute","valueIdx","filterFromWorkingAttrs","solutionDetails","usedAttributes","usedAttr","getInfluenceType","curRatio","influenceCalc","ratioTotal","gridSlice","createSlice","initialState","roundData","cellMatrix","hints","activeHintIdx","gameStatus","roundIdx","gameReady","reducers","resetMatrix","state","action","payload","numAttributes","numValues","boxSize","pow","solutionSet","calcSolution","newMatrix","r","c","bi","attrPair","xVal","yVal","ansMatrix","isSolution","isCellSolution","attrs","status","hintGivers","maxHints","workingAttrs","yesNoRatio","i","hgIdx","error","generated","concat","hintGiverIdx","generateHints","rotateCell","nextStatus","getNextStatus","setActiveHint","submitAnswer","setGameStatus","startRound","getNextRoundIdx","restartRound","startNextRound","actions","answerSet","attrMatrix","a","numAnswers","availableAttributes","Array","from","keys","generatedAnswer","answerAttrs","randIdx","splice","cellObj","e","getCellMatrix","board","getHints","getActiveHintIdx","getGameStatus","getRoundIdx","getGameReady","renderHint","hint","hintGiver","curIdx","selectRoundData","createSelector","selectHints","level","h","selectActiveHint","selectActiveHintGiver","activeHint","selectAttributes","selectGridInfo","gridSize","selectGridLabels","rowAttributes","colAttributes","rc","selectGridBox","row","rIdx","_","cIdx","boxArr","selectSolution","checkIfSolved","numExpected","cell","answeredCells","expectedCells","aC","useAppDispatch","useDispatch","useAppSelector","useSelector","StyledButton","styled","div","StyledSolvedButton","StyledHelpButton","StyledContainer","BoardControls","solved","dispatch","onSubmitGame","useCallback","forceWin","onClick","StyledBoard","StyledLeftLabels","StyledLeftLabel","p","StyledTopLabels","StyledTopLabel","StyledCells","StyledRawCellGroup","StyledCellGroup","cellRatio","StyledCell","BlankCellGroup","StyledControls","Board","grid","gridLabels","gridInfo","onClickCell","cellIdx","useMemo","round","grIdx","cellGroup","cgIdx","cgKey","boardCell","gridColumn","renderCellGroup","gl","glIdx","v","toUpperCase","StyledPositiveButton","StyledNegativeButton","StyledSpecialButton","StyledNeutralButton","Button","buttonType","StyledButtonContainer","StyledBody","StyledWebsiteLink","WinModal","InvalidAnswerModal","SplashModal","StyledDebug","StyledInstructions","ul","HelpModal","renderedSolution","rS","join","href","target","StyledModal","StyledModalBg","Modal","modal","getModal","RuleMaster","useEffect","innerTimer","innerText","SpeechText","onTextComplete","useState","curText","setCurText","isComplete","setIsComplete","nextTextPlease","fullText","reset","setTimeout","partial","slice","clearTimeout","StyledHint","isActive","HintPicker","onCloseHint","onClickHint","hintIdx","StyledLilManGif","imageUrl","StyledLilManSpritesheet","LilMan","isTalking","ssOverride","undefined","direction","loop","backgroundPosition","StyledLilManContainer","HintGiver","align","StyledHintGiver","StyledBanner","StyledHintBox","InfoPanel","setIsTalking","hintText","Main","ScStage","App","routes","route","element","path","configureStore","reducer","boardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.008e92ea.chunk.js","sourcesContent":["import { createGlobalStyle, css } from \"styled-components\"\r\n\r\ntype FontStyle = 'display' | 'speech';\r\nexport const mixinFontFamily = (style?: FontStyle) => {\r\n  switch(style){\r\n    case 'display' : return css`font-family: 'Noto Sans', sans-serif`;\r\n    case 'speech': return css`font-family: 'VT323', monospace`;\r\n    default: return css`font-family: 'VT323', monospace`;\r\n  }\r\n}\r\n\r\nexport default createGlobalStyle`\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    outline:0;\r\n    box-sizing:border-box;\r\n\r\n    -webkit-touch-callout: none; /* iOS Safari */\r\n    -webkit-user-select: none; /* Safari */\r\n     -khtml-user-select: none; /* Konqueror HTML */\r\n       -moz-user-select: none; /* Old versions of Firefox */\r\n        -ms-user-select: none; /* Internet Explorer/Edge */\r\n            user-select: none; /* Non-prefixed version, currently\r\n                                  supported by Chrome, Edge, Opera and Firefox */\r\n  }\r\n  #root{\r\n    margin:0 auto;\r\n  }\r\n  h1, h2, h3, h4{\r\n    font-family: 'Noto Sans', sans-serif;\r\n  }\r\n  a, p, button, span, h5, h6{\r\n    ${mixinFontFamily()};\r\n  }\r\n  h1{\r\n    font-size: 5rem;\r\n  }\r\n  h2{\r\n    font-size: 4rem;\r\n  }\r\n  h3{\r\n    font-size: 3.5rem;\r\n  }\r\n  h4{\r\n    font-size: 2.5rem;\r\n  }\r\n  h5{\r\n    font-size: 2rem;\r\n  }\r\n  p, span{\r\n    font-size:2rem;\r\n  }\r\n\r\n  html{\r\n    font-size: 62.5%;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    ${mixinFontFamily()};\r\n    background-color: black;\r\n  }\r\n`\r\n\r\n\r\n\r\nexport const listColors = () => {\r\n  return Object.keys(store.colors);\r\n}\r\n\r\n\r\nexport const getColor = (colorId: tColor) => {\r\n  return store.colors[colorId] as CssString; \r\n}\r\n\r\nexport const getShadow = (shadowId: tShadow) => {\r\n  return store.shadows[shadowId] as CssString;\r\n}\r\n\r\nexport const getBreakpoint = (breakpointId: tBreakpoint) => {\r\n  return store.breakpoints[breakpointId] as CssString;\r\n}\r\n\r\ntype CssString = string;\r\n\r\ntype tShadow = 'z1' | 'z2' | 'z3';\r\nconst shadows = {\r\n  z1: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.16)',\r\n  z2: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.36)',\r\n  z3: '-.2rem .5rem 1rem .2rem rgba(0,0,0,.36)'\r\n}\r\ntype tColor = 'brown_dark' | 'brown' | 'brown_light' | 'black' | 'grey_dark' | 'grey' | 'grey_light' | 'white' | 'pink' | 'red_dark' | 'red' | 'red_light' | 'blue_dark' | 'blue' | 'blue_light' | 'green_dark' | 'green' | 'green_light' | 'yellow_dark' | 'yellow' | 'yellow_light' | 'purple';\r\nconst colors = {\r\n  brown_dark: '#35120e',\r\n  brown: '#6b2b15',\r\n  brown_light: '#d48e55',\r\n  black: '#07070e',\r\n  grey_dark: '#1a1932',\r\n  grey: '#424c6e',\r\n  grey_light: '#92a1b9',\r\n  white: '#f7ede3',\r\n  pink: '#f29caa',\r\n  red_dark: '#7b102b',\r\n  red: '#b3102b',\r\n  red_light: '#e35970',\r\n  green_dark: '#123f1d',\r\n  green: '#33984b',\r\n  green_light: '#5ac54f',\r\n  blue_dark: '#003f61',\r\n  blue: '#1c638d',\r\n  blue_light: '#7ecbed',\r\n  yellow_dark: '#666a15',\r\n  yellow: '#afb224',\r\n  yellow_light: '#cfd14d',\r\n  purple: '#9c3d95',\r\n}\r\n\r\ntype tBreakpoint = 'mobile_tiny' | 'mobile_medium' | 'mobile_large' | 'tablet' | 'desktop';\r\nconst breakpoints = {\r\n  mobile_tiny: '300px',\r\n  mobile_medium: '400px',\r\n  mobile_large: '500px',\r\n  tablet: '768px',\r\n  desktop: '1024px'\r\n}\r\n\r\ntype ThemeStore = {\r\n  colors: typeof colors,\r\n  shadows: typeof shadows,\r\n  breakpoints: typeof breakpoints\r\n}\r\n\r\nexport const store: ThemeStore = {\r\n  colors: colors,\r\n  shadows: shadows,\r\n  breakpoints: breakpoints\r\n}\r\n","import { AnswerData, HintGiver, RawCell, RenderedAnswer, RoundData } from '../../types';\r\n\r\n/**\r\n * The attributes that defined the thingies this round\r\n */\r\nexport const SAMPLE_ROUNDDATA: RoundData[] = [\r\n  // 2x3\r\n  {\r\n    title: '2 attributes, 3 values',\r\n    description: 'this puzzle has 2 attributes with 3 values each',\r\n    attributes:[\r\n      {\r\n        id: 'animal',\r\n        type: 'thing',\r\n        values: [\r\n          {\r\n            id: 'monkey',\r\n            aliases: [ 'swinging rat' ],\r\n            descriptors: [ 'has legs', 'rhymes with \"funky\"' ]\r\n          },\r\n          {\r\n            id: 'frog',\r\n            aliases: [ 'croaky boi' ],\r\n            descriptors: [ 'loves the water', 'eats flies' ]\r\n          },\r\n          {\r\n            id: 'fish',\r\n            aliases: [ 'one with gills' ],\r\n            descriptors: [ 'loves the water', 'eats flies' ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'occupation',\r\n        type: 'thing',\r\n        values: [\r\n          {\r\n            id: 'firefighter',\r\n            aliases: [],\r\n            descriptors: [ 'uses a trampoline' ]\r\n          },\r\n          {\r\n            id: 'dentist',\r\n            aliases: [],\r\n            descriptors: []\r\n          },\r\n          {\r\n            id: 'clown',\r\n            aliases: [],\r\n            descriptors: [ 'uses a trampoline' ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  // 3x3\r\n  {\r\n    title: '3 attributes, 3 values',\r\n    description: 'this puzzle has 3 attributes with 3 values each',\r\n    attributes:[\r\n      {\r\n        id: 'animal',\r\n        type: 'thing',\r\n        values: [\r\n          {\r\n            id: 'monkey',\r\n            aliases: [ 'swinging rat' ], // ALIASES HAVE TO BE DISTINCT\r\n            descriptors: [ 'has legs', 'rhymes with \"funky\"' ] // DESCRIPTORS CAN BE SHARED FOR AN ATTRIBUTE\r\n          },\r\n          {\r\n            id: 'frog',\r\n            aliases: [ 'croaky boi' ],\r\n            descriptors: [ 'loves the water', 'eats flies' ]\r\n          },\r\n          {\r\n            id: 'fish',\r\n            aliases: [ 'one with gills' ],\r\n            descriptors: [ 'loves the water', 'eats flies' ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'queue',\r\n        type: 'order',\r\n        orderDescriptions: [ 'is earlier in line than', 'is later in line than' ],\r\n        values: [\r\n          {\r\n            id: 'first',\r\n            aliases: [ 'first to arrive' ],\r\n            descriptors: [ 'one of the first two to arrive' ]\r\n          },\r\n          {\r\n            id: 'second',\r\n            aliases: [ 'second in line' ],\r\n            descriptors: [ 'one of the first two to arrive', 'near the end of the line' ]\r\n          },\r\n          {\r\n            id: 'last',\r\n            aliases: [ 'last to show up' ],\r\n            descriptors: [ 'near the end of the line' ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'occupation',\r\n        type: 'thing',\r\n        values: [\r\n          {\r\n            id: 'firefighter',\r\n            aliases: [],\r\n            descriptors: [ 'uses a trampoline' ]\r\n          },\r\n          {\r\n            id: 'dentist',\r\n            aliases: [],\r\n            descriptors: []\r\n          },\r\n          {\r\n            id: 'clown',\r\n            aliases: [],\r\n            descriptors: [ 'uses a trampoline' ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  // 3x4\r\n  {\r\n    title: '3 attributes, 4 values',\r\n    description: 'this puzzle has 3 attributes with 4 values each',\r\n    attributes:[\r\n      {\r\n        id: 'animal',\r\n        type: 'thing',\r\n        values: [\r\n          {\r\n            id: 'monkey',\r\n            aliases: [ 'swinging rat' ],\r\n            descriptors: [ 'has legs', 'rhymes with \"funky\"' ]\r\n          },\r\n          {\r\n            id: 'frog',\r\n            aliases: [ 'croaky boi' ],\r\n            descriptors: [ 'loves the water', 'eats flies' ]\r\n          },\r\n          {\r\n            id: 'fish',\r\n            aliases: [ 'one with gills' ],\r\n            descriptors: [ 'loves the water', 'eats flies' ]\r\n          },\r\n          {\r\n            id: 'crab',\r\n            aliases: [ 'pinchy boi' ],\r\n            descriptors: [ 'loves the water' ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'queue',\r\n        type: 'order',\r\n        orderDescriptions: [ 'is earlier in line than', 'is later in line than' ],\r\n        values: [\r\n          {\r\n            id: 'first',\r\n            // the $\r\n            aliases: [ 'first to arrive' ],\r\n            // [is, is not] the $\r\n            descriptors: [ 'first to arrive' ]\r\n          },\r\n          {\r\n            id: 'second',\r\n            aliases: [],\r\n            descriptors: [ 'in the middle of the line' ]\r\n          },\r\n          {\r\n            id: 'third',\r\n            aliases: [],\r\n            descriptors: [ 'in the middle of the line' ]\r\n          },\r\n          {\r\n            id: 'last',\r\n            aliases: [ 'last to show up' ],\r\n            descriptors: [ 'last to show up' ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'occupation',\r\n        type: 'thing',\r\n        values: [\r\n          {\r\n            id: 'firefighter',\r\n            // the $\r\n            aliases: [],\r\n            // $ (only IS comparison) \r\n            descriptors: [ 'uses a trampoline' ]\r\n          },\r\n          {\r\n            id: 'dentist',\r\n            aliases: [],\r\n            descriptors: [ 'makes a lot of money' ]\r\n          },\r\n          {\r\n            id: 'clown',\r\n            aliases: [],\r\n            descriptors: [ 'uses a trampoline' ]\r\n          },\r\n          {\r\n            id: 'lawyer',\r\n            aliases: [],\r\n            descriptors: [ 'makes a lot of money' ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  // 4x3\r\n  {\r\n    title: '4 attributes, 3 values',\r\n    description: 'this puzzle has 4 attributes with 3 values each',\r\n    attributes:[\r\n      {\r\n        id: 'animal',\r\n        type: 'thing',\r\n        values: [\r\n          {\r\n            id: 'monkey',\r\n            aliases: [ 'swinging rat' ], // ALIASES HAVE TO BE DISTINCT\r\n            descriptors: [ 'has legs', 'rhymes with \"funky\"' ] // DESCRIPTORS CAN BE SHARED FOR AN ATTRIBUTE\r\n          },\r\n          {\r\n            id: 'frog',\r\n            aliases: [ 'croaky boi' ],\r\n            descriptors: [ 'loves the water', 'eats flies' ]\r\n          },\r\n          {\r\n            id: 'fish',\r\n            aliases: [ 'one with gills' ],\r\n            descriptors: [ 'loves the water', 'eats flies' ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'queue',\r\n        type: 'order',\r\n        orderDescriptions: [ 'is earlier in line than', 'is later in line than' ],\r\n        values: [\r\n          {\r\n            id: 'first',\r\n            aliases: [ 'first to arrive' ],\r\n            descriptors: [ 'first to arrive' ]\r\n          },\r\n          {\r\n            id: 'second',\r\n            aliases: [ 'second in line' ],\r\n            descriptors: [ 'second in line' ]\r\n          },\r\n          {\r\n            id: 'last',\r\n            aliases: [ 'last to show up' ],\r\n            descriptors: [ 'last to show up' ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'emotion',\r\n        type: 'modifier',\r\n        values: [\r\n          {\r\n            id: 'happy',\r\n            // the $ one\r\n            aliases: [],\r\n            // [is, is not] $\r\n            descriptors: []\r\n          },\r\n          {\r\n            id: 'angry',\r\n            aliases: [ 'FUMING' ],\r\n            descriptors: [ 'really angry', 'having a bad time', 'screaming at everyone' ]\r\n          },\r\n          {\r\n            id: 'sad',\r\n            aliases: [ 'mopey' ],\r\n            descriptors: [ 'having a bad time' ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'occupation',\r\n        type: 'thing',\r\n        values: [\r\n          {\r\n            id: 'firefighter',\r\n            // the $\r\n            aliases: [],\r\n            // $ (only IS comparison) \r\n            descriptors: [ 'uses a trampoline' ]\r\n          },\r\n          {\r\n            id: 'dentist',\r\n            aliases: [],\r\n            descriptors: []\r\n          },\r\n          {\r\n            id: 'clown',\r\n            aliases: [],\r\n            descriptors: [ 'uses a trampoline' ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  // 4x4\r\n  {\r\n    title: '4 attributes, 4 values',\r\n    description: 'this puzzle has 4 attributes with 4 values each',\r\n    attributes:[\r\n      {\r\n        id: 'animal',\r\n        type: 'thing',\r\n        values: [\r\n          {\r\n            id: 'monkey',\r\n            aliases: [ 'swinging rat' ],\r\n            descriptors: [ 'has legs', 'rhymes with \"funky\"' ]\r\n          },\r\n          {\r\n            id: 'frog',\r\n            aliases: [ 'croaky boi' ],\r\n            descriptors: [ 'loves the water', 'eats flies' ]\r\n          },\r\n          {\r\n            id: 'fish',\r\n            aliases: [ 'one with gills' ],\r\n            descriptors: [ 'loves the water', 'eats flies' ]\r\n          },\r\n          {\r\n            id: 'crab',\r\n            aliases: [ 'pinchy boi' ],\r\n            descriptors: [ 'loves the water' ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'queue',\r\n        type: 'order',\r\n        orderDescriptions: [ 'is earlier in line than', 'is later in line than' ],\r\n        values: [\r\n          {\r\n            id: 'first',\r\n            // the $\r\n            aliases: [ 'first to arrive' ],\r\n            // [is, is not] the $\r\n            descriptors: [ 'first to arrive' ]\r\n          },\r\n          {\r\n            id: 'second',\r\n            aliases: [],\r\n            descriptors: [ 'in the middle of the line' ]\r\n          },\r\n          {\r\n            id: 'third',\r\n            aliases: [],\r\n            descriptors: [ 'in the middle of the line' ]\r\n          },\r\n          {\r\n            id: 'last',\r\n            aliases: [ 'last to show up' ],\r\n            descriptors: [ 'last to show up' ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'emotion',\r\n        type: 'modifier',\r\n        values: [\r\n          {\r\n            id: 'happy',\r\n            // the $ one\r\n            aliases: [],\r\n            // [is, is not] $\r\n            descriptors: []\r\n          },\r\n          {\r\n            id: 'angry',\r\n            aliases: [ 'FUMING' ],\r\n            descriptors: [ 'having a bad time', 'screaming at everyone' ]\r\n          },\r\n          {\r\n            id: 'sad',\r\n            aliases: [ 'mopey', 'pretty blue' ],\r\n            descriptors: [ 'having a bad time' ]\r\n          },\r\n          {\r\n            id: 'bored',\r\n            aliases: [],\r\n            descriptors: [ 'having a bad time', 'twiddling their thumbs' ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'occupation',\r\n        type: 'thing',\r\n        values: [\r\n          {\r\n            id: 'firefighter',\r\n            // the $\r\n            aliases: [],\r\n            // $ (only IS comparison) \r\n            descriptors: [ 'uses a trampoline' ]\r\n          },\r\n          {\r\n            id: 'dentist',\r\n            aliases: [],\r\n            descriptors: [ 'makes a lot of money' ]\r\n          },\r\n          {\r\n            id: 'clown',\r\n            aliases: [],\r\n            descriptors: [ 'uses a trampoline' ]\r\n          },\r\n          {\r\n            id: 'lawyer',\r\n            aliases: [],\r\n            descriptors: [ 'makes a lot of money' ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nexport const HINT_GIVERS: HintGiver[] = [\r\n  {\r\n    id: 'fiveflys',\r\n    name: 'Fly Cook',\r\n    idleImage: 'assets/hinters/fiveflys-static.gif',\r\n    talkingImage: 'assets/hinters/fiveflys.gif',\r\n  },\r\n  {\r\n    id: 'eyetower',\r\n    name: 'Eye Tower',\r\n    idleImage: 'assets/hinters/eyetower-static.gif',\r\n    talkingImage: 'assets/hinters/eyetower.gif',\r\n  },\r\n  {\r\n    id: 'businessbobcat',\r\n    name: 'Business Bobcat',\r\n    imageType: 'spritesheet',\r\n    idleImage: 'assets/hinters/businesscat-static.gif',\r\n    talkingImage: 'assets/hinters/businesscat.gif',\r\n    ssData:{\r\n      idle:{\r\n        startAt: 2,\r\n        endAt: 4,\r\n        fps: 1,\r\n      },\r\n      talking:{\r\n        startAt: 1,\r\n        endAt: 2,\r\n        fps: 4,\r\n      }\r\n    },\r\n    spritesheetData: {\r\n      image: 'assets/hinters/sprites/bobcat.png',\r\n      widthFrame: 400,\r\n      heightFrame: 600,\r\n      startAt: 1,\r\n      endAt: 4,\r\n      steps: 4,\r\n      fps: 5\r\n    }\r\n  },\r\n  {\r\n    id: 'fridgey',\r\n    name: 'Fridgey',\r\n    idleImage: 'assets/hinters/fridgey-static.gif',\r\n    talkingImage: 'assets/hinters/fridgey.gif',\r\n  },\r\n  {\r\n    id: 'mothman',\r\n    name: 'Mothman',\r\n    idleImage: 'assets/hinters/mothman-static.gif',\r\n    talkingImage: 'assets/hinters/mothman.gif',\r\n  },\r\n  {\r\n    id: 'raincat',\r\n    name: 'Rain Cat',\r\n    idleImage: 'assets/hinters/raincat-static.gif',\r\n    talkingImage: 'assets/hinters/raincat.gif',\r\n    bottomBoost: 10,\r\n  }\r\n]\r\n\r\ntype GridShapeDef = {\r\n  [key: string]: RawCell[][]\r\n}\r\n\r\n\r\n/*\r\n  Making this stupid data structure that I wanna get rid of\r\n  its the row/column of each attribute\r\n  4 ->  [\r\n          [[0, 1], [ 0, 2 ], [ 0, 3 ]],\r\n          [[3, 1], [ 3, 2 ]],\r\n          [[2, 1]]\r\n        ],\r\n*/\r\nexport const generateGridShape = (size: number) => {\r\n  let gridShape = [];\r\n  for(let gsRow = 0; gsRow < size - 1; gsRow++){\r\n    let gridRow = [];\r\n    let rowIdx = gsRow === 0 ? 0 : size - gsRow;\r\n    for(let gsCol = 0; gsCol < size - 1 - gsRow; gsCol++){\r\n      gridRow.push([ rowIdx, gsCol + 1 ])\r\n    }\r\n    gridShape.push(gridRow);\r\n  }\r\n  return gridShape as RawCell[][];\r\n}\r\n\r\nconst generatedGrids: GridShapeDef = {};\r\nexport const getGridShape = (size:number)  => {\r\n  if(!generatedGrids[size]){\r\n    generatedGrids[size] = generateGridShape(size);\r\n  }\r\n  return generatedGrids[size];\r\n}\r\n\r\n// TODO, generate this\r\nexport const sampleAnswerData: AnswerData = [\r\n  [ 0, 0, 1, 0 ],\r\n  [ 2, 1, 2, 1 ],\r\n  [ 1, 2, 0, 2 ]\r\n]\r\n\r\n// TODO, generate this\r\nexport const RenderedAnswers: RenderedAnswer[] = [\r\n  {\r\n    attributes:[\r\n      ['animal', 'monkey'],\r\n      ['queue', 'first'],\r\n      ['emotion', 'angry'],\r\n      ['occupation', 'firefighter']\r\n    ]\r\n  },\r\n  {\r\n    attributes:[\r\n      ['animal', 'frog'],\r\n      ['queue', 'last'],\r\n      ['emotion', 'happy'],\r\n      ['occupation', 'clown']\r\n    ]\r\n  },\r\n  {\r\n    attributes:[\r\n      ['animal', 'fish'],\r\n      ['queue', 'second'],\r\n      ['emotion', 'sad'],\r\n      ['occupation', 'dentist']\r\n    ]\r\n  }\r\n]","export const RandIdx = (min:number, max:number) => {\r\n  return Math.floor(min + Math.random() * (max - min));\r\n}\r\n\r\nexport const RandBetween = (min:number, max:number) => {\r\n  return min + Math.random() * (max - min);\r\n}\r\n\r\nexport const RandFromArray = (array: any[]): any | null => {\r\n  if(array.length === 0) return null;\r\n  return array[Math.floor(Math.random() * array.length)]\r\n}\r\n\r\nexport const RandIdxFromArray = (array: any[]): number => {\r\n  if(array.length === 0) return -1;\r\n  return Math.floor(Math.random() * array.length)\r\n}","import { AnswerSet, AttributeDef, AttributeDetail, CalculatedHint, HintGiver, InfluenceRatio, InfluenceType, OrderDescription, RawRoundData, RoundData, SortComparison } from '../types';\r\nimport { RandFromArray, RandIdx, RandIdxFromArray } from './index';\r\n\r\n// what % of the time the same/different hint ratio is checked and attempted to be balanced;\r\nconst INFLUENCE_CALC = .75; // desired that 75% of the hints are for \"this IS that\" comparisons\r\nconst DESCRIPTOR_CHANCE = .4;\r\nconst PRUNE_RATE = .5; // what % of the time a used attribute is added to a block list\r\n\r\n  /*\r\n    when prefix, for alias \"swinging rat\"\r\n    The { alias } is not the first in line\r\n    The { alias } is angry\r\n    The { alias } is a monkey\r\n\r\n    when suffix, for descriptor \"has legs\"\r\n    The first in line { descriptor }\r\n    The angry one { descriptor }\r\n    The monkey { descriptor }\r\n\r\n    orderDescription \"is earlier in line than\"\r\n    orderDescription \"is later in line than\"\r\n    orderDescription \"was born before\"\r\n    orderDescription \"was born after\"\r\n    The {alias} {orderDescription} the one that {descriptor}\r\n  */\r\n\r\nexport const getPrefix = (attr: AttributeDetail) => {\r\n  const alias = RandFromArray(attr.aliases);\r\n\r\n  switch(attr.type){\r\n    case 'thing': {\r\n      if(alias) return `The ${alias}`;\r\n      return `The ${attr.value}`;\r\n    }\r\n    case 'name': {\r\n      if(alias) return `${alias}`;\r\n      return `${attr.value}`;\r\n    }\r\n    case 'modifier': {\r\n      if(alias) return `The ${alias} one`;\r\n      return `The ${attr.value} one`;\r\n    }\r\n    case 'order': {\r\n      if(alias) return `The ${alias}`;\r\n      return `The ${attr.value}`;\r\n    }\r\n    default: {\r\n      if(alias) return `The ${alias}`;\r\n      return `The ${attr.value}`;\r\n    }\r\n  }\r\n}\r\n\r\nexport const getSuffix = (attr: AttributeDetail, sameGroup: boolean, sortComparison: string | null) => {\r\n  const alias = RandFromArray(attr.aliases);\r\n  const descriptor = (Math.random() < DESCRIPTOR_CHANCE) ? null : RandFromArray(attr.descriptors);\r\n\r\n\r\n  switch(attr.type){\r\n    case 'thing': {\r\n      if(sortComparison) {\r\n        // 'THE_PREFIX {was born before} one that {has legs}'\r\n        if(descriptor) return`${sortComparison} one that ${descriptor}`;\r\n        // 'THE_PREFIX {was born before} the {monkey}'\r\n        return `${sortComparison} the ${attr.value}`;\r\n      } else if(descriptor && sameGroup){\r\n        // 'THE_PREFIX {has legs}'\r\n        return `${descriptor}`;\r\n      }\r\n      // 'THE_PREFIX {is:is not} a {monkey}'\r\n      return `${sameGroup ? 'is' : 'is not'} a ${attr.value}`;\r\n    }\r\n    case 'name': {\r\n      if(sortComparison) {\r\n        // 'THE_PREFIX {was born before} the {fat loser}'\r\n        if(descriptor) return`${sortComparison} the ${descriptor}`;\r\n        // 'THE_PREFIX {was born before} {Tom}'\r\n        return `${sortComparison} ${attr.value}`;\r\n      } else if(descriptor && sameGroup){\r\n        // 'THE_PREFIX {is a fat loser}'\r\n        return `${descriptor}`;\r\n      }\r\n      // 'THE_PREFIX {is:is not} {Tom}'\r\n      return `${sameGroup ? 'is' : 'is not'} ${attr.value}`;\r\n    }\r\n    case 'modifier': {\r\n      if(sortComparison) {\r\n        // 'THE_PREFIX {was born before} the {hot-headed} one'\r\n        if(alias) return`${sortComparison} the ${alias} one`;\r\n        // 'THE_PREFIX {was born before} the {angry} one'\r\n        return `${sortComparison} the ${attr.value} one`;\r\n      } else if(descriptor) {\r\n        // 'THE_PREFIX {is:is not} {having a bad time}'\r\n        return `${sameGroup ? 'is' : 'is not'} ${descriptor}`;\r\n      }\r\n      // 'THE_PREFIX {is:is not} {angry}'\r\n      return `${sameGroup ? 'is' : 'is not'} ${attr.value}`;\r\n    }\r\n    case 'order': {\r\n      // order will never have a sortComparison \r\n      if(descriptor) {\r\n        // 'THE_PREFIX {is:is not} {near the end of the line}'\r\n        return `${sameGroup ? 'is' : 'is not'} ${descriptor}`;\r\n      }\r\n      // 'THE_PREFIX {is:is not} the {first}'\r\n      return `${sameGroup ? 'is' : 'is not'} the ${attr.value}`;\r\n    }\r\n    default: {\r\n      if(sortComparison) {\r\n        // 'THE_PREFIX {was born before} a {some kind of thing}'\r\n        if(descriptor) return `${sortComparison} a ${descriptor}`;\r\n        // 'THE_PREFIX {was born before} a {something}'\r\n        return `${sortComparison} a ${attr.value}`;\r\n      } else if(descriptor) {\r\n        // 'THE_PREFIX {is: is not} a {some kind of thing}'\r\n        return `${sameGroup ? 'is' : 'is not'} a ${descriptor}`;\r\n      }\r\n      // 'THE_PREFIX {is: is not} a {something}'\r\n      return `${sameGroup ? 'is' : 'is not'} a ${attr.value}`;\r\n    }\r\n  }\r\n}\r\n\r\n// TODO, reach back out to data, find queues from group, pick one, get back sort order between group A and B, get value\r\nexport const getSortComparison = (attrA: AttributeDetail, attrB: AttributeDetail) => {\r\n  // find sorty attribute from group A and group B\r\n  // return if A > B\r\n  \r\n  // pick rand sort in list (in case there are birthdays and a.. line or something)\r\n  const rcIdx = RandIdxFromArray(attrA.sortComparisons);\r\n  if(rcIdx > -1){\r\n    return attrA.sortComparisons[rcIdx].value < attrB.sortComparisons[rcIdx].value ? \r\n      attrA.sortComparisons[rcIdx].orderDescriptions[0]\r\n      : attrA.sortComparisons[rcIdx].orderDescriptions[1];\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport const generateHintText = (attrA: AttributeDetail, attrB: AttributeDetail) => {\r\n  const sameGroup = attrA.solutionIdx === attrB.solutionIdx;\r\n\r\n  let sortComparison = null;\r\n  if(!sameGroup && attrA.attributeIdx !== attrB.attributeIdx && attrA.type !== 'order' && attrB.type !== 'order'){\r\n    sortComparison = getSortComparison(attrA, attrB);\r\n  }\r\n\r\n  const prefix = getPrefix(attrA);\r\n  const suffix = getSuffix(attrB, sameGroup, sortComparison);\r\n\r\n  return `${prefix} ${suffix}.`;\r\n}\r\n\r\n// when checking the 2nd attribute in a hint pair, you dont want to choose THE SAME attr/value combo\r\n// that the 1st attribute had. This is not filtered out yet, so go ahead and give it a skip\r\nexport const filterUsedHints = (attrGroup: AttributeDetail[], reservedAttr?: AttributeDetail) => {\r\n  if(!reservedAttr) return attrGroup;\r\n\r\n  return attrGroup.filter(attrDetail => {\r\n    // exact same comparison\r\n    if(reservedAttr.id === attrDetail.id) {\r\n      return false; // dont want to end up with \"the animal:monkey is not the animal:monkey\"\r\n    }\r\n    // same attribute comparison\r\n    else if(reservedAttr.attributeIdx === attrDetail.attributeIdx) {\r\n      if(reservedAttr.type === 'order'){ // if they have same attrIdx, they have the same type.\r\n        return false; // dont want to end up with \"the first is before the last\"\r\n      }\r\n\r\n      // might want to experiment with keeping this, and later in the comparison stack, \r\n      // when attrA and attrB have same attribute, use \"order\" to make a unique clue?\r\n      // where you can say \"the monkey was born before the cat\"\r\n      return false; // dont want to end up with \"the animal:monkey is the animal:cat\".. or do you?\r\n    }\r\n    return true;\r\n  });\r\n}\r\n\r\n// this needs a refactor, but it more or less can try to get more hints with an \"IS\" comparison vs \"IS NOT\"\r\nexport const influenceGroupIdx = (groupAttrs: AttributeDetail[][], reservedAttr?: AttributeDetail, influenceType?: InfluenceType) => {\r\n  if(!reservedAttr || !influenceType) return null;\r\n\r\n  const sameGroup = groupAttrs.find(attrDetails => \r\n    !!attrDetails.find(attrDetail => {\r\n      if(influenceType === 'same') return attrDetail.solutionIdx === reservedAttr.solutionIdx\r\n      return attrDetail.solutionIdx !== reservedAttr.solutionIdx // only other influenceType at this point is 'different'\r\n    })\r\n  );\r\n\r\n  if(sameGroup){\r\n    const filteredAttributes = filterUsedHints(sameGroup, reservedAttr);\r\n    if(filteredAttributes.length > 0){\r\n      return filteredAttributes;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport const chooseAttribute = (groupAttrDetails: AttributeDetail[][], reservedAttr?: AttributeDetail, influenceType?: InfluenceType) => {\r\n  // get an influence attribute if needed\r\n  let filteredAttributes = influenceGroupIdx(groupAttrDetails, reservedAttr, influenceType);\r\n  // otherwise, go the normal route\r\n  if(!filteredAttributes){\r\n    const group_idx = RandIdx(0, groupAttrDetails.length);\r\n  \r\n    const group = groupAttrDetails[group_idx];\r\n  \r\n    // just in case this is groupB, you dont want to match on the same attr/value that groupA had\r\n    filteredAttributes = filterUsedHints(group, reservedAttr);\r\n    if (!filteredAttributes || filteredAttributes.length === 0){\r\n      console.log('ran out of valid hint material for group');\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  return filteredAttributes[RandIdx(0, filteredAttributes.length)];\r\n} \r\n\r\nexport const generateSingleHint = (groupAttrDetails: AttributeDetail[][], influenceType?: InfluenceType): CalculatedHint | null => {\r\n  const attrA = chooseAttribute(groupAttrDetails);\r\n  if(!attrA) return null;\r\n\r\n  const attrB = chooseAttribute(groupAttrDetails, attrA, influenceType);\r\n  if(!attrB) return null;\r\n\r\n  const hintText = generateHintText(attrA, attrB);\r\n\r\n  return {\r\n    text: hintText,\r\n    used: [ attrA, attrB ]\r\n  }\r\n}\r\n\r\nexport const getSortComparisons = (attributes: AttributeDef[]) => {\r\n  const sortComparisons: SortComparison[] = [];\r\n  attributes.forEach((attr, idx) => {\r\n    if(attr.type === 'order'){\r\n      sortComparisons.push({\r\n        attributeIdx: idx,\r\n        orderDescriptions: attr.orderDescriptions as OrderDescription,\r\n        value: -1 // to be filled in later\r\n      })\r\n    }\r\n  });\r\n  /*\r\n    [\r\n      {\r\n        attributeIdx: 1,\r\n        value: -1,\r\n        orderDescriptions: ['before this'], ['after this']\r\n      }\r\n    ]\r\n  */\r\n  return sortComparisons;\r\n}\r\n\r\nexport const convertSolutionsToAttributeDetails = (solutions: AnswerSet, attributes: AttributeDef[]) => {\r\n  const rawSortComparisons = getSortComparisons(attributes);\r\n\r\n  return solutions.map((solution, sIdx) => {\r\n    const sortComparisons = rawSortComparisons.map(sC => ({...sC, value: solution[sC.attributeIdx]}));\r\n\r\n    return solution.map((vIdx, aIdx) => ({\r\n      type: attributes[aIdx].type,\r\n      attribute: attributes[aIdx].id,\r\n      attributeIdx: aIdx,\r\n      value: attributes[aIdx].values[vIdx].id,\r\n      valueIdx: vIdx,\r\n      solutionIdx: sIdx,\r\n      aliases: attributes[aIdx].values[vIdx].aliases,\r\n      descriptors: attributes[aIdx].values[vIdx].descriptors,\r\n      sortComparisons: sortComparisons,\r\n      id: `${sIdx}-${aIdx}-${vIdx}`\r\n    }));\r\n  });\r\n}\r\n\r\nexport const filterFromWorkingAttrs = (solutionDetails: AttributeDetail[][], usedAttributes: AttributeDetail[]) => {\r\n  return solutionDetails.map(solution => \r\n    solution.filter(attrDetail => {\r\n      if(usedAttributes.find(usedAttr => usedAttr.id === attrDetail.id)){\r\n        return false;\r\n      }\r\n      return true;\r\n    })\r\n  ).filter(solution => solution.length > 0);\r\n}\r\n\r\nexport const getInfluenceType = (curRatio: InfluenceRatio, influenceCalc: number): InfluenceType => {\r\n  // why compare if you know the answer\r\n  if(influenceCalc === 1) return 'same';\r\n  if(influenceCalc === 0) return 'different';\r\n\r\n  const ratioTotal = curRatio[0] + curRatio[1];\r\n  const calcRatio = ratioTotal === 0 ? .5 : curRatio[0] / (ratioTotal); // avoid divide by zero\r\n  return influenceCalc >= calcRatio ? 'same' : 'different';\r\n}\r\n\r\nexport const generateHints = (solutions: AnswerSet, attributes: AttributeDef[], hintGivers: HintGiver[], maxHints: number = 0) => {\r\n  const attrDetails = convertSolutionsToAttributeDetails(solutions, attributes);\r\n  const hints = [];\r\n\r\n  let workingAttrs = [...attrDetails];\r\n\r\n  // prevents attribute/value pairs (as in \"the monkey\") from getting used more than once across the hints\r\n  let usedAttributes: AttributeDetail[] = [];\r\n  let yesNoRatio: InfluenceRatio = [0,0];\r\n\r\n  let i = 0;\r\n  let hgIdx = Math.floor(Math.random() * hintGivers.length);\r\n\r\n  while(hints.length < maxHints && workingAttrs.length > 0){\r\n    if(i > 20){\r\n      console.error('overflow in hint generation');\r\n      break;\r\n    }\r\n    i++;\r\n    \r\n    const influenceType = getInfluenceType(yesNoRatio, INFLUENCE_CALC);\r\n    const generated = generateSingleHint(workingAttrs, influenceType);\r\n    // sometimes when an attribute group is all used up, the loop ends early.\r\n    // This is actually kinda nice for helping randomize the yes/no count and hint giver a bit\r\n    if(!generated) continue;\r\n\r\n    if(generated.used[0].solutionIdx === generated.used[1].solutionIdx){\r\n      yesNoRatio[0]++;\r\n    }else{\r\n      yesNoRatio[1]++;\r\n    }\r\n\r\n    if(Math.random() < PRUNE_RATE){\r\n      usedAttributes = usedAttributes.concat(generated.used);\r\n      workingAttrs = filterFromWorkingAttrs(workingAttrs, usedAttributes);\r\n    }\r\n\r\n    hints.push({\r\n      hintGiverIdx: (hgIdx + i) % hintGivers.length,\r\n      text: generated.text\r\n    });\r\n\r\n  }\r\n\r\n  return hints;\r\n}\r\n\r\nexport const parseRoundData = (rawRoundData: RawRoundData): RoundData => {\r\n  return rawRoundData as RoundData;\r\n}\r\n","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from './store';\r\nimport { AnswerSet, AttributeDef, AttributeMatrix, CellMatrix, CellObj, GameStatus, Hint, HintGiver, RenderedHint, RoundData, RoundInfo } from '../types';\r\nimport { getGridShape, SAMPLE_ROUNDDATA, HINT_GIVERS } from './data/data';\r\nimport { generateHints, parseRoundData } from '../utils/puzzler';\r\n\r\nconst MAX_HINTS = 8;\r\n\r\nexport interface GridState {\r\n  roundData: RoundData | null,\r\n  cellMatrix: CellMatrix,\r\n  hints: Hint[],\r\n  activeHintIdx: number,\r\n  solution: AnswerSet | null,\r\n  gameStatus: GameStatus,\r\n  roundIdx: number,\r\n  gameReady: boolean\r\n}\r\n\r\nconst initialState: GridState = {\r\n  roundData: null,\r\n  cellMatrix: [],\r\n  hints: [],\r\n  activeHintIdx: -1,\r\n  solution: null,\r\n  gameStatus: 'start',\r\n  roundIdx: -1,\r\n  gameReady: false\r\n};\r\n\r\n\r\nexport const gridSlice = createSlice({\r\n  name: 'board',\r\n  initialState,\r\n  reducers: {\r\n    resetMatrix: (state: GridState, action: PayloadAction<RoundData>) => {\r\n      const roundData = action.payload;\r\n      if(roundData.attributes?.length > 0){\r\n        const numAttributes = roundData.attributes.length || 0;\r\n        const numValues = roundData.attributes[0].values.length;\r\n        const boxSize = Math.pow(numValues, 2);\r\n\r\n        if(numAttributes > 1 && numAttributes < 6){\r\n          const solutionSet = calcSolution(numValues, numAttributes);\r\n\r\n          const gridShape = getGridShape(numAttributes);\r\n          const newMatrix = [];\r\n\r\n          let idx = 0;\r\n          for(let r = 0; r < gridShape.length; r++){\r\n            for(let c = 0; c < gridShape[r].length; c ++){\r\n              for(let bi = 0; bi < boxSize; bi++){\r\n                // [ 0, 1 ] is comparing attr0 and attr1\r\n                const attrPair = gridShape[r][c];\r\n                const xVal = Math.floor((idx % boxSize) / numValues);\r\n                const yVal = idx % numValues;\r\n\r\n                const ansMatrix: AttributeMatrix = [ [ attrPair[0], xVal ], [attrPair[1], yVal ] ]\r\n                const isSolution = isCellSolution(solutionSet, ansMatrix)\r\n\r\n                newMatrix.push({\r\n                  idx: idx++,\r\n                  attrs: attrPair,\r\n                  isSolution: isSolution,\r\n                  status: 0\r\n                } as CellObj)\r\n              }\r\n            }\r\n          }\r\n          state.solution = solutionSet;\r\n          state.cellMatrix = newMatrix;\r\n          state.gameReady = true;\r\n          state.gameStatus = 'playing';\r\n          state.activeHintIdx = 0;\r\n          state.hints = generateHints(solutionSet, roundData.attributes, HINT_GIVERS, MAX_HINTS);\r\n        } else{\r\n          console.error('must have between 2 and 5 attributes');\r\n          state.cellMatrix = [];\r\n        }\r\n      } else {\r\n        state.cellMatrix = [];\r\n      }\r\n    },\r\n    rotateCell: (state, action: PayloadAction<number>) => {\r\n      if(state.cellMatrix){\r\n        const nextStatus = getNextStatus(state.cellMatrix[action.payload]);\r\n        state.cellMatrix[action.payload].status = nextStatus;\r\n      }\r\n    },\r\n    setActiveHint: (state, action: PayloadAction<number>) => {\r\n      if(action.payload > -1 && !state.hints[action.payload]) console.error(`cannot set invalid hint ${action.payload}`);\r\n      state.activeHintIdx = action.payload;\r\n    },\r\n    submitAnswer: (state, action: PayloadAction<boolean>) => {\r\n      console.log('submitAnswer', action.payload);\r\n      if(action.payload === true){\r\n        state.gameStatus = 'roundWin';\r\n      }else{\r\n        state.gameStatus = 'invalidAnswer';\r\n      }\r\n    },\r\n    setGameStatus: (state, action: PayloadAction<GameStatus>) => {\r\n      state.gameStatus = action.payload;\r\n    },\r\n    startRound: (state, action: PayloadAction<number>) => {\r\n      state.gameReady = false;\r\n      state.gameStatus = 'loading';\r\n      state.roundIdx = getNextRoundIdx(action.payload - 1);\r\n    },\r\n    restartRound: (state) => {\r\n      state.gameReady = false;\r\n      state.gameStatus = 'loading';\r\n      state.roundIdx = getNextRoundIdx(state.roundIdx - 1);\r\n    },\r\n    startNextRound: (state) => {\r\n      state.gameReady = false;\r\n      state.gameStatus = 'loading';\r\n      state.roundIdx = getNextRoundIdx(state.roundIdx);\r\n    },\r\n  } \r\n});\r\n\r\nexport const { resetMatrix, rotateCell, setActiveHint, submitAnswer, startRound, startNextRound, restartRound, setGameStatus } = gridSlice.actions;\r\n\r\n\r\n\r\n// answer set is the raw attributes (in order) and their values\r\n/// [1, 1, 1] would mean a valueIdx of 1 for attributes 0, 1, and 2\r\n\r\n// attrMatrix is a 2d array of attrIdx and numberIdx, so [[0,0],[2,0]] compares the 1st val of attr[0] with the 1st value of attr[2]\r\nexport const isCellSolution = (answerSet: AnswerSet, attrMatrix: AttributeMatrix) => {\r\n  for(let a = 0; a < answerSet.length; a++){\r\n    if(attrMatrix.filter(attrPair => answerSet[a][attrPair[0]] === attrPair[1]).length === 2) return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n// make a unique combination of each attribute/value, with no overlaps.\r\n// This is the solution to the current truth table.\r\nconst calcSolution = (numAnswers: number, numAttributes:number): AnswerSet => {\r\n  const availableAttributes = [];\r\n  for(let i = 0; i < numAttributes; i++){\r\n    availableAttributes.push(Array.from(Array(numAnswers).keys()))\r\n  }\r\n\r\n  let generatedAnswer = [];\r\n  for(let i = 0; i < numAnswers; i++){\r\n    let answerAttrs = [];\r\n    for(let i = 0; i < availableAttributes.length; i++){\r\n      const randIdx = Math.floor(Math.random() * availableAttributes[i].length);\r\n      answerAttrs.push(availableAttributes[i][randIdx]);\r\n      availableAttributes[i].splice(randIdx, 1);\r\n    }\r\n    generatedAnswer.push(answerAttrs)\r\n  }\r\n\r\n  return generatedAnswer;\r\n}\r\n\r\n// blank > no > yes > maybe > blank\r\nconst getNextStatus = (cellObj: CellObj) => {\r\n  try{\r\n    switch(cellObj.status){\r\n      case 0: return 2;\r\n      case 2: return 1;\r\n      case 1: return 0;\r\n    }\r\n  } catch(e){\r\n    console.error('unexpected lookup for cellObj', cellObj)\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n\r\nexport const getCellMatrix = (state: RootState) => state.board.cellMatrix;\r\nexport const getSolution = (state: RootState) => state.board.solution;\r\nexport const getHints = (state: RootState) => state.board.hints;\r\nexport const getActiveHintIdx = (state: RootState) => state.board.activeHintIdx;\r\nexport const getGameStatus = (state: RootState) => state.board.gameStatus;\r\nexport const getRoundIdx = (state: RootState) => state.board.roundIdx;\r\nexport const getGameReady = (state: RootState) => state.board.gameReady;\r\n\r\nexport const renderHint = (hint: Hint) => ({\r\n  hintGiver: HINT_GIVERS[hint.hintGiverIdx],\r\n  text: hint.text\r\n});\r\n\r\nexport const getNextRoundIdx = (curIdx: number) => {\r\n  if(curIdx + 1 < SAMPLE_ROUNDDATA.length){\r\n    return curIdx + 1;\r\n  }\r\n\r\n  // for now, just start over!\r\n  return 0;\r\n};\r\n\r\nexport const selectRoundData = createSelector(\r\n  [getRoundIdx],\r\n  (roundIdx): RoundData => {\r\n    return parseRoundData(SAMPLE_ROUNDDATA[roundIdx])\r\n  }\r\n);\r\n\r\nexport const selectRoundInfo = createSelector(\r\n  [selectRoundData, getRoundIdx],\r\n  (roundData, roundIdx): RoundInfo | null => {\r\n    if(!roundData) return null;\r\n    return {\r\n      title: roundData.title,\r\n      description: roundData.description,\r\n      level: roundIdx + 1\r\n    }\r\n  }\r\n);\r\n\r\nexport const selectHints = createSelector(\r\n  [getHints],\r\n  (hints): RenderedHint[] => hints.map(h => renderHint(h))\r\n);\r\n\r\nexport const selectActiveHint = createSelector(\r\n  [getHints, getActiveHintIdx],\r\n  (hints, activeHintIdx): RenderedHint | null => {\r\n    if(activeHintIdx === -1){\r\n      return null;\r\n    }\r\n\r\n    return renderHint(hints[activeHintIdx]);\r\n  }\r\n);\r\n\r\nexport const selectActiveHintGiver = createSelector(\r\n  [selectActiveHint],\r\n  (activeHint): HintGiver | null => activeHint?.hintGiver || null\r\n);\r\n\r\nexport const selectAttributes = createSelector(\r\n  [selectRoundData],\r\n  (roundData) => roundData.attributes\r\n);\r\n\r\nexport const selectGridInfo = createSelector(\r\n  [selectRoundData],\r\n  (roundData) => ({\r\n    numAttributes: roundData.attributes.length,\r\n    gridSize: roundData.attributes[0].values.length\r\n  })\r\n);\r\n\r\nexport const selectGridLabels = createSelector(\r\n  [selectAttributes],\r\n  (attributes): [ rows: AttributeDef[], cols: AttributeDef[] ] => {\r\n    const gridShape = getGridShape(attributes.length);\r\n    const rowAttributes = gridShape.map(r => r[0][0]);\r\n    const colAttributes = gridShape[0].map(rc => rc[1]);\r\n\r\n    return [\r\n      rowAttributes.map(idx => attributes[idx]),\r\n      colAttributes.map(idx => attributes[idx])\r\n    ]\r\n  }\r\n);\r\n\r\nexport const selectGridBox = createSelector(\r\n  [selectRoundData, getCellMatrix],\r\n  (roundData, cellMatrix) => {\r\n    const gridShape = getGridShape(roundData.attributes.length);\r\n    const numValues = roundData.attributes[0].values.length;\r\n    let idx = 0;\r\n    const gridSize = gridShape[0].length;\r\n\r\n    const boxSize = Math.pow(numValues, 2);\r\n    return gridShape?.map((row, rIdx) => {\r\n      return [...Array(gridSize)].map((_, cIdx) => {\r\n        let boxArr: CellObj[] = [];\r\n        if(!gridShape[rIdx][cIdx]){\r\n          // handles empty cells in larger maps\r\n          return boxArr;\r\n        }\r\n\r\n        for(let i = 0; i < boxSize; i++){\r\n          boxArr.push(\r\n            cellMatrix[idx++]\r\n          )\r\n        }\r\n        return boxArr;\r\n      })\r\n    })\r\n  }\r\n);\r\n\r\nexport const selectSolution = createSelector(\r\n  [getSolution, selectAttributes],\r\n  (solution, attributes) => solution?.map(solution => \r\n    solution.map((vIdx,sIdx) => \r\n      attributes[sIdx].values[vIdx].id\r\n    )\r\n  )\r\n);\r\n\r\n// if every \"solution\" cell has a 1 status, and there are not extra answers\r\nexport const checkIfSolved = createSelector(\r\n  [getCellMatrix],\r\n  (cellMatrix) => {\r\n    const numExpected = cellMatrix.filter(cell => cell.isSolution).length;\r\n    const answeredCells = cellMatrix.filter(cell => cell.status === 1);\r\n    if(answeredCells.length !== numExpected) return false;\r\n\r\n    const expectedCells = cellMatrix.filter(cell => cell.isSolution);\r\n    for(let i = 0; i < expectedCells.length; i++){\r\n      if(!answeredCells.find(aC => aC.idx === expectedCells[i].idx)){\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n);\r\n\r\nexport default gridSlice.reducer;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { checkIfSolved, setGameStatus, submitAnswer } from '../../app/slice';\r\n\r\nconst StyledButton = styled.div`\r\n  border-radius: 1rem;\r\n  border: .4rem solid ${getColor('brown')};\r\n  cursor: pointer;\r\n  transition: background-color .1s, border-color .2s, box-shadow .15s, transform .15s;\r\n  text-align:center;\r\n  font-size:2.5rem;\r\n  padding: .5rem .5rem;\r\n  \r\n  &:active{\r\n    transform: translate(.35rem, .35rem);\r\n  }\r\n`;\r\n\r\nconst StyledSolvedButton = styled(StyledButton)`\r\n  padding: 1.5rem .5rem;\r\n\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('green')};\r\n  border-color: ${getColor('green_light')};\r\n  box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('green_light')};\r\n\r\n  &:hover{\r\n    border-color: ${getColor('white')};\r\n  }\r\n`;\r\n\r\nconst StyledHelpButton = styled(StyledButton)`\r\n  padding: 0.25rem .5rem;\r\n  color: ${getColor('brown_dark')};\r\n  background-color:${getColor('yellow')};\r\n  border-color: ${getColor('yellow_light')};\r\n  box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('yellow_light')};\r\n  \r\n  &:hover{\r\n    border-color: ${getColor('white')};\r\n  }\r\n  &:active{\r\n    background-color: ${getColor('yellow')};\r\n    border-color: ${getColor('yellow_light')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('yellow_light')};\r\n  }\r\n`;\r\n\r\nconst StyledContainer = styled.div`\r\n  ${StyledButton}{\r\n    margin:1rem;\r\n  }\r\n`;\r\n\r\nexport function BoardControls() {\r\n  const solved = useAppSelector(checkIfSolved);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const onSubmitGame = useCallback((solved:boolean, forceWin?: boolean) => {\r\n    dispatch(submitAnswer(forceWin || solved));\r\n  }, [ dispatch ]);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledHelpButton onClick={() => dispatch(setGameStatus('help'))}>{'HELP!'}</StyledHelpButton>\r\n      <StyledSolvedButton onClick={() => onSubmitGame(solved)}>{'SUBMIT'}</StyledSolvedButton>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { CellObj, CellStatus, RawCell } from '../../types';\r\nimport { rotateCell, selectGridBox, selectGridLabels, selectGridInfo } from '../../app/slice';\r\nimport { BoardControls } from '../board/board-controls';\r\n\r\nconst StyledBoard = styled.div`\r\n  position:absolute;\r\n  transform: matrix(2.5,1.25,-2.5,1.25,-300,-0) scale(.4) translate(-50%, -50%);\r\n  left:50%;\r\n  top:40%;\r\n\r\n  display:grid;\r\n  grid-template-columns: 15rem 13rem 13rem 13rem; \r\n  grid-template-rows: 15rem 13rem 13rem 13rem; \r\n  column-gap: 2rem;\r\n  row-gap: 2rem;\r\n  color: ${getColor('brown_light')};\r\n\r\n  >div{\r\n    display:grid;\r\n    column-gap: 2rem;\r\n    row-gap: 2rem;\r\n  }\r\n`\r\n\r\nconst StyledLeftLabels = styled.div`\r\n  grid-column: 15rem;\r\n  grid-row: 2 / span 3;\r\n  \r\n  grid-template-columns: 15rem; \r\n  grid-template-rows: 13rem 13rem 13rem;\r\n`\r\n\r\ntype StyledLabelProps = {\r\n  gridSize: number\r\n}\r\nconst StyledLeftLabel = styled.div<StyledLabelProps>`\r\n  text-align:right;\r\n  ${p => p.gridSize === 4 ? css`\r\n    padding-top:0rem;\r\n    height: 25%;\r\n  `: css`\r\n    padding-top:1rem;\r\n    height: 33%;\r\n  `}\r\n\r\n  padding-right:1rem;\r\n  position:relative;\r\n  >span{\r\n    font-size: 3.5rem;\r\n    font-weight: 600;\r\n\r\n    position:absolute;\r\n    right:0;\r\n    white-space:nowrap;\r\n  }\r\n`\r\nconst StyledTopLabels = styled.div`\r\n  grid-column: 2 / span 3;\r\n  grid-row: 15rem;\r\n  \r\n  grid-template-columns: 13rem 13rem 13rem;\r\n  grid-template-rows: 15rem;\r\n`\r\nconst StyledTopLabel = styled.div<StyledLabelProps>`\r\n  display:inline-block;\r\n  ${p => p.gridSize === 4 ? css`\r\n    width: 25%;\r\n  `: css`\r\n    width: 33%;\r\n  `}\r\n  height: 100%;\r\n  position:relative;\r\n\r\n  span{\r\n    display:block;\r\n    position: absolute;\r\n\r\n    font-size: 3.5rem;\r\n    font-weight: 600;\r\n\r\n    ${p => p.gridSize === 4 ? css`\r\n      left: 1rem;\r\n    `: css`\r\n      left: 2rem;\r\n    `}\r\n    bottom: -1.5rem;\r\n    display: block;\r\n    white-space: nowrap;\r\n    transform-origin: left;\r\n    transform: rotate(-90deg);\r\n  }\r\n`\r\nconst StyledCells = styled.div`\r\n  grid-column: 2 / span 3;\r\n  grid-row: 2 / span 3;\r\n\r\n  grid-template-columns: 13rem 13rem 13rem;\r\n  grid-template-rows: 13rem 13rem 13rem;\r\n`\r\nconst StyledRawCellGroup = styled.div`\r\n  display:grid;\r\n  column-gap: .6rem;\r\n  row-gap: .6rem;\r\n`\r\ntype StyledCellGroupProps = {\r\n  gridSize: number,\r\n  cellRatio: string\r\n}\r\nconst StyledCellGroup = styled(StyledRawCellGroup)<StyledCellGroupProps>`\r\n  display:grid;\r\n  grid-template-columns: repeat(${p => p.gridSize}, ${p => p.cellRatio});\r\n  grid-template-rows: repeat(${p => p.gridSize}, ${p => p.cellRatio});\r\n  column-gap: .6rem;\r\n  row-gap: .6rem;\r\n\r\n  /* \r\n    grid-column: 1 i[ix]\r\n    grid-row: 2 i\r\n  */\r\n`\r\ntype StyledCellProps = {\r\n  status: CellStatus,\r\n  isSolution?: boolean\r\n}\r\nconst StyledCell = styled.div<StyledCellProps>`\r\n  border-radius: 1rem;\r\n  border: .4rem solid ${getColor('brown')};\r\n  cursor: pointer;\r\n  transition: background-color .1s, border-color .2s, box-shadow .15s, transform .15s;\r\n\r\n  ${p => p.status === 0 && css`\r\n    background-color:${getColor('brown')};\r\n    border-color: ${getColor('white')};\r\n    box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('white')};\r\n  `};\r\n  ${p => p.status === 1 && css`\r\n    background-color:${getColor('green')};\r\n    border-color: ${getColor('green_light')};\r\n    box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('green_light')};\r\n  `};\r\n  ${p => p.status === 2 && css`\r\n    background-color:${getColor('red_light')};\r\n    border-color: ${getColor('pink')};\r\n    box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('pink')};\r\n  `};\r\n  &:hover{\r\n    ${p => p.status === 0 && css`\r\n      border-color: ${getColor('pink')};\r\n    `};\r\n    ${p => p.status === 1 && css`\r\n      border-color: ${getColor('white')};\r\n    `};\r\n    ${p => p.status === 2 && css`\r\n      border-color: ${getColor('green_light')};\r\n    `};\r\n  }\r\n  \r\n  &:active{\r\n    transform: translate(.35rem, .35rem);\r\n\r\n    ${p => p.status === 0 && css`\r\n      background-color: ${getColor('red_light')};\r\n      border-color: ${getColor('pink')};\r\n      box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('pink')};\r\n    `};\r\n    ${p => p.status === 1 && css`\r\n      background-color: ${getColor('brown')};\r\n      border-color: ${getColor('white')};\r\n      box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('white')};\r\n    `};\r\n    ${p => p.status === 2 && css`\r\n      background-color: ${getColor('green')};\r\n      border-color: ${getColor('green_light')};\r\n      box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('green_light')};\r\n    `};\r\n  }\r\n`\r\nconst BlankCellGroup = styled(StyledRawCellGroup)`\r\n  background-color: ${getColor('white')};\r\n  opacity: .2;\r\n`\r\n\r\nconst StyledControls = styled.div`\r\n  grid-column: 1 / span 1;\r\n  grid-row: 1 / span 1;\r\n  position:absolute;\r\n  bottom:0;\r\n  right:0;\r\n`;\r\n\r\nexport function Board() {\r\n  const dispatch = useAppDispatch();\r\n  const grid = useAppSelector(selectGridBox);\r\n  const gridLabels = useAppSelector(selectGridLabels);\r\n  const gridInfo = useAppSelector(selectGridInfo);\r\n\r\n  const onClickCell = useCallback((cellIdx) => {\r\n    dispatch(rotateCell(cellIdx));\r\n  }, [ dispatch ]);\r\n\r\n  const cellRatio = useMemo(() => {\r\n    if(gridInfo.gridSize === 3) {\r\n      return '30%';\r\n    } else if(gridInfo.gridSize === 4) {\r\n      return '20%';\r\n    }\r\n    return `${Math.round(100 / gridInfo.gridSize)}%`;\r\n  }, [ gridInfo.gridSize ])\r\n\r\n\r\n  const renderCellGroup = (cellGroup: CellObj[], cgKey: string, gridSize: number, cellRatio: string, boardCell: RawCell) => {\r\n    // [0] check here cause this is all janky and the individual cells are undefined on load\r\n    if(cellGroup.length > 0 && cellGroup[0]){\r\n      return (\r\n        <StyledCellGroup \r\n          key={cgKey}\r\n          gridSize={gridSize}\r\n          cellRatio={cellRatio}\r\n          style={{gridRow: `${boardCell[0] + 1} / span 1`, gridColumn: `${boardCell[1] + 1} / span 1`}}\r\n        >\r\n          {cellGroup.map(cell => (\r\n            <StyledCell \r\n              key={`cell${cell?.idx}`}\r\n              status={cell.status}\r\n              isSolution={cell.isSolution}\r\n              onClick={() => onClickCell(cell.idx)}\r\n            />\r\n          ))}\r\n        </StyledCellGroup>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <BlankCellGroup \r\n        key={cgKey} \r\n        style={{gridRow: `${boardCell[0] + 1} / span 1`, gridColumn: `${boardCell[1] + 1} / span 1`}}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledBoard>\r\n      <StyledControls>\r\n        <BoardControls />\r\n      </StyledControls>\r\n      <StyledCells>\r\n        {grid.map((gridRow, grIdx) => (\r\n          gridRow.map((cellGroup, cgIdx) => renderCellGroup(cellGroup, `cg${cgIdx}`, gridInfo.gridSize, cellRatio, [grIdx, cgIdx])\r\n        )))}\r\n      </StyledCells>\r\n      <StyledTopLabels>\r\n        {gridLabels[1].map((gl, glIdx) => (\r\n          <div key={`tl${glIdx}`}>\r\n            {gl.values.map((v,vIdx) => (\r\n              <StyledTopLabel key={`tv${vIdx}`} gridSize={gridInfo.gridSize}>\r\n                <span>{v.id.toUpperCase()}</span>\r\n              </StyledTopLabel>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </StyledTopLabels>\r\n      <StyledLeftLabels>\r\n        {gridLabels[0].map((gl, glIdx) => (\r\n          <div key={`ll${glIdx}`}>\r\n            {gl.values.map((v,vIdx) => (\r\n              <StyledLeftLabel key={`lv${vIdx}`} gridSize={gridInfo.gridSize}>\r\n                <span>{v.id.toUpperCase()}</span>\r\n              </StyledLeftLabel>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </StyledLeftLabels>\r\n    </StyledBoard>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { MouseEventHandler } from 'hoist-non-react-statics/node_modules/@types/react';\r\nimport { getColor } from '../themes';\r\n\r\nconst StyledButton = styled.div`\r\n  border-radius: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color .1s, border-color .2s, box-shadow .15s, transform .15s;\r\n  text-align:center;\r\n  padding: 1.0rem .25rem;\r\n  span{\r\n    font-size:2.5rem;\r\n  }\r\n  \r\n  &:hover{\r\n    transform: translate(-.15rem, -.15rem);\r\n  }\r\n  &:active{\r\n    transform: translate(.45rem, .65rem);\r\n  }\r\n`\r\n\r\nconst StyledPositiveButton = styled(StyledButton)`\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('green')};\r\n  box-shadow: 0.4rem 0.5rem 0 0.4rem ${getColor('green_light')};\r\n\r\n  &:hover{\r\n    box-shadow: 0.6rem 0.75rem 0 0.4rem ${getColor('green_light')};\r\n  }\r\n  &:active{\r\n    background-color:${getColor('green')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.0rem ${getColor('green_light')};\r\n  }\r\n`;\r\n\r\nconst StyledNegativeButton = styled(StyledButton)`\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('red')};\r\n  box-shadow: 0.4rem 0.5rem 0 0.4rem ${getColor('red_light')};\r\n\r\n  &:hover{\r\n    box-shadow: 0.6rem 0.75rem 0 0.4rem ${getColor('red_light')};\r\n  }\r\n  &:active{\r\n    background-color:${getColor('red')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.0rem ${getColor('red_light')};\r\n  }\r\n`;\r\n\r\nconst StyledSpecialButton = styled(StyledButton)`\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('yellow_dark')};\r\n  box-shadow: 0.4rem 0.5rem 0 0.4rem ${getColor('yellow')};\r\n\r\n  &:hover{\r\n    box-shadow: 0.6rem 0.75rem 0 0.4rem ${getColor('yellow')};\r\n  }\r\n  &:active{\r\n    background-color:${getColor('yellow_dark')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.0rem ${getColor('yellow')};\r\n  }\r\n`;\r\n\r\n\r\nconst StyledNeutralButton = styled(StyledButton)`\r\n  padding: 1.5rem .5rem;\r\n\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('brown_dark')};\r\n  box-shadow: 0.4rem 0.5rem 0 0.4rem ${getColor('brown')};\r\n\r\n  &:hover{\r\n    box-shadow: 0.6rem 0.75rem 0 0.4rem ${getColor('brown')};\r\n  }\r\n  &:active{\r\n    background-color:${getColor('brown_dark')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.0rem ${getColor('brown')};\r\n  }\r\n`;\r\n\r\ntype ButtonType = 'positive' | 'negative' | 'special' | 'neutral';\r\n\r\ninterface LBType {\r\n  onClick: MouseEventHandler,\r\n  text: string,\r\n  buttonType?: ButtonType\r\n}\r\n\r\nexport function Button({ onClick, text, buttonType }: LBType) {\r\n  switch(buttonType){\r\n    case 'positive': return (\r\n      <StyledPositiveButton onClick={onClick}><span>{text}</span></StyledPositiveButton>\r\n    )\r\n    case 'negative': return (\r\n      <StyledNegativeButton onClick={onClick}><span>{text}</span></StyledNegativeButton>\r\n    )\r\n    case 'special': return (\r\n      <StyledSpecialButton onClick={onClick}><span>{text}</span></StyledSpecialButton>\r\n    )\r\n    default: return (\r\n      <StyledNeutralButton onClick={onClick}><span>{text}</span></StyledNeutralButton>\r\n    )\r\n  }\r\n}\r\n","import styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { Button } from '../../components/button';\r\nimport { restartRound, selectSolution, setGameStatus, startNextRound, startRound } from '../../app/slice';\r\nimport { getColor } from '../../themes';\r\n\r\nconst StyledButtonContainer = styled.div`\r\n  flex: 1;\r\n  >div{\r\n    margin:2rem;\r\n  }\r\n`;\r\n\r\nconst StyledBody = styled.div`\r\n  margin-top:-1.5rem;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst StyledContainer = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n\r\n  padding:1.5rem;\r\n  text-align:center;\r\n`;\r\n\r\nconst StyledWebsiteLink = styled.a`\r\n  font-size: 3rem;\r\n  color: ${getColor('black')};\r\n\r\n  &:hover{\r\n    color: ${getColor('white')};\r\n  }\r\n`\r\n\r\nexport function WinModal() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledBody>\r\n        <h2>{'CORRECT!'}</h2>\r\n      </StyledBody>\r\n      <StyledButtonContainer>\r\n        <Button text={'NEXT LEVEL'} onClick={() => dispatch(startNextRound())} />\r\n        <Button buttonType={'special'} text={'REPLAY LEVEL'} onClick={() => dispatch(startNextRound())} />\r\n      </StyledButtonContainer>\r\n    </StyledContainer>\r\n  );\r\n}\r\n\r\nexport function InvalidAnswerModal() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledBody>\r\n        <h2>{'INCORRECT!'}</h2>\r\n        <p>{'Every green cell must match the solution'}</p>\r\n      </StyledBody>\r\n      <StyledButtonContainer>\r\n        <Button buttonType={'positive'} text={'KEEP TRYING'} onClick={() => dispatch(setGameStatus('playing'))} />\r\n        <Button buttonType={'special'} text={'RESET LEVEL'} onClick={() => dispatch(restartRound())} />\r\n        <Button buttonType={'negative'} text={'SKIP TO NEXT LEVEL!'} onClick={() => dispatch(startNextRound())} />\r\n      </StyledButtonContainer>\r\n    </StyledContainer>\r\n  );\r\n}\r\n\r\nexport function SplashModal() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledBody>\r\n        <h2>{'TRUTH TABLES'}</h2>\r\n        <p>{'Some kinda puzzle game'}</p>\r\n      </StyledBody>\r\n      <StyledButtonContainer>\r\n        <Button text={'OK'} onClick={() => dispatch(startRound(0))} />\r\n      </StyledButtonContainer>\r\n    </StyledContainer>\r\n  );\r\n}\r\n\r\nconst StyledDebug = styled.div`\r\n  margin: 2rem;\r\n\r\n  li{\r\n    list-style:none;\r\n  }\r\n`\r\n\r\nconst StyledInstructions = styled.ul`\r\n  text-align:left;\r\n`;\r\n\r\nexport function HelpModal() {\r\n  const dispatch = useAppDispatch();\r\n  const renderedSolution = useAppSelector(selectSolution);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <h2>{'HELP!'}</h2>\r\n      \r\n      <StyledInstructions>\r\n        <li><p>{'Click the characters at the bottom of the screen to reveal clues about the puzzle'}</p></li>\r\n        <li><p>{'Click the grid cells to cycle between RED (no) and GREEN (yes)'}</p></li>\r\n        <li><p>{'After selecting all of the correct GREEN tiles, click SUBMIT to see if you have the answer correct'}</p></li>\r\n        <li><p>{'The RED tiles do not need to be filled in to solve the puzzle, but they can be used to help you rule out information!'}</p></li>\r\n        <li><p>{'Each attribute combination can only be used once'}</p></li>\r\n        <li><p>{'You may have to iterate through the clues multiple times to arrive at an answer'}</p></li>\r\n      </StyledInstructions>\r\n      \r\n      <StyledDebug>\r\n        <p>{'DEBUG SOLUTION'}</p>\r\n        <ul>\r\n          {renderedSolution?.map((rS, idx) => (\r\n            <li key={idx}><span>{`${rS.join(' | ')}`}</span></li>\r\n          ))}\r\n        </ul>\r\n      </StyledDebug>\r\n      <StyledButtonContainer>\r\n        <Button text={'OK'} onClick={() => dispatch(setGameStatus('playing'))} />\r\n        <StyledWebsiteLink href=\"https://www.thomasyancey.com\" target=\"_blank\" title=\"see some of my other stuff\">{'thomasyancey.com'}</StyledWebsiteLink>\r\n      </StyledButtonContainer>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { GameStatus } from '../../types';\r\nimport { getGameStatus } from '../../app/slice';\r\nimport { HelpModal, SplashModal, WinModal, InvalidAnswerModal } from './modals';\r\n\r\nconst StyledContainer = styled.div`\r\n  position:fixed;\r\n  left:0;\r\n  top:0;\r\n  right:0;\r\n  bottom:0;\r\n  z-index:5;\r\n`;\r\nconst StyledModal = styled.div`\r\n  position:absolute;\r\n\r\n  left:50%;\r\n  top:50%;\r\n  transform: translate(-50%, -50%);\r\n  max-width:80%;\r\n  max-height:80%;\r\n  border-radius:2rem;\r\n\r\n  background-color: ${getColor('brown_light')};\r\n  color: ${getColor('brown_dark')};\r\n  border: 0.75rem solid ${getColor('brown_dark')};\r\n\r\n  padding:1rem;\r\n`;\r\n\r\nconst StyledModalBg = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  right:0;\r\n  top:0;\r\n  bottom:0;\r\n  background-color: ${getColor('brown')};\r\n  opacity: .95;\r\n  z-index:-1;\r\n`;\r\n\r\nexport const getModal = (gameStatus: GameStatus) => {\r\n  switch(gameStatus){\r\n    case 'start': return <SplashModal />\r\n    case 'roundWin': return <WinModal />\r\n    case 'invalidAnswer': return <InvalidAnswerModal />\r\n    case 'help': return <HelpModal />\r\n    default: return null;\r\n  }\r\n}\r\n\r\nexport function Modal() {\r\n  const gameStatus = useAppSelector(getGameStatus);\r\n  const modal = getModal(gameStatus);\r\n  if(!modal) return null;\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledModal>\r\n        {modal}\r\n      </StyledModal>\r\n      <StyledModalBg />\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { useAppDispatch } from '../../app/hooks';\r\nimport { getGameStatus, resetMatrix, selectRoundData } from '../../app/slice';\r\nimport { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function RuleMaster() {\r\n  const dispatch = useAppDispatch();\r\n  const roundData = useSelector(selectRoundData);\r\n  const gameStatus = useSelector(getGameStatus);\r\n\r\n  // eventually, should move this logic into the slice somehow\r\n  useEffect(() => {\r\n    if(roundData && gameStatus === 'loading') {\r\n      dispatch(resetMatrix(roundData));\r\n    }\r\n  }, [dispatch, roundData, gameStatus]);\r\n\r\n  return null;\r\n}\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\ntype SpeechTextProps = {\r\n  text: string,\r\n  onTextComplete: Function\r\n}\r\n\r\nlet innerTimer: NodeJS.Timeout;\r\nlet innerText = '';\r\n\r\nexport function SpeechText({ text, onTextComplete }: SpeechTextProps) {\r\n  const [ curText, setCurText ] = useState('');\r\n  const [ isComplete, setIsComplete ] = useState(false);\r\n  const getNextText = (partial: string, full: string) => {\r\n    return full.slice(0, partial.length + 1);\r\n  }\r\n\r\n  const nextTextPlease = useCallback((fullText: string, reset?: boolean) => {\r\n    if(reset) innerText = '';\r\n    innerTimer = setTimeout(() => {\r\n      innerText = getNextText(innerText, fullText);\r\n      setCurText(innerText);\r\n\r\n      if(innerText.length !== fullText.length){\r\n        nextTextPlease(fullText);\r\n      }else{\r\n        setIsComplete(true);\r\n      }\r\n    }, 50);\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setCurText('');\r\n    setIsComplete(false);\r\n    nextTextPlease(text, true);\r\n\r\n    return () => {\r\n      clearTimeout(innerTimer);\r\n    }\r\n  }, [ text, nextTextPlease ]);\r\n\r\n  useEffect(() => {\r\n    if(isComplete) onTextComplete();\r\n  }, [ isComplete, onTextComplete ]);\r\n  \r\n  return (\r\n    <p>{curText}</p>\r\n  );\r\n}\r\n","import { useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { getActiveHintIdx, selectHints, setActiveHint } from '../../app/slice';\r\n\r\nconst StyledContainer = styled.div`\r\n  pointer-events: none;\r\n`;\r\n\r\nconst StyledControls = styled.ul`\r\n  text-align:center;\r\n  >div{\r\n    display:inline-block;\r\n    pointer-events: all;\r\n  }\r\n`;\r\n\r\ninterface StyledHintProps {\r\n  isActive?: boolean;\r\n};\r\n\r\nconst StyledHint = styled.div<StyledHintProps>`\r\n  cursor: pointer;\r\n\r\n  background-color: ${getColor('brown_light')};\r\n\r\n  width: 5rem;\r\n  height: 5rem;\r\n  margin: .25rem;\r\n  border: .75rem solid ${getColor('brown')};\r\n  border-radius: 1.5rem;\r\n  transition: all .3s;\r\n\r\n  &:hover{  \r\n    width: 7rem;\r\n    height: 6rem;\r\n    background-color: ${getColor('yellow_light')};\r\n\r\n    transition: all .3s;\r\n  }\r\n\r\n  ${p => p.isActive && css`\r\n    background-color: ${getColor('yellow')};\r\n\r\n    width: 8rem;\r\n    height: 8rem;\r\n\r\n    &:hover{  \r\n      width: 9rem;\r\n      height: 9rem;\r\n      background-color: ${getColor('pink')};\r\n\r\n      transition: all .3s;\r\n    }\r\n  `}\r\n`;\r\n\r\nexport function HintPicker() {\r\n  const activeHintIdx = useAppSelector(getActiveHintIdx);\r\n  const hints = useAppSelector(selectHints);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const onCloseHint = useCallback(() => {\r\n    dispatch(setActiveHint(-1));\r\n  }, [dispatch]);\r\n\r\n  const onClickHint = useCallback((hintIdx) => {\r\n    dispatch(setActiveHint(hintIdx));\r\n  }, [ dispatch ]);\r\n\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledControls>\r\n        {hints?.map((hint, idx) => \r\n          idx === activeHintIdx ? (\r\n            <StyledHint \r\n              key={idx}\r\n              onClick={() => onCloseHint()}\r\n              isActive={true}\r\n            />\r\n          ):(\r\n            <StyledHint \r\n              key={idx}\r\n              onClick={() => onClickHint(idx)}\r\n            />\r\n          )\r\n        )}\r\n      </StyledControls>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { HintGiver, SpritesheetOverride } from '../types';\r\nimport Spritesheet from 'react-responsive-spritesheet';\r\nimport { useMemo } from 'react';\r\n\r\nexport const ScButton = styled.div`\r\n  padding: 2rem;\r\n`;\r\n\r\ninterface StyledLilManProps {\r\n  imageUrl: string\r\n};\r\n\r\nexport const StyledLilManGif = styled.div<StyledLilManProps>`\r\n  position:absolute;\r\n  width:100%;\r\n  height:100%;\r\n  bottom:-2rem;\r\n  background: url(${p => p.imageUrl}) no-repeat center;\r\n  background-position:center;\r\n  background-size:contain;\r\n`;\r\n\r\nexport const StyledLilManSpritesheet = styled.div`\r\n  position:absolute;\r\n  width:100%;\r\n  bottom:0;\r\n`;\r\n\r\ninterface LilManProps {\r\n  hintGiver: HintGiver,\r\n  onClick?: Function,\r\n  isTalking?: boolean,\r\n}\r\n\r\nexport function LilMan({hintGiver, onClick, isTalking = false}: LilManProps) {\r\n  const ssOverride = useMemo((): SpritesheetOverride | undefined => {\r\n    if(!hintGiver) return undefined;\r\n    return isTalking ? hintGiver.ssData?.talking : hintGiver.ssData?.idle;\r\n  }, [ hintGiver, isTalking ])\r\n\r\n  \r\n  if(hintGiver.imageType === 'spritesheet'){\r\n    if(!hintGiver || !hintGiver.spritesheetData || !ssOverride) return null;\r\n\r\n    return (\r\n      <StyledLilManSpritesheet>\r\n        <Spritesheet\r\n          image={hintGiver.spritesheetData.image}\r\n          widthFrame={hintGiver.spritesheetData.widthFrame}\r\n          heightFrame={hintGiver.spritesheetData.heightFrame}\r\n          startAt={ssOverride.startAt !== undefined ? ssOverride.startAt : hintGiver.spritesheetData.startAt}\r\n          endAt={ssOverride.endAt !== undefined ? ssOverride.endAt : hintGiver.spritesheetData.endAt}\r\n          fps={ssOverride.fps !== undefined ? ssOverride.fps : hintGiver.spritesheetData.fps}\r\n          steps={hintGiver.spritesheetData.steps}\r\n          direction={'forward'}\r\n          loop={true}\r\n          backgroundPosition={'center bottom'}\r\n          onClick={(e) => onClick && onClick(e)}\r\n        />\r\n      </StyledLilManSpritesheet>\r\n    )\r\n  } else{\r\n    return (\r\n      <StyledLilManGif\r\n        imageUrl={isTalking ? hintGiver.talkingImage : hintGiver.idleImage}\r\n        onClick={(e) => onClick && onClick(e)}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import styled from 'styled-components';\r\n\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { LilMan } from '../../components/lilman';\r\nimport { selectActiveHintGiver } from '../../app/slice';\r\n\r\nconst StyledLilManContainer = styled.div`\r\n  position: absolute;\r\n  width:100%;\r\n  height:100%;\r\n  left:50%;\r\n  top:50%;\r\n  transform: translate(-50%, -50%);\r\n`;\r\n\r\ninterface HintGiverProps {\r\n  isTalking?: boolean,\r\n  align?: 'bottom' | 'top'\r\n}\r\n\r\nexport function HintGiver({ isTalking, align = 'bottom' }: HintGiverProps) {\r\n  const hintGiver = useAppSelector(selectActiveHintGiver);\r\n  if (!hintGiver) return null;\r\n\r\n  return (\r\n    <StyledLilManContainer>\r\n      <LilMan\r\n        isTalking={isTalking}\r\n        hintGiver={hintGiver}\r\n      />\r\n    </StyledLilManContainer>\r\n  );\r\n}\r\n","import { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { getColor, mixinFontFamily } from '../../themes';\r\nimport { SpeechText } from '../../components/speech-text';\r\nimport { selectActiveHint } from '../../app/slice';\r\nimport { HintPicker } from './hint-picker';\r\nimport { HintGiver } from './hint-giver';\r\n\r\nconst StyledHintGiver = styled.div`\r\n  grid-column: 1 / span 1;\r\n  grid-row: 2 / span 2;\r\n  position:relative;\r\n  z-index:1;\r\n`;\r\n\r\nconst StyledBanner = styled.div`\r\n  grid-column: 1 / span 2;\r\n  grid-row: 3 / span 1;\r\n\r\n  background-color: ${getColor('brown_light')};\r\n  border-top: .75rem solid ${getColor('brown')};\r\n\r\n  display:grid;\r\n  grid-template-columns: 27rem auto;\r\n  grid-template-rows: 2rem auto;\r\n\r\n  z-index:1;\r\n`;\r\n\r\nconst StyledHintBox = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  grid-column: 2 / span 1;\r\n  grid-row: 2 / span 1;\r\n\r\n  p {\r\n    ${mixinFontFamily('speech')};\r\n    font-size: 5rem;\r\n  }\r\n`;\r\n\r\nconst StyledControls = styled.div`\r\n  grid-column: 2 / span 1;\r\n  grid-row: 1 / span 1;\r\n  position:relative;\r\n\r\n  >div{\r\n    position:absolute;\r\n    left:50%;\r\n    transform:translateX(-50%);\r\n\r\n    bottom: calc(100% - 1.5rem);\r\n    width:100%;\r\n  }\r\n`;\r\n\r\n\r\nexport function InfoPanel() {\r\n  const [ isTalking, setIsTalking ] = useState(true);\r\n  const hint = useAppSelector(selectActiveHint);\r\n\r\n  const hintText = useMemo(() => {\r\n    return hint ? hint.text : ''\r\n  }, [ hint ]);\r\n\r\n  useEffect(() => {\r\n    setIsTalking(true);\r\n  }, [ hint, setIsTalking ])\r\n\r\n  const onTextComplete = useCallback(() => {\r\n    setIsTalking(false);\r\n  }, [ setIsTalking ]);\r\n\r\n  return (\r\n    <>\r\n      <StyledBanner>\r\n        <StyledControls>\r\n          <HintPicker />\r\n        </StyledControls>\r\n        <StyledHintBox>\r\n          {hint && <SpeechText text={hintText} onTextComplete={onTextComplete}/>}\r\n        </StyledHintBox>\r\n      </StyledBanner>\r\n      <StyledHintGiver>\r\n        <HintGiver isTalking={isTalking} align={'bottom'}/>\r\n      </StyledHintGiver>\r\n    </>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { getColor } from '../../themes';\r\nimport { getGameReady } from '../../app/slice';\r\nimport { Board } from '../board';\r\nimport { Modal } from '../modal';\r\nimport { useSelector } from 'react-redux';\r\nimport { RuleMaster } from './rulemaster';\r\nimport { InfoPanel } from '../info-panel';\r\n\r\nconst StyledContainer = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  bottom:0;\r\n  right:0;\r\n  background-color: ${getColor('brown')};\r\n  color: ${getColor('brown_dark')};\r\n  overflow: hidden;\r\n\r\n  display:grid;\r\n  grid-template-columns: 27rem auto;\r\n  grid-template-rows: auto 30% 15rem;\r\n`;\r\n\r\nconst StyledBody = styled.div`\r\n  grid-column: 1 / span 2;\r\n  grid-row: 1 / span 2;\r\n`;\r\n\r\nexport function Main() {\r\n  const gameReady = useSelector(getGameReady);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <RuleMaster />\r\n      <Modal />\r\n      <StyledBody>\r\n        {gameReady && <Board />}\r\n      </StyledBody>\r\n      <InfoPanel />\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { HashRouter, Route, Routes } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Main } from './scenes/main';\r\n\r\nexport const ScStage = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  right:0;\r\n  bottom:0;\r\n`\r\n\r\nfunction App() {\r\n  const routes = [\r\n    {\r\n      route: '/',\r\n      text: 'Main',\r\n      element: <Main/>\r\n    }\r\n  ]\r\n  \r\n  return (\r\n    <HashRouter>\r\n      <ScStage>\r\n        <Routes>\r\n          {routes.map((p, i) => (\r\n            <Route key={i} path={p.route} element={p.element} />\r\n          ))}\r\n        </Routes>\r\n      </ScStage>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport boardReducer from './slice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    board: boardReducer\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './themes/fonts.css';\r\nimport GlobalStyle from './themes/';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n      <GlobalStyle />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}