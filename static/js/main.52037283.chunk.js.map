{"version":3,"sources":["app/data/data.tsx","utils/puzzler.tsx","themes/index.ts","scenes/info-panel/new-hint-giver.tsx","components/lil-face.tsx","scenes/board/board-controls.tsx","scenes/board/index.tsx","components/button.tsx","scenes/modal/modals.tsx","scenes/modal/index.tsx","scenes/main/rulemaster.tsx","components/speech-text.tsx","scenes/info-panel/hint-picker.tsx","scenes/info-panel/index.tsx","scenes/main/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","utils/index.tsx","utils/hint-generator.tsx","app/slice.tsx","app/hooks.ts"],"names":["SAMPLE_ROUNDDATA","title","description","hardcoded","answers","hints","attributes","HINT_GIVERS","id","name","bodyType","idleImage","talkingImage","generatedGrids","getGridShape","size","gridShape","gsRow","gridRow","rowIdx","gsCol","push","generateGridShape","createComparisonHash","numAttributes","numValues","hash","i","j","k","l","isCellSolution","answerSet","attrMatrix","a","filter","attrPair","length","calcSolution","numAnswers","availableAttributes","Array","from","keys","generatedAnswer","answerAttrs","randIdx","Math","floor","random","splice","generateCellMatrix","solutionSet","boxSize","pow","newMatrix","idx","r","c","bi","xVal","yVal","ansMatrix","isSolution","attrs","status","mixinFontFamily","style","css","createGlobalStyle","getColor","colorId","store","colors","brown_dark","brown","brown_light","black","grey_dark","grey","grey_light","white","pink","red_dark","red","red_light","green_dark","green","green_light","blue_dark","blue","blue_light","yellow_dark","yellow","yellow_light","purple","shadows","z1","z2","z3","breakpoints","mobile_tiny","mobile_medium","mobile_large","tablet","desktop","StyledHintGiver","styled","div","StyledLilManContainer","NewHintGiver","isTalking","hintGiver","align","useAppSelector","selectActiveHintGiver","useState","setBodyType","transition","setTransition","transitionTimer","useRef","startTransition","useCallback","current","global","setTimeout","useEffect","clearTimeout","className","hideFace","bodyClass","StyledLilManGif","p","imageUrl","LilFace","onClick","e","StyledButton","StyledSolvedButton","StyledHelpButton","StyledContainer","BoardControls","solved","checkIfSolved","dispatch","useAppDispatch","onSubmitGame","forceWin","submitAnswer","setGameStatus","StyledBoard","StyledLeftLabels","StyledLeftLabel","gridSize","StyledTopLabels","StyledTopLabel","StyledCells","StyledRawCellGroup","StyledCellGroup","cellRatio","StyledCell","BlankCellGroup","StyledControls","Board","grid","selectGridBox","gridLabels","selectGridLabels","gridInfo","selectGridInfo","onClickCell","cellIdx","rotateCell","useMemo","round","position","tStyles","transform","map","grIdx","cellGroup","cgIdx","cgKey","boardCell","gridColumn","cell","renderCellGroup","gl","glIdx","v","vIdx","toUpperCase","StyledPositiveButton","StyledNegativeButton","StyledSpecialButton","StyledNeutralButton","Button","text","buttonType","StyledButtonContainer","StyledBody","StyledWebsiteLink","WinModal","startNextRound","InvalidAnswerModal","restartRound","SplashModal","startRound","StyledDebug","StyledSolution","StyledInstructions","ul","HelpModal","href","target","DebugModal","renderedSolution","selectSolution","selectAttributes","comparisonHash","console","log","attr","rS","rSe","rSeIdx","StyledModal","StyledModalBg","Modal","modal","gameStatus","getModal","getGameStatus","RuleMaster","roundData","useSelector","selectRoundData","resetMatrix","innerTimer","innerText","SpeechText","onTextComplete","delay","curText","setCurText","isComplete","setIsComplete","nextTextPlease","fullText","reset","partial","slice","StyledHintHint","StyledHint","isActive","HintPicker","activeHintIdx","getActiveHintIdx","selectHints","onCloseHint","setActiveHint","onClickHint","hintIdx","hint","StyledBanner","StyledHintBox","InfoPanel","setIsTalking","selectActiveHint","roundInfo","selectRoundInfo","hintText","level","Main","gameReady","getGameReady","ScStage","App","routes","route","element","path","configureStore","reducer","board","boardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","RandIdx","min","max","RandFromArray","array","filterFromWorkingAttrs","solutionDetails","usedAttributes","solution","attrDetail","find","usedAttr","convertSolutionsToAttributeDetails","solutions","rawSortComparisons","getSortComparisons","sIdx","sortComparisons","sC","value","attributeIdx","aIdx","type","attribute","values","valueIdx","solutionIdx","aliases","descriptors","getSortComparison","attrA","attrB","rcIdx","orderDescriptions","forEach","filterUsedHints","attrGroup","reservedAttr","chooseAttribute","groupAttrDetails","influenceType","filteredAttributes","groupAttrs","sameGroup","attrDetails","influenceGroupIdx","group","constructAutoHintText","sortComparison","prefix","alias","getPrefix","suffix","descriptor","getSuffix","generateSingleHint","used","getInfluenceType","curRatio","influenceCalc","ratioTotal","gridSlice","createSlice","initialState","cellMatrix","roundIdx","reducers","state","action","payload","textHints","attributesMeta","maxHints","workingAttrs","yesNoRatio","generated","concat","generateHints","hgIdx","hT","hintGiverIdx","nextStatus","getNextStatus","getNextRoundIdx","actions","cellObj","getCellMatrix","getHints","getRoundIdx","renderHint","hintDef","curIdx","createSelector","h","activeHint","rowAttributes","colAttributes","rc","row","rIdx","_","cIdx","boxArr","numExpected","answeredCells","expectedCells","aC","useDispatch"],"mappings":"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","file":"static/js/main.52037283.chunk.js","sourcesContent":["import { AnswerData, HintGiver, RawCell, RenderedAnswer, RoundData } from '../../types';\r\n\r\n/**\r\n * The attributes that defined the thingies this round\r\n */\r\nexport const SAMPLE_ROUNDDATA: RoundData[] = [\r\n  // 2x3\r\n  {\r\n    title: 'Simple matrix',\r\n    description: 'Three animals are looking for jobs.',\r\n    hardcoded:{\r\n      answers:[\r\n        [ 0, 2 ], // monkey clown\r\n        [ 1, 0 ], // fish firefighter\r\n        [ 2, 1 ]  // frog dentist\r\n      ],\r\n      hints:[ \r\n        `The fish hopes they get to use that trampoline at least once.`,\r\n        `Everyone knows that clowns disintegrate when they touch water.`\r\n      ]\r\n    },\r\n    attributes: [\r\n      [ 'monkey', 'fish', 'frog' ],\r\n      [ 'firefighter', 'dentist', 'clown' ]\r\n    ]\r\n  },\r\n  // 3x3\r\n  {\r\n    title: 'Food Chain',\r\n    description: 'A hiker, a camper, and a birder wandered in the woods. So did some apex predators. Who got eaten by what?',\r\n    hardcoded:{\r\n      answers:[\r\n        [ 0, 2, 2 ], // hiker last bear \r\n        [ 1, 0, 0 ], // camper first lion \r\n        [ 2, 1, 1 ]  // birder second tiger\r\n      ],\r\n      hints:[ \r\n        `The camper loved cats, well.. used to love cats.`,\r\n        `The mountain lion ate before the tiger.`,\r\n        `The hiker walked past a tiger with a huge belly.`,\r\n        `The bird lover was eaten right before the camper.`\r\n      ]\r\n    },\r\n    attributes: [\r\n      [ 'hiker', 'camper', 'birder' ],\r\n      [ 'first meal', 'second feast', 'last dessert' ],\r\n      [ 'mountain lion', 'escaped tiger', 'bear' ]\r\n    ]\r\n  },\r\n  // 3x4\r\n  {\r\n    title: 'Pirate Predicament',\r\n    description: 'A crew of pirates are trying to find the treasure they buried. Help them remember what they buried and how to find it',\r\n    hardcoded:{\r\n      answers:[\r\n        [ 0, 2, 1 ],\r\n        [ 1, 3, 0 ],\r\n        [ 2, 1, 3 ],\r\n        [ 3, 0, 2 ]\r\n      ],\r\n      hints:[ \r\n        `Blue Beard will not be happy with his treasure`,\r\n        `The message in a bottle reads \"yarrrr read me treasure and ye skin will melt off. just speakin' from experience\"`,\r\n        `The valuable treasures were not written down`,\r\n        `Gravy bones is always drunk, it finally did something good for him`,\r\n        `Stank tooths treasure has to do with uh, teeth.`\r\n      ]\r\n    },\r\n    attributes: [\r\n      [ 'Blue Beard', 'Carl the Skinless', 'Stank Tooth', 'Gravy Bones' ],\r\n      [ 'Gold Doubloons', 'Skull with Gold Teeth', 'Just an Old Boot', 'A Book of Curses' ],\r\n      [ 'Message in a Bottle', 'Treasure Map', 'Grog-induced Dream', 'A Sea Shanty' ]\r\n    ]\r\n  },\r\n  // 4x3\r\n  {\r\n    title: '4 attributes, 3 values',\r\n    description: 'this puzzle has 4 attributes with 3 values. It doesnt work yet.',\r\n    hardcoded:{\r\n      answers:[\r\n        [ 0, 0, 0 ],\r\n        [ 1, 1, 1 ],\r\n        [ 2, 2, 2 ],\r\n        [ 3, 3, 3 ]\r\n      ],\r\n      hints:[ \r\n        `A hint needs to be created here`,\r\n        `A hint needs to be created here`,\r\n        `A hint needs to be created here`,\r\n        `A hint needs to be created here`\r\n      ]\r\n    },\r\n    attributes: [\r\n      [ 'monkey', 'frog', 'fish' ],\r\n      [ 'first', 'second', 'last' ],\r\n      [ 'happy', 'angry', 'sad' ],\r\n      [ 'firefighter', 'dentist', 'clown' ]\r\n    ]\r\n  },\r\n  // 4x4\r\n  {\r\n    title: '4 attributes, 4 values',\r\n    description: 'this puzzle has 4 attributes with 4 values. It doesnt work yet.',\r\n    hardcoded:{\r\n      answers:[\r\n        [ 0, 0, 0, 0 ],\r\n        [ 1, 1, 1, 1 ],\r\n        [ 2, 2, 2, 2 ],\r\n        [ 3, 3, 3, 3 ]\r\n      ],\r\n      hints:[ \r\n        `A hint needs to be created here`,\r\n        `A hint needs to be created here`,\r\n        `A hint needs to be created here`,\r\n        `A hint needs to be created here`\r\n      ]\r\n    },\r\n    attributes: [\r\n      [ 'monkey', 'frog', 'fish', 'crab' ],\r\n      [ 'first', 'second', 'third', 'last' ],\r\n      [ 'happy', 'angry', 'sad', 'bored' ],\r\n      [ 'firefighter', 'dentist', 'clown', 'lawyer' ]\r\n    ]\r\n  }\r\n]\r\n\r\nexport const HINT_GIVERS: HintGiver[] = [\r\n  {\r\n    id: 'skull',\r\n    name: 'Skull Guy',\r\n    bodyType: 'body1',\r\n    idleImage: 'assets/hinters/faces/skull-static.gif',\r\n    talkingImage: 'assets/hinters/faces/skull.gif',\r\n  }\r\n  ,{\r\n    id: 'cactoid',\r\n    name: 'Cactoid',\r\n    bodyType: 'body2',\r\n    idleImage: 'assets/hinters/faces/cactus-static.gif',\r\n    talkingImage: 'assets/hinters/faces/cactus.gif',\r\n  }\r\n  ,{\r\n    id: 'face1',\r\n    name: 'Face 1',\r\n    bodyType: 'body3',\r\n    idleImage: 'assets/hinters/faces/face1-static.gif',\r\n    talkingImage: 'assets/hinters/faces/face1.gif',\r\n  }\r\n]\r\n\r\ntype GridShapeDef = {\r\n  [key: string]: RawCell[][]\r\n}\r\n\r\n\r\n/*\r\n  Making this stupid data structure that I wanna get rid of\r\n  its the row/column of each attribute\r\n  4 ->  [\r\n          [[0, 1], [ 0, 2 ], [ 0, 3 ]],\r\n          [[3, 1], [ 3, 2 ]],\r\n          [[2, 1]]\r\n        ],\r\n*/\r\nexport const generateGridShape = (size: number) => {\r\n  let gridShape = [];\r\n  for(let gsRow = 0; gsRow < size - 1; gsRow++){\r\n    let gridRow = [];\r\n    let rowIdx = gsRow === 0 ? 0 : size - gsRow;\r\n    for(let gsCol = 0; gsCol < size - 1 - gsRow; gsCol++){\r\n      gridRow.push([ rowIdx, gsCol + 1 ])\r\n    }\r\n    gridShape.push(gridRow);\r\n  }\r\n  return gridShape as RawCell[][];\r\n}\r\n\r\nconst generatedGrids: GridShapeDef = {};\r\nexport const getGridShape = (size:number) => {\r\n  if(!generatedGrids[size]){\r\n    generatedGrids[size] = generateGridShape(size);\r\n  }\r\n  return generatedGrids[size];\r\n}\r\n\r\n// TODO, generate this\r\nexport const sampleAnswerData: AnswerData = [\r\n  [ 0, 0, 1, 0 ],\r\n  [ 2, 1, 2, 1 ],\r\n  [ 1, 2, 0, 2 ]\r\n]\r\n\r\n// TODO, generate this\r\nexport const RenderedAnswers: RenderedAnswer[] = [\r\n  {\r\n    attributes:[\r\n      ['animal', 'monkey'],\r\n      ['queue', 'first'],\r\n      ['emotion', 'angry'],\r\n      ['occupation', 'firefighter']\r\n    ]\r\n  },\r\n  {\r\n    attributes:[\r\n      ['animal', 'frog'],\r\n      ['queue', 'last'],\r\n      ['emotion', 'happy'],\r\n      ['occupation', 'clown']\r\n    ]\r\n  },\r\n  {\r\n    attributes:[\r\n      ['animal', 'fish'],\r\n      ['queue', 'second'],\r\n      ['emotion', 'sad'],\r\n      ['occupation', 'dentist']\r\n    ]\r\n  }\r\n]","import { getGridShape } from '../app/data/data';\r\nimport { AnswerSet, AttributeMatrix, CellObj, ComparisonHash } from '../types';\r\n\r\n// make a hash of all unique attribute:attribute combinations\r\nexport const createComparisonHash = (numAttributes: number, numValues: number): ComparisonHash => {\r\n  const hash: ComparisonHash = {};\r\n  /**\r\n   * makes a flat hash of every unique attribute:value relationship to be used when script is iteratively\r\n   * \"solving\" to create hints. This can get quite large\r\n   * {\r\n   *  0:0|1:0,\r\n   *  0:0|1:1,\r\n   *  0:0|1:2,\r\n   *  0:0|2:0,\r\n   *  ...\r\n   * }\r\n   */\r\n  for(let i = 0; i < numAttributes-1; i++){\r\n    for(let j = 0; j < numValues; j++){\r\n      for(let k = i + 1; k < numAttributes; k++){\r\n        for(let l = 0; l < numValues; l++){\r\n          hash[`${i}:${j}|${k}:${l}`] = -1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return hash;\r\n}\r\n\r\n// answer set is the raw attributes (in order) and their values\r\n/// [1, 1, 1] would mean a valueIdx of 1 for attributes 0, 1, and 2\r\n\r\n// attrMatrix is a 2d array of attrIdx and numberIdx, so [[0,0],[2,0]] compares the 1st val of attr[0] with the 1st value of attr[2]\r\nexport const isCellSolution = (answerSet: AnswerSet, attrMatrix: AttributeMatrix) => {\r\n  for(let a = 0; a < answerSet.length; a++){\r\n    if(attrMatrix.filter(attrPair => answerSet[a][attrPair[0]] === attrPair[1]).length === 2) return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n// make a unique combination of each attribute/value, with no overlaps.\r\n// This is the solution to the current truth table.\r\nexport const calcSolution = (numAnswers: number, numAttributes:number): AnswerSet => {\r\n  const availableAttributes = [];\r\n  for(let i = 0; i < numAttributes; i++){\r\n    availableAttributes.push(Array.from(Array(numAnswers).keys()))\r\n  }\r\n\r\n  let generatedAnswer = [];\r\n  for(let i = 0; i < numAnswers; i++){\r\n    let answerAttrs = [];\r\n    for(let i = 0; i < availableAttributes.length; i++){\r\n      const randIdx = Math.floor(Math.random() * availableAttributes[i].length);\r\n      answerAttrs.push(availableAttributes[i][randIdx]);\r\n      availableAttributes[i].splice(randIdx, 1);\r\n    }\r\n    generatedAnswer.push(answerAttrs)\r\n  }\r\n\r\n  return generatedAnswer;\r\n}\r\n\r\nexport const generateCellMatrix = (solutionSet: AnswerSet, numValues:number, numAttributes:number) => {\r\n  const boxSize = Math.pow(numValues, 2);\r\n  const gridShape = getGridShape(numAttributes);\r\n  const newMatrix = [];\r\n\r\n  let idx = 0;\r\n  for(let r = 0; r < gridShape.length; r++){\r\n    for(let c = 0; c < gridShape[r].length; c ++){\r\n      for(let bi = 0; bi < boxSize; bi++){\r\n        // [ 0, 1 ] is comparing attr0 and attr1\r\n        const attrPair = gridShape[r][c];\r\n        const xVal = Math.floor((idx % boxSize) / numValues);\r\n        const yVal = idx % numValues;\r\n\r\n        const ansMatrix: AttributeMatrix = [ [ attrPair[0], xVal ], [attrPair[1], yVal ] ]\r\n        const isSolution = isCellSolution(solutionSet, ansMatrix)\r\n\r\n        newMatrix.push({\r\n          idx: idx++,\r\n          attrs: attrPair,\r\n          isSolution: isSolution,\r\n          status: 0\r\n        } as CellObj)\r\n      }\r\n    }\r\n  }\r\n\r\n  return newMatrix;\r\n}","import { createGlobalStyle, css } from \"styled-components\"\r\n\r\ntype FontStyle = 'display' | 'speech';\r\nexport const mixinFontFamily = (style?: FontStyle) => {\r\n  switch(style){\r\n    case 'display' : return css`font-family: 'Noto Sans', sans-serif`;\r\n    case 'speech': return css`font-family: 'VT323', monospace`;\r\n    default: return css`font-family: 'VT323', monospace`;\r\n  }\r\n}\r\n\r\nexport default createGlobalStyle`\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    outline:0;\r\n    box-sizing:border-box;\r\n\r\n    -webkit-touch-callout: none; /* iOS Safari */\r\n    -webkit-user-select: none; /* Safari */\r\n     -khtml-user-select: none; /* Konqueror HTML */\r\n       -moz-user-select: none; /* Old versions of Firefox */\r\n        -ms-user-select: none; /* Internet Explorer/Edge */\r\n            user-select: none; /* Non-prefixed version, currently\r\n                                  supported by Chrome, Edge, Opera and Firefox */\r\n  }\r\n  #root{\r\n    margin:0 auto;\r\n  }\r\n  h1, h2, h3, h4{\r\n    font-family: 'Noto Sans', sans-serif;\r\n  }\r\n  a, p, button, span, h5, h6{\r\n    ${mixinFontFamily()};\r\n  }\r\n  h1{\r\n    font-size: 5rem;\r\n  }\r\n  h2{\r\n    font-size: 4rem;\r\n  }\r\n  h3{\r\n    font-size: 3.5rem;\r\n  }\r\n  h4{\r\n    font-size: 2.5rem;\r\n  }\r\n  h5{\r\n    font-size: 2rem;\r\n  }\r\n  p, span{\r\n    font-size:2rem;\r\n  }\r\n\r\n  html{\r\n    font-size: 62.5%;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    ${mixinFontFamily()};\r\n    background-color: black;\r\n  }\r\n`\r\n\r\n\r\n\r\nexport const listColors = () => {\r\n  return Object.keys(store.colors);\r\n}\r\n\r\n\r\nexport const getColor = (colorId: tColor) => {\r\n  return store.colors[colorId] as CssString; \r\n}\r\n\r\nexport const getShadow = (shadowId: tShadow) => {\r\n  return store.shadows[shadowId] as CssString;\r\n}\r\n\r\nexport const getBreakpoint = (breakpointId: tBreakpoint) => {\r\n  return store.breakpoints[breakpointId] as CssString;\r\n}\r\n\r\ntype CssString = string;\r\n\r\ntype tShadow = 'z1' | 'z2' | 'z3';\r\nconst shadows = {\r\n  z1: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.16)',\r\n  z2: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.36)',\r\n  z3: '-.2rem .5rem 1rem .2rem rgba(0,0,0,.36)'\r\n}\r\ntype tColor = 'brown_dark' | 'brown' | 'brown_light' | 'black' | 'grey_dark' | 'grey' | 'grey_light' | 'white' | 'pink' | 'red_dark' | 'red' | 'red_light' | 'blue_dark' | 'blue' | 'blue_light' | 'green_dark' | 'green' | 'green_light' | 'yellow_dark' | 'yellow' | 'yellow_light' | 'purple';\r\nconst colors = {\r\n  brown_dark: '#35120e',\r\n  brown: '#6b2b15',\r\n  brown_light: '#d48e55',\r\n  black: '#07070e',\r\n  grey_dark: '#1a1932',\r\n  grey: '#424c6e',\r\n  grey_light: '#92a1b9',\r\n  white: '#f7ede3',\r\n  pink: '#f29caa',\r\n  red_dark: '#7b102b',\r\n  red: '#b3102b',\r\n  red_light: '#e35970',\r\n  green_dark: '#123f1d',\r\n  green: '#33984b',\r\n  green_light: '#5ac54f',\r\n  blue_dark: '#003f61',\r\n  blue: '#1c638d',\r\n  blue_light: '#7ecbed',\r\n  yellow_dark: '#666a15',\r\n  yellow: '#afb224',\r\n  yellow_light: '#cfd14d',\r\n  purple: '#9c3d95',\r\n}\r\n\r\ntype tBreakpoint = 'mobile_tiny' | 'mobile_medium' | 'mobile_large' | 'tablet' | 'desktop';\r\nconst breakpoints = {\r\n  mobile_tiny: '300px',\r\n  mobile_medium: '400px',\r\n  mobile_large: '500px',\r\n  tablet: '768px',\r\n  desktop: '1024px'\r\n}\r\n\r\ntype ThemeStore = {\r\n  colors: typeof colors,\r\n  shadows: typeof shadows,\r\n  breakpoints: typeof breakpoints\r\n}\r\n\r\nexport const store: ThemeStore = {\r\n  colors: colors,\r\n  shadows: shadows,\r\n  breakpoints: breakpoints\r\n}\r\n","import styled from 'styled-components';\r\n\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { LilFace } from '../../components/lil-face';\r\nimport { selectActiveHintGiver } from '../../app/slice';\r\nimport { getColor } from '../../themes';\r\nimport { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\n\r\nconst StyledHintGiver = styled.div`\r\n  position:absolute;\r\n  bottom:-1rem;\r\n  width:100%;\r\n  height:100%;\r\n  left:10%;\r\n  transition: width .25s ease-in, height .5s ease-in-out, left 1s ease-out, background-color .5s, color .5s, border-radius .5s;\r\n  border-radius: 3rem 3rem 0 0;\r\n\r\n  &.hg-body1, &.hg-body2, &.hg-body3 {\r\n\r\n    >div{\r\n      opacity: 1;\r\n      transition: opacity .25s;\r\n      transition-delay: .25s;\r\n      >div{\r\n        width:100%;\r\n        height:100%;\r\n        transition: width .25s cubic-bezier(0.6, 1.47, 1, 1.06), height .25s cubic-bezier(0.6, 1.47, 1, 1.06);\r\n        transition-delay: .25s;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.hg-none{\r\n    background-color: ${getColor('brown_light')};\r\n    border: 1rem solid ${getColor('brown')};\r\n    height: 40%;\r\n    width: 80%;\r\n    left: 10%;\r\n  }\r\n\r\n  &.hg-body1 {\r\n    background-color: ${getColor('brown_dark')};\r\n    border: 1rem solid ${getColor('brown')};\r\n    height: 60%;\r\n    width: 90%;\r\n    left: 5%;\r\n  }\r\n\r\n  &.hg-body2 {\r\n    background-color: ${getColor('green_dark')};\r\n    border: 1rem solid ${getColor('green')};\r\n    border-radius: 3rem 12rem 0 0;\r\n    height: 100%;\r\n    width: 70%;\r\n    left: 15%;\r\n  }\r\n\r\n  &.hg-body3 {\r\n    border-radius: 6rem 6rem 0 0;\r\n    background-color: ${getColor('brown')};\r\n    border: 1rem solid ${getColor('brown_light')};\r\n    height: 90%;\r\n    width: 80%;\r\n    left: 10%;\r\n  }\r\n\r\n  &.transitioning {\r\n    >div{\r\n      opacity: 0;\r\n      transition: opacity 0s;\r\n\r\n      >div{\r\n        width:50%;\r\n        height:50%;\r\n        transition: width 0s, height 0s;\r\n        transition-delay: 0s;\r\n      }\r\n    }\r\n  }\r\n\r\n`;\r\n\r\nconst StyledLilManContainer = styled.div`\r\n  position: absolute;\r\n  width:100%;\r\n  height:100%;\r\n  left:50%;\r\n  top:50%;\r\n  transform: translate(-50%, -50%);\r\n`;\r\n\r\ninterface HintGiverProps {\r\n  isTalking?: boolean,\r\n  align?: 'bottom' | 'top'\r\n}\r\n\r\n\r\nexport function NewHintGiver({ isTalking, align = 'bottom' }: HintGiverProps) {\r\n  const hintGiver = useAppSelector(selectActiveHintGiver);\r\n  const [ bodyType, setBodyType ] = useState('');\r\n  const [ transition, setTransition ] = useState(false);\r\n  const transitionTimer: { current: NodeJS.Timeout | null } = useRef(null);\r\n\r\n  const startTransition = useCallback(() => {\r\n    setTransition(true);\r\n    transitionTimer.current = global.setTimeout(() => {\r\n      setTransition(false);\r\n    }, 250);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if(hintGiver && hintGiver.bodyType){\r\n      if(bodyType !== hintGiver.bodyType){\r\n        setBodyType(hintGiver.bodyType);\r\n        startTransition();\r\n      }\r\n    }\r\n  }, [ hintGiver, bodyType, transition, startTransition ]);\r\n\r\n  useEffect(() => {\r\n    global.clearTimeout(transitionTimer.current as NodeJS.Timeout);\r\n  }, []);\r\n\r\n  if (!hintGiver || !bodyType) {\r\n    return (\r\n      <StyledHintGiver className={'hg-none'} >\r\n      </StyledHintGiver>\r\n    );\r\n  }\r\n\r\n  const hideFace = hintGiver.bodyType !== bodyType;\r\n  const bodyClass = transition ? `hg-${bodyType} transitioning` : `hg-${bodyType}`;\r\n\r\n  return (\r\n    <StyledHintGiver className={bodyClass} >\r\n      <StyledLilManContainer>\r\n        <LilFace\r\n          isTalking={isTalking}\r\n          hintGiver={hintGiver}\r\n          hideFace={hideFace}\r\n        />\r\n      </StyledLilManContainer>\r\n    </StyledHintGiver>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { HintGiver } from '../types';\r\n\r\nexport const ScButton = styled.div`\r\n  padding: 2rem;\r\n`;\r\n\r\ninterface StyledLilManProps {\r\n  imageUrl: string\r\n};\r\n\r\nexport const StyledLilManGif = styled.div<StyledLilManProps>`\r\n  position:absolute;\r\n  width:100%;\r\n  height:100%;\r\n  left:50%;\r\n  top:50%;\r\n  transform: translate(-50%, -50%);\r\n  bottom:-2rem;\r\n  background: url(${p => p.imageUrl}) no-repeat center;\r\n  background-position:center;\r\n  background-size:contain;\r\n`;\r\n\r\ninterface LilManProps {\r\n  hintGiver: HintGiver,\r\n  onClick?: Function,\r\n  isTalking?: boolean,\r\n  hideFace?: boolean\r\n}\r\n\r\nexport function LilFace({hintGiver, onClick, isTalking = false, hideFace}: LilManProps) {\r\n  // helps prevent showing images before transition is done\r\n  if(hideFace) return null;\r\n  return (\r\n    <StyledLilManGif\r\n      imageUrl={isTalking ? hintGiver.talkingImage : hintGiver.idleImage}\r\n      onClick={(e) => onClick && onClick(e)}\r\n    />\r\n  );\r\n}\r\n","import { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { checkIfSolved, setGameStatus, submitAnswer } from '../../app/slice';\r\n\r\nconst StyledButton = styled.div`\r\n  border-radius: 1rem;\r\n  border: .4rem solid ${getColor('brown')};\r\n  cursor: pointer;\r\n  transition: background-color .1s, border-color .2s, box-shadow .15s, transform .15s;\r\n  text-align:center;\r\n  font-size:2.5rem;\r\n  padding: .5rem .5rem;\r\n  \r\n  &:active{\r\n    transform: translate(.35rem, .35rem);\r\n  }\r\n`;\r\n\r\nconst StyledSolvedButton = styled(StyledButton)`\r\n  padding: 1.5rem .5rem;\r\n\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('green')};\r\n  border-color: ${getColor('green_light')};\r\n  box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('green_light')};\r\n\r\n  &:hover{\r\n    border-color: ${getColor('white')};\r\n  }\r\n`;\r\n\r\nconst StyledHelpButton = styled(StyledButton)`\r\n  padding: 0.25rem .5rem;\r\n  color: ${getColor('brown_dark')};\r\n  background-color:${getColor('yellow')};\r\n  border-color: ${getColor('yellow_light')};\r\n  box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('yellow_light')};\r\n  \r\n  &:hover{\r\n    border-color: ${getColor('white')};\r\n  }\r\n  &:active{\r\n    background-color: ${getColor('yellow')};\r\n    border-color: ${getColor('yellow_light')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('yellow_light')};\r\n  }\r\n`;\r\n\r\nconst StyledContainer = styled.div`\r\n  ${StyledButton}{\r\n    margin:1rem;\r\n  }\r\n`;\r\n\r\nexport function BoardControls() {\r\n  const solved = useAppSelector(checkIfSolved);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const onSubmitGame = useCallback((solved:boolean, forceWin?: boolean) => {\r\n    dispatch(submitAnswer(forceWin || solved));\r\n  }, [ dispatch ]);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledHelpButton onClick={() => dispatch(setGameStatus('debug'))}>{'debug'}</StyledHelpButton>\r\n      <StyledHelpButton onClick={() => dispatch(setGameStatus('help'))}>{'HELP!'}</StyledHelpButton>\r\n      <StyledSolvedButton onClick={() => onSubmitGame(solved)}>{'SUBMIT'}</StyledSolvedButton>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { CellObj, CellStatus, RawCell } from '../../types';\r\nimport { rotateCell, selectGridBox, selectGridLabels, selectGridInfo } from '../../app/slice';\r\nimport { BoardControls } from '../board/board-controls';\r\n\r\nconst StyledBoard = styled.div`\r\n  position:absolute;\r\n  /* transform: matrix(2.5,1.25,-2.5,1.25,-300,-0) scale(.4) translate(-50%, -50%); */\r\n  left:50%;\r\n  top:40%;\r\n\r\n  display:grid;\r\n  grid-template-columns: 15rem 13rem 13rem 13rem; \r\n  grid-template-rows: 15rem 13rem 13rem 13rem; \r\n  column-gap: 2rem;\r\n  row-gap: 2rem;\r\n  color: ${getColor('brown_light')};\r\n\r\n  >div{\r\n    display:grid;\r\n    column-gap: 2rem;\r\n    row-gap: 2rem;\r\n  }\r\n`\r\n\r\nconst StyledLeftLabels = styled.div`\r\n  grid-column: 15rem;\r\n  grid-row: 2 / span 3;\r\n  \r\n  grid-template-columns: 15rem; \r\n  grid-template-rows: 13rem 13rem 13rem;\r\n`\r\n\r\ntype StyledLabelProps = {\r\n  gridSize: number\r\n}\r\nconst StyledLeftLabel = styled.div<StyledLabelProps>`\r\n  text-align:right;\r\n  ${p => p.gridSize === 4 ? css`\r\n    padding-top:0rem;\r\n    height: 25%;\r\n  `: css`\r\n    padding-top:1rem;\r\n    height: 33%;\r\n  `}\r\n\r\n  padding-right:1rem;\r\n  position:relative;\r\n  >span{\r\n    font-size: 3.5rem;\r\n    font-weight: 600;\r\n\r\n    position:absolute;\r\n    right:0;\r\n    white-space:nowrap;\r\n  }\r\n`\r\nconst StyledTopLabels = styled.div`\r\n  grid-column: 2 / span 3;\r\n  grid-row: 15rem;\r\n  \r\n  grid-template-columns: 13rem 13rem 13rem;\r\n  grid-template-rows: 15rem;\r\n`\r\nconst StyledTopLabel = styled.div<StyledLabelProps>`\r\n  display:inline-block;\r\n  ${p => p.gridSize === 4 ? css`\r\n    width: 25%;\r\n  `: css`\r\n    width: 33%;\r\n  `}\r\n  height: 100%;\r\n  position:relative;\r\n\r\n  span{\r\n    display:block;\r\n    position: absolute;\r\n\r\n    font-size: 3.5rem;\r\n    font-weight: 600;\r\n\r\n    ${p => p.gridSize === 4 ? css`\r\n      left: 1rem;\r\n    `: css`\r\n      left: 2rem;\r\n    `}\r\n    bottom: -1.5rem;\r\n    display: block;\r\n    white-space: nowrap;\r\n    transform-origin: left;\r\n    transform: rotate(-90deg);\r\n  }\r\n`\r\nconst StyledCells = styled.div`\r\n  grid-column: 2 / span 3;\r\n  grid-row: 2 / span 3;\r\n\r\n  grid-template-columns: 13rem 13rem 13rem;\r\n  grid-template-rows: 13rem 13rem 13rem;\r\n`\r\nconst StyledRawCellGroup = styled.div`\r\n  display:grid;\r\n  column-gap: .6rem;\r\n  row-gap: .6rem;\r\n`\r\ntype StyledCellGroupProps = {\r\n  gridSize: number,\r\n  cellRatio: string\r\n}\r\nconst StyledCellGroup = styled(StyledRawCellGroup)<StyledCellGroupProps>`\r\n  display:grid;\r\n  grid-template-columns: repeat(${p => p.gridSize}, ${p => p.cellRatio});\r\n  grid-template-rows: repeat(${p => p.gridSize}, ${p => p.cellRatio});\r\n  column-gap: .6rem;\r\n  row-gap: .6rem;\r\n\r\n  /* \r\n    grid-column: 1 i[ix]\r\n    grid-row: 2 i\r\n  */\r\n`\r\ntype StyledCellProps = {\r\n  status: CellStatus,\r\n  isSolution?: boolean\r\n}\r\nconst StyledCell = styled.div<StyledCellProps>`\r\n  border-radius: 1rem;\r\n  border: .4rem solid ${getColor('brown')};\r\n  cursor: pointer;\r\n  transition: background-color .1s, border-color .2s, box-shadow .15s, transform .15s;\r\n\r\n  ${p => p.status === 0 && css`\r\n    background-color:${getColor('brown')};\r\n    border-color: ${getColor('white')};\r\n    box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('white')};\r\n  `};\r\n  ${p => p.status === 1 && css`\r\n    background-color:${getColor('green')};\r\n    border-color: ${getColor('green_light')};\r\n    box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('green_light')};\r\n  `};\r\n  ${p => p.status === 2 && css`\r\n    background-color:${getColor('red_light')};\r\n    border-color: ${getColor('pink')};\r\n    box-shadow: 0.4rem 0.4rem 0 0.1rem ${getColor('pink')};\r\n  `};\r\n  &:hover{\r\n    ${p => p.status === 0 && css`\r\n      border-color: ${getColor('pink')};\r\n    `};\r\n    ${p => p.status === 1 && css`\r\n      border-color: ${getColor('white')};\r\n    `};\r\n    ${p => p.status === 2 && css`\r\n      border-color: ${getColor('green_light')};\r\n    `};\r\n  }\r\n  \r\n  &:active{\r\n    transform: translate(.35rem, .35rem);\r\n\r\n    ${p => p.status === 0 && css`\r\n      background-color: ${getColor('red_light')};\r\n      border-color: ${getColor('pink')};\r\n      box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('pink')};\r\n    `};\r\n    ${p => p.status === 1 && css`\r\n      background-color: ${getColor('brown')};\r\n      border-color: ${getColor('white')};\r\n      box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('white')};\r\n    `};\r\n    ${p => p.status === 2 && css`\r\n      background-color: ${getColor('green')};\r\n      border-color: ${getColor('green_light')};\r\n      box-shadow: 0.1rem 0.1rem 0 0.3rem ${getColor('green_light')};\r\n    `};\r\n  }\r\n`\r\nconst BlankCellGroup = styled(StyledRawCellGroup)`\r\n  background-color: ${getColor('white')};\r\n  opacity: .2;\r\n`\r\n\r\nconst StyledControls = styled.div`\r\n  grid-column: 1 / span 1;\r\n  grid-row: 1 / span 1;\r\n  position:absolute;\r\n  bottom:0;\r\n  right:0;\r\n`;\r\n\r\nexport function Board() {\r\n  const dispatch = useAppDispatch();\r\n  const grid = useAppSelector(selectGridBox);\r\n  const gridLabels = useAppSelector(selectGridLabels);\r\n  const gridInfo = useAppSelector(selectGridInfo);\r\n\r\n  const onClickCell = useCallback((cellIdx) => {\r\n    dispatch(rotateCell(cellIdx));\r\n  }, [ dispatch ]);\r\n\r\n  const cellRatio = useMemo(() => {\r\n    if(gridInfo.numValues === 3) {\r\n      return '30%';\r\n    } else if(gridInfo.numValues === 4) {\r\n      return '20%';\r\n    }\r\n    return `${Math.round(100 / gridInfo.numValues)}%`;\r\n  }, [ gridInfo.numValues ])\r\n\r\n  const renderCellGroup = (cellGroup: CellObj[], cgKey: string, gridSize: number, cellRatio: string, boardCell: RawCell) => {\r\n    // [0] check here cause this is all janky and the individual cells are undefined on load\r\n    if(cellGroup.length > 0 && cellGroup[0]){\r\n      return (\r\n        <StyledCellGroup \r\n          key={cgKey}\r\n          gridSize={gridSize}\r\n          cellRatio={cellRatio}\r\n          style={{gridRow: `${boardCell[0] + 1} / span 1`, gridColumn: `${boardCell[1] + 1} / span 1`}}\r\n        >\r\n          {cellGroup.map(cell => (\r\n            <StyledCell \r\n              key={`cell${cell?.idx}`}\r\n              status={cell.status}\r\n              isSolution={cell.isSolution}\r\n              onClick={() => onClickCell(cell.idx)}\r\n            />\r\n          ))}\r\n        </StyledCellGroup>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <BlankCellGroup \r\n        key={cgKey} \r\n        style={{gridRow: `${boardCell[0] + 1} / span 1`, gridColumn: `${boardCell[1] + 1} / span 1`}}\r\n      />\r\n    )\r\n  }\r\n\r\n  const zoom = 0.4;\r\n  const position = [ 0, -50 ];\r\n\r\n  const tStyles = {\r\n    transform: `translate(${position[0]}%, ${position[1]}%) matrix(2.5,1.25,-2.5,1.25,-300,-0) scale(${zoom})`\r\n  };\r\n\r\n  return (\r\n    <StyledBoard style={tStyles}>\r\n      <StyledControls>\r\n        <BoardControls />\r\n      </StyledControls>\r\n      <StyledCells>\r\n        {grid.map((gridRow, grIdx) => (\r\n          gridRow.map((cellGroup, cgIdx) => renderCellGroup(cellGroup, `cg${cgIdx}`, gridInfo.numValues, cellRatio, [grIdx, cgIdx])\r\n        )))}\r\n      </StyledCells>\r\n      <StyledTopLabels>\r\n        {gridLabels[1].map((gl, glIdx) => (\r\n          <div key={`tl${glIdx}`}>\r\n            {gl.map((v,vIdx) => (\r\n              <StyledTopLabel key={`tv${vIdx}`} gridSize={gridInfo.numValues}>\r\n                <span>{v.toUpperCase()}</span>\r\n              </StyledTopLabel>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </StyledTopLabels>\r\n      <StyledLeftLabels>\r\n        {gridLabels[0].map((gl, glIdx) => (\r\n          <div key={`ll${glIdx}`}>\r\n            {gl.map((v,vIdx) => (\r\n              <StyledLeftLabel key={`lv${vIdx}`} gridSize={gridInfo.numValues}>\r\n                <span>{v.toUpperCase()}</span>\r\n              </StyledLeftLabel>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </StyledLeftLabels>\r\n    </StyledBoard>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { MouseEventHandler } from 'hoist-non-react-statics/node_modules/@types/react';\r\nimport { getColor } from '../themes';\r\n\r\nconst StyledButton = styled.div`\r\n  border-radius: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color .1s, border-color .2s, box-shadow .15s, transform .15s;\r\n  text-align:center;\r\n  padding: 1.0rem .25rem;\r\n  span{\r\n    font-size:2.5rem;\r\n  }\r\n  \r\n  &:hover{\r\n    transform: translate(-.15rem, -.15rem);\r\n  }\r\n  &:active{\r\n    transform: translate(.45rem, .65rem);\r\n  }\r\n`\r\n\r\nconst StyledPositiveButton = styled(StyledButton)`\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('green')};\r\n  box-shadow: 0.4rem 0.5rem 0 0.4rem ${getColor('green_light')};\r\n\r\n  &:hover{\r\n    box-shadow: 0.6rem 0.75rem 0 0.4rem ${getColor('green_light')};\r\n  }\r\n  &:active{\r\n    background-color:${getColor('green')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.0rem ${getColor('green_light')};\r\n  }\r\n`;\r\n\r\nconst StyledNegativeButton = styled(StyledButton)`\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('red')};\r\n  box-shadow: 0.4rem 0.5rem 0 0.4rem ${getColor('red_light')};\r\n\r\n  &:hover{\r\n    box-shadow: 0.6rem 0.75rem 0 0.4rem ${getColor('red_light')};\r\n  }\r\n  &:active{\r\n    background-color:${getColor('red')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.0rem ${getColor('red_light')};\r\n  }\r\n`;\r\n\r\nconst StyledSpecialButton = styled(StyledButton)`\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('yellow_dark')};\r\n  box-shadow: 0.4rem 0.5rem 0 0.4rem ${getColor('yellow')};\r\n\r\n  &:hover{\r\n    box-shadow: 0.6rem 0.75rem 0 0.4rem ${getColor('yellow')};\r\n  }\r\n  &:active{\r\n    background-color:${getColor('yellow_dark')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.0rem ${getColor('yellow')};\r\n  }\r\n`;\r\n\r\n\r\nconst StyledNeutralButton = styled(StyledButton)`\r\n  padding: 1.5rem .5rem;\r\n\r\n  color: ${getColor('white')};\r\n  background-color:${getColor('brown_dark')};\r\n  box-shadow: 0.4rem 0.5rem 0 0.4rem ${getColor('brown')};\r\n\r\n  &:hover{\r\n    box-shadow: 0.6rem 0.75rem 0 0.4rem ${getColor('brown')};\r\n  }\r\n  &:active{\r\n    background-color:${getColor('brown_dark')};\r\n    box-shadow: 0.1rem 0.1rem 0 0.0rem ${getColor('brown')};\r\n  }\r\n`;\r\n\r\ntype ButtonType = 'positive' | 'negative' | 'special' | 'neutral';\r\n\r\ninterface LBType {\r\n  onClick: MouseEventHandler,\r\n  text: string,\r\n  buttonType?: ButtonType\r\n}\r\n\r\nexport function Button({ onClick, text, buttonType }: LBType) {\r\n  switch(buttonType){\r\n    case 'positive': return (\r\n      <StyledPositiveButton onClick={onClick}><span>{text}</span></StyledPositiveButton>\r\n    )\r\n    case 'negative': return (\r\n      <StyledNegativeButton onClick={onClick}><span>{text}</span></StyledNegativeButton>\r\n    )\r\n    case 'special': return (\r\n      <StyledSpecialButton onClick={onClick}><span>{text}</span></StyledSpecialButton>\r\n    )\r\n    default: return (\r\n      <StyledNeutralButton onClick={onClick}><span>{text}</span></StyledNeutralButton>\r\n    )\r\n  }\r\n}\r\n","import styled from 'styled-components';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { Button } from '../../components/button';\r\nimport { restartRound, selectAttributes, selectGridInfo, selectSolution, setGameStatus, startNextRound, startRound } from '../../app/slice';\r\nimport { getColor } from '../../themes';\r\nimport { createComparisonHash } from '../../utils/puzzler';\r\n\r\nconst StyledButtonContainer = styled.div`\r\n  flex: 1;\r\n  >div{\r\n    margin:2rem;\r\n  }\r\n`;\r\n\r\nconst StyledBody = styled.div`\r\n  margin-top:-1.5rem;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst StyledContainer = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n\r\n  padding:1.5rem;\r\n  text-align:center;\r\n`;\r\n\r\nconst StyledWebsiteLink = styled.a`\r\n  font-size: 3rem;\r\n  color: ${getColor('black')};\r\n\r\n  &:hover{\r\n    color: ${getColor('white')};\r\n  }\r\n`\r\n\r\nexport function WinModal() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledBody>\r\n        <h2>{'CORRECT!'}</h2>\r\n      </StyledBody>\r\n      <StyledButtonContainer>\r\n        <Button text={'NEXT LEVEL'} onClick={() => dispatch(startNextRound())} />\r\n        <Button buttonType={'special'} text={'REPLAY LEVEL'} onClick={() => dispatch(startNextRound())} />\r\n      </StyledButtonContainer>\r\n    </StyledContainer>\r\n  );\r\n}\r\n\r\nexport function InvalidAnswerModal() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledBody>\r\n        <h2>{'INCORRECT!'}</h2>\r\n        <p>{'Every green cell must match the solution'}</p>\r\n      </StyledBody>\r\n      <StyledButtonContainer>\r\n        <Button buttonType={'positive'} text={'KEEP TRYING'} onClick={() => dispatch(setGameStatus('playing'))} />\r\n        <Button buttonType={'special'} text={'RESET LEVEL'} onClick={() => dispatch(restartRound())} />\r\n        <Button buttonType={'negative'} text={'SKIP TO NEXT LEVEL!'} onClick={() => dispatch(startNextRound())} />\r\n      </StyledButtonContainer>\r\n    </StyledContainer>\r\n  );\r\n}\r\n\r\nexport function SplashModal() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledBody>\r\n        <h2>{'TRUTH TABLES'}</h2>\r\n        <p>{'Some kinda puzzle game'}</p>\r\n      </StyledBody>\r\n      <StyledButtonContainer>\r\n        <Button text={'OK'} onClick={() => dispatch(startRound(0))} />\r\n      </StyledButtonContainer>\r\n    </StyledContainer>\r\n  );\r\n}\r\n\r\nconst StyledDebug = styled.div`\r\n  margin: 2rem;\r\n\r\n  li{\r\n    list-style:none;\r\n  }\r\n`\r\n\r\nconst StyledSolution = styled.div`\r\n  margin-top: 2rem;\r\n\r\n  table{\r\n    width:100%;\r\n    border-collapse: collapse;\r\n    tr{\r\n      border: 2px solid ${getColor('white')};\r\n    }\r\n    th, td{\r\n      padding:.5rem;\r\n      text-align:center;\r\n      border: 2px solid ${getColor('white')};\r\n    }\r\n  }\r\n`\r\nconst StyledInstructions = styled.ul`\r\n  text-align:left;\r\n`;\r\n\r\nexport function HelpModal() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <h2>{'HELP!'}</h2>\r\n      \r\n      <StyledInstructions>\r\n        <li><p>{'Click the characters at the bottom of the screen to reveal clues about the puzzle'}</p></li>\r\n        <li><p>{'Click the grid cells to cycle between RED (no) and GREEN (yes)'}</p></li>\r\n        <li><p>{'After selecting all of the correct GREEN tiles, click SUBMIT to see if you have the answer correct'}</p></li>\r\n        <li><p>{'The RED tiles do not need to be filled in to solve the puzzle, but they can be used to help you rule out information!'}</p></li>\r\n        <li><p>{'Each attribute combination can only be used once'}</p></li>\r\n        <li><p>{'You may have to iterate through the clues multiple times to arrive at an answer'}</p></li>\r\n      </StyledInstructions>\r\n      \r\n      <StyledDebug>\r\n      </StyledDebug>\r\n      <StyledButtonContainer>\r\n        <Button text={'OK'} onClick={() => dispatch(setGameStatus('playing'))} />\r\n        <StyledWebsiteLink href=\"https://www.thomasyancey.com\" target=\"_blank\" title=\"see some of my other stuff\">{'thomasyancey.com'}</StyledWebsiteLink>\r\n      </StyledButtonContainer>\r\n    </StyledContainer>\r\n  );\r\n}\r\n\r\nexport function DebugModal() {\r\n  const dispatch = useAppDispatch();\r\n  const renderedSolution = useAppSelector(selectSolution);\r\n  const attributes = useAppSelector(selectAttributes);\r\n  const gridInfo = useAppSelector(selectGridInfo);\r\n\r\n  const comparisonHash = createComparisonHash(gridInfo.numAttributes, gridInfo.numValues);\r\n  console.log('comparisonHash: ', comparisonHash);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <h3>{'debug info'}</h3>\r\n      <StyledSolution>\r\n        <p>{'DEBUG SOLUTION'}</p>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              {attributes.map((attr, idx) => (\r\n                <th key={idx}><span>{`group ${idx + 1}`}</span></th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {renderedSolution?.map((rS, idx) => (\r\n              <tr key={idx}>\r\n                {rS.map((rSe, rSeIdx) => (\r\n                  <td key={`${idx}-${rSeIdx}`}><span>{rSe}</span></td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </StyledSolution>\r\n      <StyledButtonContainer>\r\n        <Button text={'OK'} onClick={() => dispatch(setGameStatus('playing'))} />\r\n      </StyledButtonContainer>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { GameStatus } from '../../types';\r\nimport { getGameStatus } from '../../app/slice';\r\nimport { HelpModal, SplashModal, WinModal, InvalidAnswerModal, DebugModal } from './modals';\r\n\r\nconst StyledContainer = styled.div`\r\n  position:fixed;\r\n  left:0;\r\n  top:0;\r\n  right:0;\r\n  bottom:0;\r\n  z-index:5;\r\n`;\r\nconst StyledModal = styled.div`\r\n  position:absolute;\r\n\r\n  left:50%;\r\n  top:50%;\r\n  transform: translate(-50%, -50%);\r\n  max-width:80%;\r\n  max-height:80%;\r\n  border-radius:2rem;\r\n\r\n  background-color: ${getColor('brown_light')};\r\n  color: ${getColor('brown_dark')};\r\n  border: 0.75rem solid ${getColor('brown_dark')};\r\n\r\n  padding:1rem;\r\n`;\r\n\r\nconst StyledModalBg = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  right:0;\r\n  top:0;\r\n  bottom:0;\r\n  background-color: ${getColor('brown')};\r\n  opacity: .95;\r\n  z-index:-1;\r\n`;\r\n\r\nexport const getModal = (gameStatus: GameStatus) => {\r\n  switch(gameStatus){\r\n    case 'start': return <SplashModal />\r\n    case 'roundWin': return <WinModal />\r\n    case 'invalidAnswer': return <InvalidAnswerModal />\r\n    case 'help': return <HelpModal />\r\n    case 'debug': return <DebugModal />\r\n    default: return null;\r\n  }\r\n}\r\n\r\nexport function Modal() {\r\n  const gameStatus = useAppSelector(getGameStatus);\r\n  const modal = getModal(gameStatus);\r\n  if(!modal) return null;\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledModal>\r\n        {modal}\r\n      </StyledModal>\r\n      <StyledModalBg />\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { useAppDispatch } from '../../app/hooks';\r\nimport { getGameStatus, resetMatrix, selectRoundData } from '../../app/slice';\r\nimport { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function RuleMaster() {\r\n  const dispatch = useAppDispatch();\r\n  const roundData = useSelector(selectRoundData);\r\n  const gameStatus = useSelector(getGameStatus);\r\n\r\n  // eventually, should move this logic into the slice somehow\r\n  useEffect(() => {\r\n    if(roundData && gameStatus === 'loading') {\r\n      dispatch(resetMatrix(roundData));\r\n    }\r\n  }, [dispatch, roundData, gameStatus]);\r\n\r\n  return null;\r\n}\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\ntype SpeechTextProps = {\r\n  text: string,\r\n  onTextComplete: Function,\r\n  delay?: number\r\n}\r\n\r\nlet innerTimer: NodeJS.Timeout;\r\nlet innerText = '';\r\n\r\nexport function SpeechText({ text, onTextComplete, delay }: SpeechTextProps) {\r\n  const [ curText, setCurText ] = useState('');\r\n  const [ isComplete, setIsComplete ] = useState(false);\r\n  const getNextText = (partial: string, full: string) => {\r\n    return full.slice(0, partial.length + 1);\r\n  }\r\n\r\n  const nextTextPlease = useCallback((fullText: string, reset?: boolean, delay?: number) => {\r\n    if(reset) innerText = '';\r\n    const startDelay = delay ? delay : 50;\r\n    innerTimer = setTimeout(() => {\r\n      innerText = getNextText(innerText, fullText);\r\n      setCurText(innerText);\r\n\r\n      if(innerText.length !== fullText.length){\r\n        nextTextPlease(fullText);\r\n      }else{\r\n        setIsComplete(true);\r\n      }\r\n    }, startDelay);\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setCurText('');\r\n    setIsComplete(false);\r\n    nextTextPlease(text, true, delay);\r\n\r\n    return () => {\r\n      clearTimeout(innerTimer);\r\n    }\r\n  }, [ text, nextTextPlease, delay ]);\r\n\r\n  useEffect(() => {\r\n    if(isComplete) onTextComplete();\r\n  }, [ isComplete, onTextComplete ]);\r\n  \r\n  return (\r\n    <p>{curText}</p>\r\n  );\r\n}\r\n","import { useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { getColor } from '../../themes';\r\nimport { getActiveHintIdx, selectHints, setActiveHint } from '../../app/slice';\r\n\r\nconst StyledContainer = styled.div`\r\n  pointer-events: none;\r\n`;\r\n\r\nconst StyledControls = styled.ul`\r\n  text-align:center;\r\n  >div{\r\n    display:inline-block;\r\n    pointer-events: all;\r\n  }\r\n`;\r\n\r\ninterface StyledHintProps {\r\n  isActive?: boolean;\r\n};\r\n\r\nconst StyledHintHint = styled.div`\r\n  position: absolute;\r\n  top: 100%;\r\n  font-size: 1.5rem;\r\n  left:50%;\r\n  transform: translateX(-50%);\r\n`\r\n\r\nconst StyledHint = styled.div<StyledHintProps>`\r\n  cursor: pointer;\r\n\r\n  background-color: ${getColor('brown_light')};\r\n\r\n  width: 5rem;\r\n  height: 5rem;\r\n  margin: .25rem;\r\n  border: .75rem solid ${getColor('brown')};\r\n  border-radius: 1.5rem;\r\n  transition: all .3s;\r\n\r\n  &:hover{  \r\n    width: 7rem;\r\n    height: 6rem;\r\n    background-color: ${getColor('yellow_light')};\r\n\r\n    transition: all .3s;\r\n  }\r\n\r\n  ${p => p.isActive && css`\r\n    background-color: ${getColor('yellow')};\r\n\r\n    width: 8rem;\r\n    height: 8rem;\r\n\r\n    &:hover{  \r\n      width: 9rem;\r\n      height: 9rem;\r\n      background-color: ${getColor('pink')};\r\n\r\n      transition: all .3s;\r\n    }\r\n  `}\r\n`;\r\n\r\nexport function HintPicker() {\r\n  const activeHintIdx = useAppSelector(getActiveHintIdx);\r\n  const hints = useAppSelector(selectHints);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const onCloseHint = useCallback(() => {\r\n    dispatch(setActiveHint(-1));\r\n  }, [dispatch]);\r\n\r\n  const onClickHint = useCallback((hintIdx) => {\r\n    dispatch(setActiveHint(hintIdx));\r\n  }, [ dispatch ]);\r\n\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledControls>\r\n        {hints?.map((hint, idx) => \r\n          idx === activeHintIdx ? (\r\n            <StyledHint \r\n              key={idx}\r\n              onClick={() => onCloseHint()}\r\n              isActive={true}\r\n            />\r\n          ):(\r\n            <StyledHint \r\n              key={idx}\r\n              onClick={() => onClickHint(idx)}\r\n            />\r\n          )\r\n        )}\r\n        {activeHintIdx === -1 && <StyledHintHint>{'^^ click the clues to solve the puzzle ^^'}</StyledHintHint>}\r\n      </StyledControls>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { getColor, mixinFontFamily } from '../../themes';\r\nimport { SpeechText } from '../../components/speech-text';\r\nimport { selectActiveHint, selectRoundInfo } from '../../app/slice';\r\nimport { HintPicker } from './hint-picker';\r\nimport { NewHintGiver } from './new-hint-giver';\r\n\r\nconst StyledHintGiver = styled.div`\r\n  grid-column: 1 / span 1;\r\n  grid-row: 2 / span 2;\r\n  position:relative;\r\n  z-index:1;\r\n`;\r\n\r\nconst StyledBanner = styled.div`\r\n  grid-column: 1 / span 2;\r\n  grid-row: 3 / span 1;\r\n\r\n  background-color: ${getColor('brown_light')};\r\n  border-top: .75rem solid ${getColor('brown')};\r\n\r\n  display:grid;\r\n  grid-template-columns: 27rem auto;\r\n  grid-template-rows: 1rem auto;\r\n\r\n  z-index:1;\r\n`;\r\n\r\nconst StyledHintBox = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  grid-column: 2 / span 1;\r\n  grid-row: 2 / span 1;\r\n  padding: 0 2rem;\r\n\r\n  p {\r\n    ${mixinFontFamily('speech')};\r\n    font-size: min(4vw, 5rem);\r\n  }\r\n`;\r\n\r\nconst StyledControls = styled.div`\r\n  grid-column: 2 / span 1;\r\n  grid-row: 1 / span 1;\r\n  position:relative;\r\n\r\n  >div{\r\n    position:absolute;\r\n    left:50%;\r\n    transform:translateX(-50%);\r\n\r\n    bottom: calc(100% - 1.5rem);\r\n    width:100%;\r\n  }\r\n`;\r\n\r\n\r\nexport function InfoPanel() {\r\n  const [ isTalking, setIsTalking ] = useState(true);\r\n  const hint = useAppSelector(selectActiveHint);\r\n  const roundInfo = useAppSelector(selectRoundInfo);\r\n\r\n  const hintText = useMemo(() => {\r\n    return hint ? hint.text : ''\r\n  }, [ hint ]);\r\n  \r\n  const description = useMemo(() => {\r\n    if(!roundInfo) return null;\r\n    return `Level ${roundInfo.level}: ${roundInfo.description}`;\r\n  }, [ roundInfo ])\r\n\r\n  useEffect(() => {\r\n    setIsTalking(true);\r\n  }, [ hint, setIsTalking ])\r\n\r\n  const onTextComplete = useCallback(() => {\r\n    setIsTalking(false);\r\n  }, [ setIsTalking ]);\r\n\r\n  if(!description) return null;\r\n\r\n\r\n  return (\r\n    <>\r\n      <StyledBanner>\r\n        <StyledControls>\r\n          <HintPicker />\r\n        </StyledControls>\r\n        <StyledHintBox>\r\n          {hint ? (\r\n            <SpeechText text={hintText} onTextComplete={onTextComplete} delay={750} />\r\n          ) : (\r\n            <SpeechText text={description} onTextComplete={onTextComplete} delay={500} />\r\n          )}\r\n        </StyledHintBox>\r\n      </StyledBanner>\r\n      <StyledHintGiver>\r\n        <NewHintGiver isTalking={isTalking} />\r\n      </StyledHintGiver>\r\n    </>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { getColor } from '../../themes';\r\nimport { getGameReady } from '../../app/slice';\r\nimport { Board } from '../board';\r\nimport { Modal } from '../modal';\r\nimport { useSelector } from 'react-redux';\r\nimport { RuleMaster } from './rulemaster';\r\nimport { InfoPanel } from '../info-panel';\r\n\r\nconst StyledContainer = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  bottom:0;\r\n  right:0;\r\n  background-color: ${getColor('brown')};\r\n  color: ${getColor('brown_dark')};\r\n  overflow: hidden;\r\n\r\n  display:grid;\r\n  grid-template-columns: 27rem auto;\r\n  grid-template-rows: auto 30% 15rem;\r\n`;\r\n\r\nconst StyledBody = styled.div`\r\n  grid-column: 1 / span 2;\r\n  grid-row: 1 / span 2;\r\n`;\r\n\r\nexport function Main() {\r\n  const gameReady = useSelector(getGameReady);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <RuleMaster />\r\n      <Modal />\r\n      <StyledBody>\r\n        {gameReady && <Board />}\r\n      </StyledBody>\r\n      <InfoPanel />\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import { HashRouter, Route, Routes } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Main } from './scenes/main';\r\n\r\nexport const ScStage = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  right:0;\r\n  bottom:0;\r\n`\r\n\r\nfunction App() {\r\n  const routes = [\r\n    {\r\n      route: '/',\r\n      text: 'Main',\r\n      element: <Main/>\r\n    }\r\n  ]\r\n  \r\n  return (\r\n    <HashRouter>\r\n      <ScStage>\r\n        <Routes>\r\n          {routes.map((p, i) => (\r\n            <Route key={i} path={p.route} element={p.element} />\r\n          ))}\r\n        </Routes>\r\n      </ScStage>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport boardReducer from './slice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    board: boardReducer\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './themes/fonts.css';\r\nimport GlobalStyle from './themes/';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n      <GlobalStyle />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const RandIdx = (min:number, max:number) => {\r\n  return Math.floor(min + Math.random() * (max - min));\r\n}\r\n\r\nexport const RandBetween = (min:number, max:number) => {\r\n  return min + Math.random() * (max - min);\r\n}\r\n\r\nexport const RandFromArray = (array: any[]): any | null => {\r\n  if(array.length === 0) return null;\r\n  return array[Math.floor(Math.random() * array.length)]\r\n}\r\n\r\nexport const RandIdxFromArray = (array: any[]): number => {\r\n  if(array.length === 0) return -1;\r\n  return Math.floor(Math.random() * array.length)\r\n}","import { RandFromArray, RandIdx, RandIdxFromArray } from '.';\r\nimport { AnswerSet, AttributeMetaDef, AttributeDetail, CalculatedHint, InfluenceRatio, InfluenceType, OrderDescription, SortComparison } from '../types';\r\n\r\n// what % of the time the same/different hint ratio is checked and attempted to be balanced;\r\nconst INFLUENCE_CALC = .75; // desired that 75% of the hints are for \"this IS that\" comparisons\r\nconst DESCRIPTOR_CHANCE = .4;\r\nconst PRUNE_RATE = .5; // what % of the time a used attribute is added to a block list\r\n\r\nexport const filterFromWorkingAttrs = (solutionDetails: AttributeDetail[][], usedAttributes: AttributeDetail[]) => {\r\n  return solutionDetails.map(solution => \r\n    solution.filter(attrDetail => {\r\n      if(usedAttributes.find(usedAttr => usedAttr.id === attrDetail.id)){\r\n        return false;\r\n      }\r\n      return true;\r\n    })\r\n  ).filter(solution => solution.length > 0);\r\n}\r\n\r\nexport const convertSolutionsToAttributeDetails = (solutions: AnswerSet, attributes: AttributeMetaDef[]) => {\r\n  const rawSortComparisons = getSortComparisons(attributes);\r\n\r\n  return solutions.map((solution, sIdx) => {\r\n    const sortComparisons = rawSortComparisons.map(sC => ({...sC, value: solution[sC.attributeIdx]}));\r\n\r\n    return solution.map((vIdx, aIdx) => ({\r\n      type: attributes[aIdx].type,\r\n      attribute: attributes[aIdx].id,\r\n      attributeIdx: aIdx,\r\n      value: attributes[aIdx].values[vIdx].id,\r\n      valueIdx: vIdx,\r\n      solutionIdx: sIdx,\r\n      aliases: attributes[aIdx].values[vIdx].aliases,\r\n      descriptors: attributes[aIdx].values[vIdx].descriptors,\r\n      sortComparisons: sortComparisons,\r\n      id: `${sIdx}-${aIdx}-${vIdx}`\r\n    }));\r\n  });\r\n}\r\n\r\n  /*\r\n    when prefix, for alias \"swinging rat\"\r\n    The { alias } is not the first in line\r\n    The { alias } is angry\r\n    The { alias } is a monkey\r\n\r\n    when suffix, for descriptor \"has legs\"\r\n    The first in line { descriptor }\r\n    The angry one { descriptor }\r\n    The monkey { descriptor }\r\n\r\n    orderDescription \"is earlier in line than\"\r\n    orderDescription \"is later in line than\"\r\n    orderDescription \"was born before\"\r\n    orderDescription \"was born after\"\r\n    The {alias} {orderDescription} the one that {descriptor}\r\n  */\r\n\r\nexport const getPrefix = (attr: AttributeDetail) => {\r\n  const alias = RandFromArray(attr.aliases);\r\n\r\n  switch(attr.type){\r\n    case 'thing': {\r\n      if(alias) return `The ${alias}`;\r\n      return `The ${attr.value}`;\r\n    }\r\n    case 'name': {\r\n      if(alias) return `${alias}`;\r\n      return `${attr.value}`;\r\n    }\r\n    case 'modifier': {\r\n      if(alias) return `The ${alias} one`;\r\n      return `The ${attr.value} one`;\r\n    }\r\n    case 'order': {\r\n      if(alias) return `The ${alias}`;\r\n      return `The ${attr.value}`;\r\n    }\r\n    default: {\r\n      if(alias) return `The ${alias}`;\r\n      return `The ${attr.value}`;\r\n    }\r\n  }\r\n}\r\n\r\nexport const getSuffix = (attr: AttributeDetail, sameGroup: boolean, sortComparison: string | null) => {\r\n  const alias = RandFromArray(attr.aliases);\r\n  const descriptor = (Math.random() < DESCRIPTOR_CHANCE) ? null : RandFromArray(attr.descriptors);\r\n\r\n  switch(attr.type){\r\n    case 'thing': {\r\n      if(sortComparison) {\r\n        // 'THE_PREFIX {was born before} one that {has legs}'\r\n        if(descriptor) return`${sortComparison} one that ${descriptor}`;\r\n        // 'THE_PREFIX {was born before} the {monkey}'\r\n        return `${sortComparison} the ${attr.value}`;\r\n      } else if(descriptor && sameGroup){\r\n        // 'THE_PREFIX {has legs}'\r\n        return `${descriptor}`;\r\n      }\r\n      // 'THE_PREFIX {is:is not} a {monkey}'\r\n      return `${sameGroup ? 'is' : 'is not'} a ${attr.value}`;\r\n    }\r\n    case 'name': {\r\n      if(sortComparison) {\r\n        // 'THE_PREFIX {was born before} the {fat loser}'\r\n        if(descriptor) return`${sortComparison} the ${descriptor}`;\r\n        // 'THE_PREFIX {was born before} {Tom}'\r\n        return `${sortComparison} ${attr.value}`;\r\n      } else if(descriptor && sameGroup){\r\n        // 'THE_PREFIX {is a fat loser}'\r\n        return `${descriptor}`;\r\n      }\r\n      // 'THE_PREFIX {is:is not} {Tom}'\r\n      return `${sameGroup ? 'is' : 'is not'} ${attr.value}`;\r\n    }\r\n    case 'modifier': {\r\n      if(sortComparison) {\r\n        // 'THE_PREFIX {was born before} the {hot-headed} one'\r\n        if(alias) return`${sortComparison} the ${alias} one`;\r\n        // 'THE_PREFIX {was born before} the {angry} one'\r\n        return `${sortComparison} the ${attr.value} one`;\r\n      } else if(descriptor) {\r\n        // 'THE_PREFIX {is:is not} {having a bad time}'\r\n        return `${sameGroup ? 'is' : 'is not'} ${descriptor}`;\r\n      }\r\n      // 'THE_PREFIX {is:is not} {angry}'\r\n      return `${sameGroup ? 'is' : 'is not'} ${attr.value}`;\r\n    }\r\n    case 'order': {\r\n      // order will never have a sortComparison \r\n      if(descriptor) {\r\n        // 'THE_PREFIX {is:is not} {near the end of the line}'\r\n        return `${sameGroup ? 'is' : 'is not'} ${descriptor}`;\r\n      }\r\n      // 'THE_PREFIX {is:is not} the {first}'\r\n      return `${sameGroup ? 'is' : 'is not'} the ${attr.value}`;\r\n    }\r\n    default: {\r\n      if(sortComparison) {\r\n        // 'THE_PREFIX {was born before} a {some kind of thing}'\r\n        if(descriptor) return `${sortComparison} a ${descriptor}`;\r\n        // 'THE_PREFIX {was born before} a {something}'\r\n        return `${sortComparison} a ${attr.value}`;\r\n      } else if(descriptor) {\r\n        // 'THE_PREFIX {is: is not} a {some kind of thing}'\r\n        return `${sameGroup ? 'is' : 'is not'} a ${descriptor}`;\r\n      }\r\n      // 'THE_PREFIX {is: is not} a {something}'\r\n      return `${sameGroup ? 'is' : 'is not'} a ${attr.value}`;\r\n    }\r\n  }\r\n}\r\n\r\n// TODO, reach back out to data, find queues from group, pick one, get back sort order between group A and B, get value\r\nexport const getSortComparison = (attrA: AttributeDetail, attrB: AttributeDetail) => {\r\n  // find sorty attribute from group A and group B\r\n  // return if A > B\r\n  \r\n  // pick rand sort in list (in case there are birthdays and a.. line or something)\r\n  const rcIdx = RandIdxFromArray(attrA.sortComparisons);\r\n  if(rcIdx > -1){\r\n    return attrA.sortComparisons[rcIdx].value < attrB.sortComparisons[rcIdx].value ? \r\n      attrA.sortComparisons[rcIdx].orderDescriptions[0]\r\n      : attrA.sortComparisons[rcIdx].orderDescriptions[1];\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport const getSortComparisons = (attributes: AttributeMetaDef[]) => {\r\n  const sortComparisons: SortComparison[] = [];\r\n  attributes.forEach((attr, idx) => {\r\n    if(attr.type === 'order'){\r\n      sortComparisons.push({\r\n        attributeIdx: idx,\r\n        orderDescriptions: attr.orderDescriptions as OrderDescription,\r\n        value: -1 // to be filled in later\r\n      })\r\n    }\r\n  });\r\n  /*\r\n    [\r\n      {\r\n        attributeIdx: 1,\r\n        value: -1,\r\n        orderDescriptions: ['before this'], ['after this']\r\n      }\r\n    ]\r\n  */\r\n  return sortComparisons;\r\n}\r\n\r\n// that the 1st attribute had. This is not filtered out yet, so go ahead and give it a skip\r\nexport const filterUsedHints = (attrGroup: AttributeDetail[], reservedAttr?: AttributeDetail) => {\r\n  if(!reservedAttr) return attrGroup;\r\n\r\n  return attrGroup.filter(attrDetail => {\r\n    // exact same comparison\r\n    if(reservedAttr.id === attrDetail.id) {\r\n      return false; // dont want to end up with \"the animal:monkey is not the animal:monkey\"\r\n    }\r\n    // same attribute comparison\r\n    else if(reservedAttr.attributeIdx === attrDetail.attributeIdx) {\r\n      if(reservedAttr.type === 'order'){ // if they have same attrIdx, they have the same type.\r\n        return false; // dont want to end up with \"the first is before the last\"\r\n      }\r\n\r\n      // might want to experiment with keeping this, and later in the comparison stack, \r\n      // when attrA and attrB have same attribute, use \"order\" to make a unique clue?\r\n      // where you can say \"the monkey was born before the cat\"\r\n      return false; // dont want to end up with \"the animal:monkey is the animal:cat\".. or do you?\r\n    }\r\n    return true;\r\n  });\r\n}\r\n\r\n// this needs a refactor, but it more or less can try to get more hints with an \"IS\" comparison vs \"IS NOT\"\r\nexport const influenceGroupIdx = (groupAttrs: AttributeDetail[][], reservedAttr?: AttributeDetail, influenceType?: InfluenceType) => {\r\n  if(!reservedAttr || !influenceType) return null;\r\n\r\n  const sameGroup = groupAttrs.find(attrDetails => \r\n    !!attrDetails.find(attrDetail => {\r\n      if(influenceType === 'same') return attrDetail.solutionIdx === reservedAttr.solutionIdx\r\n      return attrDetail.solutionIdx !== reservedAttr.solutionIdx // only other influenceType at this point is 'different'\r\n    })\r\n  );\r\n\r\n  if(sameGroup){\r\n    const filteredAttributes = filterUsedHints(sameGroup, reservedAttr);\r\n    if(filteredAttributes.length > 0){\r\n      return filteredAttributes;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport const chooseAttribute = (groupAttrDetails: AttributeDetail[][], reservedAttr?: AttributeDetail, influenceType?: InfluenceType) => {\r\n  // get an influence attribute if needed\r\n  let filteredAttributes = influenceGroupIdx(groupAttrDetails, reservedAttr, influenceType);\r\n  // otherwise, go the normal route\r\n  if(!filteredAttributes){\r\n    const group_idx = RandIdx(0, groupAttrDetails.length);\r\n  \r\n    const group = groupAttrDetails[group_idx];\r\n  \r\n    // just in case this is groupB, you dont want to match on the same attr/value that groupA had\r\n    filteredAttributes = filterUsedHints(group, reservedAttr);\r\n    if (!filteredAttributes || filteredAttributes.length === 0){\r\n      console.log('ran out of valid hint material for group');\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  return filteredAttributes[RandIdx(0, filteredAttributes.length)];\r\n} \r\n\r\nexport const constructAutoHintText = (attrA: AttributeDetail, attrB: AttributeDetail) => {\r\n  const sameGroup = attrA.solutionIdx === attrB.solutionIdx;\r\n\r\n  let sortComparison = null;\r\n  if(!sameGroup && attrA.attributeIdx !== attrB.attributeIdx && attrA.type !== 'order' && attrB.type !== 'order'){\r\n    sortComparison = getSortComparison(attrA, attrB);\r\n  }\r\n\r\n  const prefix = getPrefix(attrA);\r\n  const suffix = getSuffix(attrB, sameGroup, sortComparison);\r\n\r\n  return `${prefix} ${suffix}.`;\r\n}\r\n\r\n\r\nexport const generateSingleHint = (groupAttrDetails: AttributeDetail[][], influenceType?: InfluenceType): CalculatedHint | null => {\r\n  const attrA = chooseAttribute(groupAttrDetails);\r\n  if(!attrA) return null;\r\n\r\n  const attrB = chooseAttribute(groupAttrDetails, attrA, influenceType);\r\n  if(!attrB) return null;\r\n\r\n  const hintText = constructAutoHintText(attrA, attrB);\r\n\r\n  return {\r\n    text: hintText,\r\n    used: [ attrA, attrB ]\r\n  }\r\n}\r\n\r\nexport const getInfluenceType = (curRatio: InfluenceRatio, influenceCalc: number): InfluenceType => {\r\n  // why compare if you know the answer\r\n  if(influenceCalc === 1) return 'same';\r\n  if(influenceCalc === 0) return 'different';\r\n\r\n  const ratioTotal = curRatio[0] + curRatio[1];\r\n  const calcRatio = ratioTotal === 0 ? .5 : curRatio[0] / (ratioTotal); // avoid divide by zero\r\n  return influenceCalc >= calcRatio ? 'same' : 'different';\r\n}\r\n\r\nexport const generateHints = (solutions: AnswerSet, attributes: AttributeMetaDef[], maxHints: number = 0) => {\r\n  const attrDetails = convertSolutionsToAttributeDetails(solutions, attributes);\r\n  const textHints = [];\r\n\r\n  let workingAttrs = [...attrDetails];\r\n\r\n  // prevents attribute/value pairs (as in \"the monkey\") from getting used more than once across the hints\r\n  let usedAttributes: AttributeDetail[] = [];\r\n  let yesNoRatio: InfluenceRatio = [0,0];\r\n\r\n  let i = 0;\r\n\r\n  while(textHints.length < maxHints && workingAttrs.length > 0){\r\n    if(i > 20){\r\n      console.error('overflow in hint generation');\r\n      break;\r\n    }\r\n    i++;\r\n    \r\n    const influenceType = getInfluenceType(yesNoRatio, INFLUENCE_CALC);\r\n    const generated = generateSingleHint(workingAttrs, influenceType);\r\n    // sometimes when an attribute group is all used up, the loop ends early.\r\n    // This is actually kinda nice for helping randomize the yes/no count and hint giver a bit\r\n    if(!generated) continue;\r\n\r\n    if(generated.used[0].solutionIdx === generated.used[1].solutionIdx){\r\n      yesNoRatio[0]++;\r\n    }else{\r\n      yesNoRatio[1]++;\r\n    }\r\n\r\n    if(Math.random() < PRUNE_RATE){\r\n      usedAttributes = usedAttributes.concat(generated.used);\r\n      workingAttrs = filterFromWorkingAttrs(workingAttrs, usedAttributes);\r\n    }\r\n\r\n    textHints.push(generated.text);\r\n  }\r\n\r\n  return textHints;\r\n}","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from './store';\r\nimport { AnswerSet, AttributeMatrix, CellMatrix, CellObj, GameStatus, HintDef, HintGiver, RawCell, RenderedHint, RoundData, RoundInfo, SimpleAttributeDef } from '../types';\r\nimport { getGridShape, SAMPLE_ROUNDDATA, HINT_GIVERS } from './data/data';\r\nimport { calcSolution, generateCellMatrix } from '../utils/puzzler';\r\nimport { generateHints } from '../utils/hint-generator';\r\n\r\nconst MAX_HINTS = 8;\r\n\r\nexport interface GridState {\r\n  roundData: RoundData | null,\r\n  cellMatrix: CellMatrix,\r\n  hints: HintDef[],\r\n  activeHintIdx: number,\r\n  solution: AnswerSet | null,\r\n  gameStatus: GameStatus,\r\n  roundIdx: number,\r\n  gameReady: boolean\r\n}\r\n\r\nconst initialState: GridState = {\r\n  roundData: null,\r\n  cellMatrix: [],\r\n  hints: [],\r\n  activeHintIdx: -1,\r\n  solution: null,\r\n  gameStatus: 'start',\r\n  roundIdx: -1,\r\n  gameReady: false\r\n};\r\n\r\n\r\nexport const gridSlice = createSlice({\r\n  name: 'board',\r\n  initialState,\r\n  reducers: {\r\n    resetMatrix: (state: GridState, action: PayloadAction<RoundData>) => {\r\n      const roundData = action.payload;\r\n      if(roundData.attributes?.length > 0){\r\n        const numAttributes = roundData.attributes.length || 0;\r\n        const numValues = roundData.attributes[0].length;\r\n        if(numAttributes < 2 || numAttributes > 5){\r\n          console.error('invalid data, must use between 2 and 5 attributes');\r\n        }\r\n\r\n        const solutionSet = roundData.hardcoded?.answers ? \r\n          roundData.hardcoded?.answers\r\n          : calcSolution(numValues, numAttributes);\r\n\r\n          console.log('solution saved as ', solutionSet)\r\n        state.solution = solutionSet;\r\n        state.cellMatrix = generateCellMatrix(solutionSet, numValues, numAttributes);\r\n\r\n        let textHints: string[] = [];\r\n        if(roundData.hardcoded?.hints){\r\n          textHints = roundData.hardcoded?.hints;\r\n        } else if(roundData.attributesMeta){\r\n          textHints = generateHints(solutionSet, roundData.attributesMeta, MAX_HINTS);\r\n        } else{\r\n          console.error('invalid data, must have attributesMeta or hardcoded hints');\r\n        }\r\n\r\n        let hgIdx = Math.floor(Math.random() * HINT_GIVERS.length);\r\n        state.hints = textHints.map((hT, i) => ({\r\n          hintGiverIdx: (hgIdx + i) % HINT_GIVERS.length,\r\n          text: hT\r\n        }));\r\n\r\n        state.activeHintIdx = -1;\r\n        state.gameStatus = 'playing';\r\n        state.gameReady = true;\r\n\r\n      } else {\r\n        state.cellMatrix = [];\r\n      }\r\n    },\r\n    rotateCell: (state, action: PayloadAction<number>) => {\r\n      if(state.cellMatrix){\r\n        const nextStatus = getNextStatus(state.cellMatrix[action.payload]);\r\n        state.cellMatrix[action.payload].status = nextStatus;\r\n      }\r\n    },\r\n    setActiveHint: (state, action: PayloadAction<number>) => {\r\n      if(action.payload > -1 && !state.hints[action.payload]) console.error(`cannot set invalid hint ${action.payload}`);\r\n      state.activeHintIdx = action.payload;\r\n    },\r\n    submitAnswer: (state, action: PayloadAction<boolean>) => {\r\n      console.log('submitAnswer', action.payload);\r\n      if(action.payload === true){\r\n        state.gameStatus = 'roundWin';\r\n      }else{\r\n        state.gameStatus = 'invalidAnswer';\r\n      }\r\n    },\r\n    setGameStatus: (state, action: PayloadAction<GameStatus>) => {\r\n      state.gameStatus = action.payload;\r\n    },\r\n    startRound: (state, action: PayloadAction<number>) => {\r\n      state.gameReady = false;\r\n      state.gameStatus = 'loading';\r\n      state.roundIdx = getNextRoundIdx(action.payload - 1);\r\n    },\r\n    restartRound: (state) => {\r\n      state.gameReady = false;\r\n      state.gameStatus = 'loading';\r\n      state.roundIdx = getNextRoundIdx(state.roundIdx - 1);\r\n    },\r\n    startNextRound: (state) => {\r\n      state.gameReady = false;\r\n      state.gameStatus = 'loading';\r\n      state.roundIdx = getNextRoundIdx(state.roundIdx);\r\n    },\r\n  } \r\n});\r\n\r\nexport const { resetMatrix, rotateCell, setActiveHint, submitAnswer, startRound, startNextRound, restartRound, setGameStatus } = gridSlice.actions;\r\n\r\n\r\n\r\n// answer set is the raw attributes (in order) and their values\r\n/// [1, 1, 1] would mean a valueIdx of 1 for attributes 0, 1, and 2\r\n\r\n// attrMatrix is a 2d array of attrIdx and numberIdx, so [[0,0],[2,0]] compares the 1st val of attr[0] with the 1st value of attr[2]\r\nexport const isCellSolution = (answerSet: AnswerSet, attrMatrix: AttributeMatrix) => {\r\n  for(let a = 0; a < answerSet.length; a++){\r\n    if(attrMatrix.filter(attrPair => answerSet[a][attrPair[0]] === attrPair[1]).length === 2) return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n\r\n\r\n// blank > no > yes > maybe > blank\r\nconst getNextStatus = (cellObj: CellObj) => {\r\n  try{\r\n    switch(cellObj.status){\r\n      case 0: return 2;\r\n      case 2: return 1;\r\n      case 1: return 0;\r\n    }\r\n  } catch(e){\r\n    console.error('unexpected lookup for cellObj', cellObj)\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nexport const getCellMatrix = (state: RootState) => state.board.cellMatrix;\r\nexport const getSolution = (state: RootState) => state.board.solution;\r\nexport const getHints = (state: RootState) => state.board.hints;\r\nexport const getActiveHintIdx = (state: RootState) => state.board.activeHintIdx;\r\nexport const getGameStatus = (state: RootState) => state.board.gameStatus;\r\nexport const getRoundIdx = (state: RootState) => state.board.roundIdx;\r\nexport const getGameReady = (state: RootState) => state.board.gameReady;\r\n\r\nexport const renderHint = (hintDef: HintDef) => ({\r\n  hintGiver: HINT_GIVERS[hintDef.hintGiverIdx],\r\n  text: hintDef.text\r\n});\r\n\r\nexport const getNextRoundIdx = (curIdx: number) => {\r\n  if(curIdx + 1 < SAMPLE_ROUNDDATA.length){\r\n    return curIdx + 1;\r\n  }\r\n\r\n  // for now, just start over!\r\n  return 0;\r\n};\r\n\r\nexport const selectRoundData = createSelector(\r\n  [getRoundIdx],\r\n  (roundIdx): RoundData => {\r\n    return SAMPLE_ROUNDDATA[roundIdx]\r\n  }\r\n);\r\n\r\nexport const selectRoundInfo = createSelector(\r\n  [selectRoundData, getRoundIdx],\r\n  (roundData, roundIdx): RoundInfo | null => {\r\n    if(!roundData) return null;\r\n    return {\r\n      title: roundData.title,\r\n      description: roundData.description,\r\n      level: roundIdx + 1\r\n    }\r\n  }\r\n);\r\n\r\nexport const selectHints = createSelector(\r\n  [getHints],\r\n  (hints): RenderedHint[] => hints.map(h => renderHint(h))\r\n);\r\n\r\nexport const selectActiveHint = createSelector(\r\n  [getHints, getActiveHintIdx],\r\n  (hints, activeHintIdx): RenderedHint | null => {\r\n    if(activeHintIdx === -1){\r\n      return null;\r\n    }\r\n\r\n    return renderHint(hints[activeHintIdx]);\r\n  }\r\n);\r\n\r\nexport const selectActiveHintGiver = createSelector(\r\n  [selectActiveHint],\r\n  (activeHint): HintGiver | null => activeHint?.hintGiver || null\r\n);\r\n\r\nexport const selectAttributes = createSelector(\r\n  [selectRoundData],\r\n  (roundData) => roundData.attributes\r\n);\r\n\r\nexport const selectGridInfo = createSelector(\r\n  [selectRoundData],\r\n  (roundData) => ({\r\n    numAttributes: roundData.attributes.length,\r\n    numValues: roundData.attributes[0].length\r\n  })\r\n);\r\n\r\nexport const selectGridLabels = createSelector(\r\n  [selectAttributes],\r\n  (attributes): [ rows: SimpleAttributeDef[], cols: SimpleAttributeDef[] ] => {\r\n    const gridShape:RawCell[][] = getGridShape(attributes.length);\r\n    const rowAttributes = gridShape.map(r => r[0][0]);\r\n    const colAttributes = gridShape[0].map(rc => rc[1]);\r\n\r\n    return [\r\n      rowAttributes.map(idx => attributes[idx]),\r\n      colAttributes.map(idx => attributes[idx])\r\n    ]\r\n  }\r\n);\r\n\r\nexport const selectGridBox = createSelector(\r\n  [getCellMatrix, selectGridInfo],\r\n  (cellMatrix, gridInfo) => {\r\n    const gridShape: RawCell[][] = getGridShape(gridInfo.numAttributes);\r\n    let idx = 0;\r\n    const gridSize = gridShape[0].length;\r\n    const boxSize = Math.pow(gridInfo.numValues, 2);\r\n    return gridShape?.map((row, rIdx) => {\r\n      return [...Array(gridSize)].map((_, cIdx) => {\r\n        let boxArr: CellObj[] = [];\r\n        if(!gridShape[rIdx][cIdx]){\r\n          // handles empty cells in larger maps\r\n          return boxArr;\r\n        }\r\n\r\n        for(let i = 0; i < boxSize; i++){\r\n          boxArr.push(\r\n            cellMatrix[idx++]\r\n          )\r\n        }\r\n        return boxArr;\r\n      })\r\n    })\r\n  }\r\n);\r\n\r\nexport const selectSolution = createSelector(\r\n  [getSolution, selectAttributes],\r\n  (solution, attributes) => solution?.map(solution => {\r\n    console.log(solution, attributes)\r\n\r\n    return solution.map((vIdx,sIdx) => \r\n      attributes[sIdx][vIdx]\r\n    )\r\n  })\r\n);\r\n\r\n// if every \"solution\" cell has a 1 status, and there are not extra answers\r\nexport const checkIfSolved = createSelector(\r\n  [getCellMatrix],\r\n  (cellMatrix) => {\r\n    const numExpected = cellMatrix.filter(cell => cell.isSolution).length;\r\n    const answeredCells = cellMatrix.filter(cell => cell.status === 1);\r\n    if(answeredCells.length !== numExpected) return false;\r\n\r\n    const expectedCells = cellMatrix.filter(cell => cell.isSolution);\r\n    for(let i = 0; i < expectedCells.length; i++){\r\n      if(!answeredCells.find(aC => aC.idx === expectedCells[i].idx)){\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n);\r\n\r\nexport default gridSlice.reducer;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n"],"sourceRoot":""}